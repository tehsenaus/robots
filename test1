(lp0
(irnn
RNN
p1
(dp2
S'nin'
p3
I1
sS'_RNN__train'
p4
ctheano.compile.function_module
_constructor_Function
p5
(ctheano.compile.function_module
_constructor_FunctionMaker
p6
((dp7
S'profile'
p8
NsS'function_builder'
p9
ctheano.compile.function_module
Function
p10
sS'accept_inplace'
p11
I00
sS'inputs'
p12
(lp13
ccopy_reg
_reconstructor
p14
(ctheano.compile.io
In
p15
c__builtin__
object
p16
Ntp17
Rp18
(dp19
S'name'
p20
NsS'update'
p21
NsS'value'
p22
NsS'borrow'
p23
NsS'strict'
p24
I00
sS'implicit'
p25
I00
sS'mutable'
p26
I00
sS'variable'
p27
g14
(ctheano.tensor.var
TensorVariable
p28
g16
Ntp29
Rp30
(dp31
S'owner'
p32
NsS'index'
p33
NsS'tag'
p34
(itheano.gof.utils
scratchpad
p35
(dp36
S'trace'
p37
(lp38
(S'simpleGame.py'
p39
I112
S'<lambda>'
p40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p41
tp42
a(S'c:\\Workspace\\playground\\theano\\rnn.py'
p43
I34
S'__init__'
p44
S'h0 = self.__h0 = TT.vector()'
p45
tp46
a(S'c:\\Python27\\lib\\site-packages\\theano\\tensor\\basic.py'
p47
I744
S'vector'
p48
S'return type(name)'
p49
tp50
a(S'c:\\Python27\\lib\\site-packages\\theano\\gof\\type.py'
p51
I317
S'__call__'
p52
S'return utils.add_tag_trace(self.make_variable(name))'
p53
tp54
asbsS'type'
p55
g14
(ctheano.tensor.type
TensorType
p56
g16
Ntp57
Rp58
(dp59
S'broadcastable'
p60
(I00
tp61
sS'dtype'
p62
S'float64'
p63
sS'numpy_dtype'
p64
cnumpy
dtype
p65
(S'f8'
p66
I0
I1
tp67
Rp68
(I3
S'<'
p69
NNNI-1
I-1
I0
tp70
bsS'sparse_grad'
p71
I00
sg20
Nsbsg20
NsbsS'shared'
p72
I00
sS'allow_downcast'
p73
Nsbag14
(g15
g16
Ntp74
Rp75
(dp76
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp77
Rp78
(dp79
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p80
(dp81
g37
(lp82
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p83
tp84
a(g43
I32
g44
S'u = self.__u = TT.matrix()'
p85
tp86
a(g47
I771
S'matrix'
p87
S'return type(name)'
p88
tp89
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p90
tp91
asbsg55
g14
(g56
g16
Ntp92
Rp93
(dp94
g60
(I00
I00
tp95
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp96
Rp97
(dp98
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp99
Rp100
(dp101
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p102
(dp103
g37
(lp104
(S'c:\\Workspace\\playground\\theano\\rnn.py'
p105
I76
S'train'
p106
S'self.initTraining()'
p107
tp108
a(S'c:\\Workspace\\playground\\theano\\rnn.py'
p109
I88
S'initTraining'
p110
S't = TT.matrix()'
p111
tp112
a(g47
I771
g87
S'return type(name)'
p113
tp114
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p115
tp116
asbsg55
g14
(g56
g16
Ntp117
Rp118
(dp119
g60
(I00
I00
tp120
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp121
Rp122
(dp123
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp124
Rp125
(dp126
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p127
(dp128
g37
(lp129
(g105
I76
g106
S'self.initTraining()'
p130
tp131
a(g109
I90
g110
S'lr = TT.scalar()'
p132
tp133
a(g47
I714
S'scalar'
p134
S'return type(name)'
p135
tp136
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p137
tp138
asbsg55
g14
(g56
g16
Ntp139
Rp140
(dp141
g60
(tsg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp142
Rp143
(dp144
g20
Nsg21
g14
(g28
g16
Ntp145
Rp146
(dp147
g32
g14
(ctheano.gof.graph
Apply
p148
g16
Ntp149
Rp150
(dp151
g12
(lp152
g14
(ctheano.tensor.sharedvar
TensorSharedVariable
p153
g16
Ntp154
Rp155
(dp156
g33
NsS'container'
p157
g14
(ctheano.gof.link
Container
p158
g16
Ntp159
Rp160
(dp161
g20
NsS'storage'
p162
(lp163
cnumpy.core.multiarray
_reconstruct
p164
(cnumpy
ndarray
p165
(I0
tp166
S'b'
p167
tp168
Rp169
(I1
(I1
I2
tp170
g68
I00
S'L3c\xc9\\\x84\xee?\xc0\xd5G\xf4\xcd1\xa8?'
p171
tp172
basg24
I00
sS'readonly'
p173
I00
sg55
g14
(g56
g16
Ntp174
Rp175
(dp176
g60
(I00
I00
tp177
sg62
S'float64'
p178
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p179
(dp180
bsg32
Nsg55
g175
sbag14
(g28
g16
Ntp181
Rp182
(dp183
g32
g14
(g148
g16
Ntp184
Rp185
(dp186
g12
(lp187
g14
(g28
g16
Ntp188
Rp189
(dp190
g32
g14
(g148
g16
Ntp191
Rp192
(dp193
g12
(lp194
g125
asg34
(itheano.gof.utils
scratchpad
p195
(dp196
g37
(lp197
(S'c:\\Python27\\lib\\site-packages\\theano\\tensor\\var.py'
p198
I144
S'__mul__'
p199
S'return theano.tensor.mul(self, other)'
p200
tp201
a(S'c:\\Python27\\lib\\site-packages\\theano\\gof\\op.py'
p202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p203
tp204
a(S'c:\\Python27\\lib\\site-packages\\theano\\tensor\\elemwise.py'
p205
I533
S'make_node'
p206
S'inplace=False)(input))'
p207
tp208
a(g202
I401
g52
S'self.add_tag_trace(node)'
p209
tp210
asbsS'outputs'
p211
(lp212
g189
asS'op'
p213
g14
(ctheano.tensor.elemwise
DimShuffle
p214
g16
Ntp215
Rp216
(dp217
S'drop'
p218
(lp219
sS'shuffle'
p220
(lp221
sS'augment'
p222
(lp223
I0
aI1
asS'input_broadcastable'
p224
(tsS'inplace'
p225
I00
sS'new_order'
p226
(S'x'
p227
g227
tp228
sS'_op_use_c_code'
p229
S'g++'
p230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p231
(dp232
bsg55
g14
(g56
g16
Ntp233
Rp234
(dp235
g60
(I01
I01
tp236
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp237
Rp238
(dp239
g32
g14
(g148
g16
Ntp240
Rp241
(dp242
g12
(lp243
g14
(g28
g16
Ntp244
Rp245
(dp246
g32
g14
(g148
g16
Ntp247
Rp248
(dp249
g12
(lp250
g14
(g28
g16
Ntp251
Rp252
(dp253
g32
g14
(g148
g16
Ntp254
Rp255
(dp256
g12
(lp257
g14
(g28
g16
Ntp258
Rp259
(dp260
g32
g14
(g148
g16
Ntp261
Rp262
(dp263
g12
(lp264
g14
(g28
g16
Ntp265
Rp266
(dp267
g32
g14
(g148
g16
Ntp268
Rp269
(dp270
g12
(lp271
g14
(g28
g16
Ntp272
Rp273
(dp274
g32
g14
(g148
g16
Ntp275
Rp276
(dp277
g12
(lp278
g14
(g28
g16
Ntp279
Rp280
(dp281
g32
g14
(g148
g16
Ntp282
Rp283
(dp284
g12
(lp285
g14
(g28
g16
Ntp286
Rp287
(dp288
g32
g14
(g148
g16
Ntp289
Rp290
(dp291
g12
(lp292
g78
asg34
(itheano.gof.utils
scratchpad
p293
(dp294
g37
(lp295
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p296
tp297
a(S'c:\\Python27\\lib\\site-packages\\theano\\scan_module\\scan.py'
p298
I505
S'scan'
p299
S"nw_seq = seq['input'][offset + k - mintap:]"
p300
tp301
a(g198
I407
S'__getitem__'
p302
S'lambda entry: isinstance(entry, Variable)))'
p303
tp304
a(g202
I401
g52
S'self.add_tag_trace(node)'
p305
tp306
asbsg211
(lp307
g287
asg213
g14
(ctheano.tensor.subtensor
Subtensor
p308
g16
Ntp309
Rp310
(dp311
S'idx_list'
p312
(c__builtin__
slice
p313
(cnumpy.core.multiarray
scalar
p314
(g65
(S'i4'
p315
I0
I1
tp316
Rp317
(I3
S'<'
p318
NNNI-1
I-1
I0
tp319
bS'\x00\x00\x00\x00'
p320
tp321
Rp322
NNtp323
Rp324
tp325
sS'perform_cache_cdata'
p326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p327
(dp328
bsg55
g14
(g56
g16
Ntp329
Rp330
(dp331
g60
(I00
I00
tp332
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p333
(dp334
g37
(lp335
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p336
tp337
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p338
tp339
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p340
tp341
a(g202
I401
g52
S'self.add_tag_trace(node)'
p342
tp343
asbsg211
(lp344
g280
asg213
g14
(ctheano.tensor.basic
Shape
p345
g16
Ntp346
Rp347
(dp348
g229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p349
(dp350
g37
(lp351
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p352
tp353
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p354
tp355
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p356
tp357
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p358
tp359
asbsg55
g14
(g56
g16
Ntp360
Rp361
(dp362
g60
(I00
tp363
sg62
S'int64'
p364
sg64
g65
(S'i8'
p365
I0
I1
tp366
Rp367
(I3
S'<'
p368
NNNI-1
I-1
I0
tp369
bsg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p370
(dp371
g37
(lp372
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p373
tp374
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p375
tp376
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p377
tp378
a(g202
I401
g52
S'self.add_tag_trace(node)'
p379
tp380
asbsg211
(lp381
g273
asg213
g14
(g308
g16
Ntp382
Rp383
(dp384
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p385
tp386
Rp387
tp388
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p389
(dp390
bsg55
g14
(g56
g16
Ntp391
Rp392
(dp393
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp394
Rp395
(dp396
g32
g14
(g148
g16
Ntp397
Rp398
(dp399
g12
(lp400
g287
ag14
(ctheano.scalar.basic
ScalarVariable
p401
g16
Ntp402
Rp403
(dp404
g32
g14
(g148
g16
Ntp405
Rp406
(dp407
g12
(lp408
g273
asg34
(itheano.gof.utils
scratchpad
p409
(dp410
g37
(lp411
(S'c:\\Python27\\lib\\site-packages\\theano\\tensor\\subtensor.py'
p412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p413
tp414
a(g412
I384
S'<genexpr>'
p415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p416
tp417
a(g412
I374
S'my_as_scalar'
p418
S'return theano.tensor.scalar_from_tensor(a)'
p419
tp420
a(g202
I401
g52
S'self.add_tag_trace(node)'
p421
tp422
asbsg211
(lp423
g403
asg213
g14
(ctheano.tensor.basic
ScalarFromTensor
p424
g16
Ntp425
Rp426
(dp427
g229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p428
(dp429
bsg55
g14
(ctheano.scalar.basic
Scalar
p430
g16
Ntp431
Rp432
(dp433
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p434
(dp435
g37
(lp436
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p437
tp438
a(g298
I546
g299
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p439
tp440
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p441
tp442
a(g202
I401
g52
S'self.add_tag_trace(node)'
p443
tp444
asbsg211
(lp445
g395
asg213
g14
(g308
g16
Ntp446
Rp447
(dp448
g312
(g313
(Ng14
(g430
g16
Ntp449
Rp450
(dp451
g62
g364
sbNtp452
Rp453
tp454
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p455
(dp456
bsg55
g14
(g56
g16
Ntp457
Rp458
(dp459
g60
(I00
I00
tp460
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp461
Rp462
(dp463
g32
g14
(g148
g16
Ntp464
Rp465
(dp466
g12
(lp467
g14
(g28
g16
Ntp468
Rp469
(dp470
g32
g14
(g148
g16
Ntp471
Rp472
(dp473
g12
(lp474
g14
(ctheano.tensor.var
TensorConstant
p475
g16
Ntp476
Rp477
(dp478
g33
Nsg20
NsS'cached'
p479
I01
sS'data'
p480
g164
(g165
(I0
tp481
g167
tp482
Rp483
(I1
(tg68
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p484
tp485
bsg34
(itheano.gof.utils
scratchpad
p486
(dp487
S'unique_value'
p488
Nsbsg55
g14
(g56
g16
Ntp489
Rp490
(dp491
g60
(tsg62
S'float64'
p492
sg64
g68
sg71
I00
sg20
Nsbsbag14
(g28
g16
Ntp493
Rp494
(dp495
g32
g14
(g148
g16
Ntp496
Rp497
(dp498
g12
(lp499
g273
ag14
(g28
g16
Ntp500
Rp501
(dp502
g32
g14
(g148
g16
Ntp503
Rp504
(dp505
g12
(lp506
g14
(g28
g16
Ntp507
Rp508
(dp509
g32
g14
(g148
g16
Ntp510
Rp511
(dp512
g12
(lp513
g14
(g28
g16
Ntp514
Rp515
(dp516
g32
g14
(g148
g16
Ntp517
Rp518
(dp519
g12
(lp520
g14
(g28
g16
Ntp521
Rp522
(dp523
g32
g14
(g148
g16
Ntp524
Rp525
(dp526
g12
(lp527
g30
asg34
(itheano.gof.utils
scratchpad
p528
(dp529
g37
(lp530
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p531
tp532
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p533
tp534
a(g47
I3636
S'shape_padleft'
p535
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p536
tp537
a(g202
I401
g52
S'self.add_tag_trace(node)'
p538
tp539
asbsg211
(lp540
g522
asg213
g14
(g214
g16
Ntp541
Rp542
(dp543
g218
(lp544
sg220
(lp545
I0
asg222
(lp546
I0
asg224
g61
sg225
I00
sg226
(g227
I0
tp547
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p548
(dp549
bsg55
g14
(g56
g16
Ntp550
Rp551
(dp552
g60
(I01
I00
tp553
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p554
(dp555
g37
(lp556
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p557
tp558
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p559
tp560
a(g47
I3339
S'unbroadcast'
p561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p562
tp563
a(g202
I401
g52
S'self.add_tag_trace(node)'
p564
tp565
asbsg211
(lp566
g515
asg213
g14
(ctheano.tensor.basic
Rebroadcast
p567
g16
Ntp568
Rp569
(dp570
g229
g230
sS'axis'
p571
(dp572
I0
I00
ssbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p573
(dp574
g37
(lp575
(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p576
tp577
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p578
tp579
a(g47
I3284
g206
S'return Apply(self, [x], [t()])'
p580
tp581
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p582
tp583
asbsg55
g14
(g56
g16
Ntp584
Rp585
(dp586
g60
(I00
I00
tp587
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p588
(dp589
g37
(lp590
(g298
I620
g299
S'actual_n_steps'
p591
tp592
a(S'c:\\Python27\\lib\\site-packages\\theano\\scan_module\\scan_utils.py'
p593
I363
S'expand'
p594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p595
tp596
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p597
tp598
a(g202
I401
g52
S'self.add_tag_trace(node)'
p599
tp600
asbsg211
(lp601
g508
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p602
(dp603
g37
(lp604
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p605
tp606
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p607
tp608
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p609
tp610
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p611
tp612
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p613
(dp614
g37
(lp615
(g298
I620
g299
S'actual_n_steps'
p616
tp617
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p618
tp619
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p620
tp621
a(g202
I401
g52
S'self.add_tag_trace(node)'
p622
tp623
asbsg211
(lp624
g501
asg213
g14
(g308
g16
Ntp625
Rp626
(dp627
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p628
tp629
Rp630
tp631
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p632
(dp633
bsg55
g14
(g56
g16
Ntp634
Rp635
(dp636
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p637
(dp638
g37
(lp639
(g298
I620
g299
S'actual_n_steps'
p640
tp641
a(g593
I364
g594
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p642
tp643
a(g198
I117
S'__add__'
p644
S'return theano.tensor.basic.add(self, other)'
p645
tp646
a(g202
I401
g52
S'self.add_tag_trace(node)'
p647
tp648
asbsg211
(lp649
g494
asg213
g14
(ctheano.tensor.elemwise
Elemwise
p650
g16
Ntp651
Rp652
(dp653
S'__module__'
p654
S'tensor'
p655
sS'scalar_op'
p656
g14
(ctheano.scalar.basic
Add
p657
g16
Ntp658
Rp659
(dp660
S'output_types_preference'
p661
ctheano.scalar.basic
upcast_out
p662
sg229
g230
sg20
S'add'
p663
sbsg20
S'Elemwise{add,no_inplace}'
p664
sg229
g230
sS'destroy_map'
p665
(dp666
sS'nfunc_spec'
p667
(g663
I2
I1
tp668
sS'inplace_pattern'
p669
(dp670
sS'__doc__'
p671
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p672
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p673
(dp674
g37
(lp675
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p676
tp677
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p678
tp679
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p680
tp681
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p682
tp683
asbsg55
g14
(g56
g16
Ntp684
Rp685
(dp686
g60
(tsg62
S'int64'
p687
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp688
Rp689
(dp690
g32
g14
(g148
g16
Ntp691
Rp692
(dp693
g12
(lp694
g14
(g28
g16
Ntp695
Rp696
(dp697
g32
g14
(g148
g16
Ntp698
Rp699
(dp700
g12
(lp701
g515
asg34
(itheano.gof.utils
scratchpad
p702
(dp703
g37
(lp704
(g298
I620
g299
S'actual_n_steps'
p705
tp706
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p707
tp708
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p709
tp710
a(g202
I401
g52
S'self.add_tag_trace(node)'
p711
tp712
asbsg211
(lp713
g696
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p714
(dp715
g37
(lp716
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p717
tp718
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p719
tp720
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p721
tp722
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p723
tp724
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p725
(dp726
g37
(lp727
(g298
I620
g299
S'actual_n_steps'
p728
tp729
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p730
tp731
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p732
tp733
a(g202
I401
g52
S'self.add_tag_trace(node)'
p734
tp735
asbsg211
(lp736
g689
asg213
g14
(g308
g16
Ntp737
Rp738
(dp739
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p740
tp741
Rp742
tp743
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p744
(dp745
bsg55
g14
(g56
g16
Ntp746
Rp747
(dp748
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p749
(dp750
g37
(lp751
(g593
I366
g594
S'dtype=tensor_var.dtype)'
p752
tp753
a(g47
I2090
S'zeros'
p754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p755
tp756
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p757
tp758
a(g202
I401
g52
S'self.add_tag_trace(node)'
p759
tp760
asbsg211
(lp761
g469
asg213
g14
(ctheano.tensor.basic
Alloc
p762
g16
Ntp763
Rp764
(dp765
g229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p766
(dp767
g37
(lp768
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p769
tp770
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p771
tp772
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p773
tp774
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p775
tp776
asbsg55
g14
(g56
g16
Ntp777
Rp778
(dp779
g60
(I00
I00
tp780
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag515
ag14
(g401
g16
Ntp781
Rp782
(dp783
g32
g14
(g148
g16
Ntp784
Rp785
(dp786
g12
(lp787
g501
asg34
(itheano.gof.utils
scratchpad
p788
(dp789
g37
(lp790
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p791
tp792
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p793
tp794
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p795
tp796
a(g202
I401
g52
S'self.add_tag_trace(node)'
p797
tp798
asbsg211
(lp799
g782
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p800
(dp801
bsg55
g14
(g430
g16
Ntp802
Rp803
(dp804
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p805
(dp806
g37
(lp807
(g593
I367
g594
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p808
tp809
a(g412
I904
S'set_subtensor'
p810
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p811
tp812
a(g412
I957
S'inc_subtensor'
p813
S'return the_op(real_x, y, *real_idxargs)'
p814
tp815
a(g202
I401
g52
S'self.add_tag_trace(node)'
p816
tp817
asbsg211
(lp818
g462
asg213
g14
(ctheano.tensor.subtensor
IncSubtensor
p819
g16
Ntp820
Rp821
(dp822
g312
(lp823
g313
(Ng14
(g430
g16
Ntp824
Rp825
(dp826
g62
g364
sbNtp827
Rp828
asS'destroyhandler_tolerate_aliased'
p829
(lp830
sg229
g230
sS'set_instead_of_inc'
p831
I01
sg225
I00
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p832
(dp833
g37
(lp834
(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p835
tp836
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p837
tp838
a(g412
I1109
g206
S'[x.type()])'
p839
tp840
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p841
tp842
asbsg55
g778
sg20
Nsbag273
ag155
ag14
(g153
g16
Ntp843
Rp844
(dp845
g33
Nsg157
g14
(g158
g16
Ntp846
Rp847
(dp848
g20
Nsg162
(lp849
g164
(g165
(I0
tp850
g167
tp851
Rp852
(I1
(I2
I2
tp853
g68
I00
S'\x04!\x9c\x92}B\xd6?\xf0i?[ET\xe1\xbf\xaa\x90@\xba\x8f\x90\xec?\xce)\x1bWEQ\xea?'
p854
tp855
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp856
Rp857
(dp858
g60
(I00
I00
tp859
sg62
S'float64'
p860
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p861
(dp862
bsg32
Nsg55
g857
sbag14
(g153
g16
Ntp863
Rp864
(dp865
g33
Nsg157
g14
(g158
g16
Ntp866
Rp867
(dp868
g20
Nsg162
(lp869
g164
(g165
(I0
tp870
g167
tp871
Rp872
(I1
(I2
I1
tp873
g68
I00
S'\\P\xf7;N\xc0\xed?r\xb3\r?\xde\xdf\xee?'
p874
tp875
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp876
Rp877
(dp878
g60
(I00
I00
tp879
sg62
S'float64'
p880
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p881
(dp882
bsg32
Nsg55
g877
sbasg34
(itheano.gof.utils
scratchpad
p883
(dp884
g37
(lp885
(S'c:\\Python27\\lib\\site-packages\\theano\\gradient.py'
p886
I1063
S'access_grad_cache'
p887
S'term = access_term_cache(node)[idx]'
p888
tp889
a(g886
I924
S'access_term_cache'
p890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p891
tp892
a(S'c:\\Python27\\lib\\site-packages\\theano\\scan_module\\scan_op.py'
p893
I1400
S'grad'
p894
S'outs = self(*inputs)'
p895
tp896
a(g202
I401
g52
S'self.add_tag_trace(node)'
p897
tp898
asbsg211
(lp899
g14
(g28
g16
Ntp900
Rp901
(dp902
g32
g269
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p903
(dp904
g37
(lp905
(g893
I1400
g894
S'outs = self(*inputs)'
p906
tp907
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p908
tp909
a(g893
I440
g206
S'[t() for t in self.output_types])'
p910
tp911
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p912
tp913
asbsg55
g14
(g56
g16
Ntp914
Rp915
(dp916
g60
(I00
I00
tp917
sg62
S'float64'
p918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag266
asg213
g14
(ctheano.scan_module.scan_op
Scan
p919
g16
Ntp920
Rp921
(dp922
g8
I00
sg12
(lp923
g14
(g28
g16
Ntp924
Rp925
(dp926
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p927
(dp928
g37
(lp929
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p930
tp931
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p932
tp933
a(g298
I465
g299
S'nw_slice = _seq_val_slice.type()'
p934
tp935
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p936
tp937
asbsg55
g14
(g56
g16
Ntp938
Rp939
(dp940
g60
(I00
tp941
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp942
Rp943
(dp944
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p945
(dp946
g37
(lp947
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p948
tp949
a(g298
I592
g299
S"arg = safe_new(init_out['initial'])"
p950
tp951
a(g593
I75
S'safe_new'
p952
S'nw_x = x.type()'
p953
tp954
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p955
tp956
asbsg55
g58
sg20
Nsbag14
(g28
g16
Ntp957
Rp958
(dp959
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p960
(dp961
g37
(lp962
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p963
tp964
a(g298
I913
g299
S'not arg.update)]'
p965
tp966
a(g593
I75
g952
S'nw_x = x.type()'
p967
tp968
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p969
tp970
asbsg55
g175
sg20
Nsbag14
(g28
g16
Ntp971
Rp972
(dp973
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p974
(dp975
g37
(lp976
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p977
tp978
a(g298
I913
g299
S'not arg.update)]'
p979
tp980
a(g593
I75
g952
S'nw_x = x.type()'
p981
tp982
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p983
tp984
asbsg55
g857
sg20
Nsbag14
(g28
g16
Ntp985
Rp986
(dp987
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p988
(dp989
g37
(lp990
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p991
tp992
a(g298
I913
g299
S'not arg.update)]'
p993
tp994
a(g593
I75
g952
S'nw_x = x.type()'
p995
tp996
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p997
tp998
asbsg55
g877
sg20
NsbasS'tap_array'
p999
(lp1000
(lp1001
I-1
aasS'n_mit_mot'
p1002
I0
sS'_hash_inner_graph'
p1003
I-1001547823
sg211
(lp1004
g14
(g28
g16
Ntp1005
Rp1006
(dp1007
g32
g14
(g148
g16
Ntp1008
Rp1009
(dp1010
g12
(lp1011
g14
(g28
g16
Ntp1012
Rp1013
(dp1014
g32
g14
(g148
g16
Ntp1015
Rp1016
(dp1017
g12
(lp1018
g14
(g28
g16
Ntp1019
Rp1020
(dp1021
g32
g14
(g148
g16
Ntp1022
Rp1023
(dp1024
g12
(lp1025
g925
ag958
asg34
(itheano.gof.utils
scratchpad
p1026
(dp1027
g37
(lp1028
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p1029
tp1030
a(S'c:\\Workspace\\playground\\theano\\rnn.py'
p1031
I27
S'step'
p1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p1033
tp1034
a(g47
I4732
S'dot'
p1035
S'return _dot(a, b)'
p1036
tp1037
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1038
tp1039
asbsg211
(lp1040
g1020
asg213
g14
(ctheano.tensor.basic
Dot
p1041
g16
Ntp1042
Rp1043
(dp1044
g229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1045
(dp1046
bsg55
g14
(g56
g16
Ntp1047
Rp1048
(dp1049
g60
(I00
tp1050
sg62
S'float64'
p1051
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1052
Rp1053
(dp1054
g32
g14
(g148
g16
Ntp1055
Rp1056
(dp1057
g12
(lp1058
g943
ag972
asg34
(itheano.gof.utils
scratchpad
p1059
(dp1060
g37
(lp1061
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p1062
tp1063
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p1064
tp1065
a(g47
I4732
g1035
S'return _dot(a, b)'
p1066
tp1067
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1068
tp1069
asbsg211
(lp1070
g1053
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1071
(dp1072
bsg55
g14
(g56
g16
Ntp1073
Rp1074
(dp1075
g60
(I00
tp1076
sg62
S'float64'
p1077
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1078
(dp1079
g37
(lp1080
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p1081
tp1082
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p1083
tp1084
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p1085
tp1086
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1087
tp1088
asbsg211
(lp1089
g1013
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1090
(dp1091
g37
(lp1092
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p1093
tp1094
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1095
tp1096
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1097
tp1098
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1099
tp1100
asbsg55
g14
(g56
g16
Ntp1101
Rp1102
(dp1103
g60
(I00
tp1104
sg62
S'float64'
p1105
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1106
(dp1107
g37
(lp1108
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p1109
tp1110
a(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p1111
tp1112
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p1113
tp1114
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1115
tp1116
asbsg211
(lp1117
g1006
asg213
g14
(g650
g16
Ntp1118
Rp1119
(dp1120
g654
g655
sg656
g14
(ctheano.scalar.basic
Tanh
p1121
g16
Ntp1122
Rp1123
(dp1124
g661
ctheano.scalar.basic
upgrade_to_float
p1125
sg229
g230
sg20
S'tanh'
p1126
sbsg20
S'Elemwise{tanh,no_inplace}'
p1127
sg229
g230
sg665
(dp1128
sg667
(g1126
I1
I1
tp1129
sg669
(dp1130
sg671
S"hyperbolic tangent of a\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1131
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1132
(dp1133
g37
(lp1134
(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p1135
tp1136
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1137
tp1138
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1139
tp1140
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1141
tp1142
asbsg55
g14
(g56
g16
Ntp1143
Rp1144
(dp1145
g60
(I00
tp1146
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1147
Rp1148
(dp1149
g32
g14
(g148
g16
Ntp1150
Rp1151
(dp1152
g12
(lp1153
g1006
ag986
asg34
(itheano.gof.utils
scratchpad
p1154
(dp1155
g37
(lp1156
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p1157
tp1158
a(g1031
I28
g1032
S'y_t = TT.dot(h_t, W_out)'
p1159
tp1160
a(g47
I4732
g1035
S'return _dot(a, b)'
p1161
tp1162
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1163
tp1164
asbsg211
(lp1165
g1148
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1166
(dp1167
bsg55
g14
(g56
g16
Ntp1168
Rp1169
(dp1170
g60
(I00
tp1171
sg62
S'float64'
p1172
sg64
g68
sg71
I00
sg20
Nsbsg20
NsbasS'seqs_arg_offset'
p1173
I2
sS'vector_seqs'
p1174
(lp1175
I00
asg665
ccollections
OrderedDict
p1176
((lp1177
tp1178
Rp1179
sS'n_nit_sot'
p1180
I1
sS'n_outs'
p1181
I1
sS'mintaps'
p1182
(lp1183
g314
(g317
S'\xff\xff\xff\xff'
p1184
tp1185
Rp1186
aI0
asS'n_sit_sot'
p1187
I1
sS'nit_sot_arg_offset'
p1188
I3
sS'as_while'
p1189
I00
sS'truncate_gradient'
p1190
I-1
sS'n_seqs'
p1191
I1
sg20
S'scan_fn'
p1192
sS'mode_instance'
p1193
g14
(ctheano.compile.mode
Mode
p1194
g16
Ntp1195
Rp1196
(S'cvm'
p1197
g14
(ctheano.gof.optdb
Query
p1198
g16
Ntp1199
Rp1200
(dp1201
g20
S'OPT_FAST_RUN'
p1202
sS'require'
p1203
c__builtin__
set
p1204
((lp1205
tp1206
Rp1207
sS'subquery'
p1208
(dp1209
sS'position_cutoff'
p1210
NsS'exclude'
p1211
g1204
((lp1212
tp1213
Rp1214
sS'include'
p1215
g1204
((lp1216
S'fast_run'
p1217
atp1218
Rp1219
sbtp1220
bsS'info'
p1221
g1176
((lp1222
(lp1223
g999
ag1000
aa(lp1224
g1191
aI1
aa(lp1225
g1002
aI0
aa(lp1226
S'n_mit_mot_outs'
p1227
aI0
aa(lp1228
S'mit_mot_out_slices'
p1229
a(lp1230
aa(lp1231
S'n_mit_sot'
p1232
aI0
aa(lp1233
g1187
aI1
aa(lp1234
S'n_shared_outs'
p1235
aI0
aa(lp1236
g1180
aI1
aa(lp1237
g1190
aI-1
aa(lp1238
g20
ag1192
aa(lp1239
S'mode'
p1240
aNaa(lp1241
g665
ag1179
aa(lp1242
S'gpu'
p1243
aI00
aa(lp1244
g1189
aI00
aa(lp1245
g8
aI00
aatp1246
Rp1247
sS'_cmodule_key'
p1248
((t(S'CLinker.cmodule_key'
p1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p1250
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p1251
(g1043
((g58
((I-1
I1
tp1252
I00
tp1253
tp1254
(g857
((I-1
I3
tp1255
I00
tp1256
tp1257
tp1258
(I1
(I00
tp1259
tp1260
tp1261
(g1043
((g939
((I-1
I0
tp1262
I00
tp1263
tp1264
(g175
((I-1
I2
tp1265
I00
tp1266
tp1267
tp1268
(I1
(I00
tp1269
tp1270
tp1271
(g652
((g1048
((I1
I0
tp1272
I00
tp1273
tp1274
(g1074
((I0
I0
tp1275
I00
tp1276
tp1277
tp1278
(I1
(I00
tp1279
tp1280
tp1281
(g1119
((g1102
((I2
I0
tp1282
I00
tp1283
tp1284
tp1285
(I1
(I00
tp1286
tp1287
tp1288
(g1043
((g1144
((I3
I0
I0
tp1289
I00
tp1290
tp1291
(g877
((I-1
I4
tp1292
I00
tp1293
tp1294
tp1295
(I1
(I00
tp1296
tp1297
tp1298
tp1299
tp1300
sg1232
I0
sS'vector_outs'
p1301
(lp1302
I00
aI00
asS'n_tap_outs'
p1303
I0
sg1235
I0
sg1240
NsS'output_types'
p1304
(lp1305
g915
ag14
(g56
g16
Ntp1306
Rp1307
(dp1308
g60
(I00
I00
tp1309
sg62
g1172
sg64
g68
sg71
I00
sg20
Nsbasg1243
I00
sg1227
I0
sS'shared_arg_offset'
p1310
I3
sg1229
g1230
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p1311
(dp1312
g37
(lp1313
(g893
I1400
g894
S'outs = self(*inputs)'
p1314
tp1315
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1316
tp1317
a(g893
I440
g206
S'[t() for t in self.output_types])'
p1318
tp1319
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1320
tp1321
asbsg55
g1307
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1322
(dp1323
g37
(lp1324
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1325
tp1326
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p1327
tp1328
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1329
tp1330
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1331
tp1332
asbsg211
(lp1333
g259
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1334
(dp1335
g37
(lp1336
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p1337
tp1338
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1339
tp1340
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p1341
tp1342
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1343
tp1344
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1345
(dp1346
g37
(lp1347
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1348
tp1349
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p1350
tp1351
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p1352
tp1353
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1354
tp1355
asbsg211
(lp1356
g252
asg213
g14
(g308
g16
Ntp1357
Rp1358
(dp1359
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p1360
tp1361
Rp1362
tp1363
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1364
(dp1365
bsg55
g14
(g56
g16
Ntp1366
Rp1367
(dp1368
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1369
Rp1370
(dp1371
g32
g14
(g148
g16
Ntp1372
Rp1373
(dp1374
g12
(lp1375
g395
asg34
(itheano.gof.utils
scratchpad
p1376
(dp1377
g37
(lp1378
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1379
tp1380
a(g893
I1563
g894
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p1381
tp1382
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p1383
tp1384
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1385
tp1386
asbsg211
(lp1387
g1370
asg213
g14
(g308
g16
Ntp1388
Rp1389
(dp1390
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p1391
tp1392
Rp1393
tp1394
Rp1395
tp1396
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1397
(dp1398
bsg55
g14
(g56
g16
Ntp1399
Rp1400
(dp1401
g60
(I00
I00
tp1402
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1403
Rp1404
(dp1405
g32
g14
(g148
g16
Ntp1406
Rp1407
(dp1408
g12
(lp1409
g14
(g28
g16
Ntp1410
Rp1411
(dp1412
g32
g14
(g148
g16
Ntp1413
Rp1414
(dp1415
g12
(lp1416
g901
asg34
(itheano.gof.utils
scratchpad
p1417
(dp1418
g37
(lp1419
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1420
tp1421
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p1422
tp1423
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p1424
tp1425
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1426
tp1427
asbsg211
(lp1428
g1411
asg213
g14
(g308
g16
Ntp1429
Rp1430
(dp1431
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p1432
tp1433
Rp1434
Ntp1435
Rp1436
tp1437
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1438
(dp1439
bsg55
g14
(g56
g16
Ntp1440
Rp1441
(dp1442
g60
(I00
I00
tp1443
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1444
(dp1445
g37
(lp1446
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1447
tp1448
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p1449
tp1450
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p1451
tp1452
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1453
tp1454
asbsg211
(lp1455
g1404
asg213
g14
(g308
g16
Ntp1456
Rp1457
(dp1458
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p1459
tp1460
Rp1461
tp1462
Rp1463
tp1464
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1465
(dp1466
bsg55
g14
(g56
g16
Ntp1467
Rp1468
(dp1469
g60
(I00
I00
tp1470
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1471
Rp1472
(dp1473
g32
g14
(g148
g16
Ntp1474
Rp1475
(dp1476
g12
(lp1477
g14
(g28
g16
Ntp1478
Rp1479
(dp1480
g32
g14
(g148
g16
Ntp1481
Rp1482
(dp1483
g12
(lp1484
g14
(g28
g16
Ntp1485
Rp1486
(dp1487
g32
g14
(g148
g16
Ntp1488
Rp1489
(dp1490
g12
(lp1491
g14
(g28
g16
Ntp1492
Rp1493
(dp1494
g32
g14
(g148
g16
Ntp1495
Rp1496
(dp1497
g12
(lp1498
g14
(g28
g16
Ntp1499
Rp1500
(dp1501
g32
g14
(g148
g16
Ntp1502
Rp1503
(dp1504
g12
(lp1505
g14
(g28
g16
Ntp1506
Rp1507
(dp1508
g32
g14
(g148
g16
Ntp1509
Rp1510
(dp1511
g12
(lp1512
g14
(g28
g16
Ntp1513
Rp1514
(dp1515
g32
g14
(g148
g16
Ntp1516
Rp1517
(dp1518
g12
(lp1519
g273
ag395
ag462
ag273
ag155
ag844
ag864
asg34
(itheano.gof.utils
scratchpad
p1520
(dp1521
g37
(lp1522
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p1523
tp1524
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p1525
tp1526
a(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p1527
tp1528
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1529
tp1530
asbsg211
(lp1531
g14
(g28
g16
Ntp1532
Rp1533
(dp1534
g32
g1517
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p1535
(dp1536
g37
(lp1537
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p1538
tp1539
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1540
tp1541
a(g893
I440
g206
S'[t() for t in self.output_types])'
p1542
tp1543
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1544
tp1545
asbsg55
g915
sg20
Nsbag1514
asg213
g921
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p1546
(dp1547
g37
(lp1548
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p1549
tp1550
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1551
tp1552
a(g893
I440
g206
S'[t() for t in self.output_types])'
p1553
tp1554
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1555
tp1556
asbsg55
g1307
sg20
Nsbag100
asg34
(itheano.gof.utils
scratchpad
p1557
(dp1558
g37
(lp1559
(g105
I76
g106
S'self.initTraining()'
p1560
tp1561
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p1562
tp1563
a(g198
I136
S'__sub__'
p1564
S'return theano.tensor.basic.sub(self, other)'
p1565
tp1566
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1567
tp1568
asbsg211
(lp1569
g1507
asg213
g14
(g650
g16
Ntp1570
Rp1571
(dp1572
g654
g655
sg656
g14
(ctheano.scalar.basic
Sub
p1573
g16
Ntp1574
Rp1575
(dp1576
g661
g662
sg229
g230
sg20
S'sub'
p1577
sbsg20
S'Elemwise{sub,no_inplace}'
p1578
sg229
g230
sg665
(dp1579
sg667
(S'subtract'
p1580
I2
I1
tp1581
sg669
(dp1582
sg671
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1583
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1584
(dp1585
g37
(lp1586
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p1587
tp1588
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1589
tp1590
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1591
tp1592
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1593
tp1594
asbsg55
g14
(g56
g16
Ntp1595
Rp1596
(dp1597
g60
(I00
I00
tp1598
sg62
S'float64'
p1599
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1600
Rp1601
(dp1602
g32
g14
(g148
g16
Ntp1603
Rp1604
(dp1605
g12
(lp1606
g14
(g475
g16
Ntp1607
Rp1608
(dp1609
g33
Nsg20
Nsg479
I01
sg480
g164
(g165
(I0
tp1610
g167
tp1611
Rp1612
(I1
(tg65
(S'i1'
p1613
I0
I1
tp1614
Rp1615
(I3
S'|'
p1616
NNNI-1
I-1
I0
tp1617
bI00
S'\x02'
p1618
tp1619
bsg34
(itheano.gof.utils
scratchpad
p1620
(dp1621
g488
Nsbsg55
g14
(g56
g16
Ntp1622
Rp1623
(dp1624
g60
(tsg62
S'int8'
p1625
sg64
g1615
sg71
I00
sg20
Nsbsbasg34
(itheano.gof.utils
scratchpad
p1626
(dp1627
g37
(lp1628
(g198
I166
S'__pow__'
p1629
S'return theano.tensor.basic.pow(self, other)'
p1630
tp1631
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1632
tp1633
a(g205
I533
g206
S'inplace=False)(input))'
p1634
tp1635
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1636
tp1637
asbsg211
(lp1638
g1601
asg213
g14
(g214
g16
Ntp1639
Rp1640
(dp1641
g218
(lp1642
sg220
(lp1643
sg222
(lp1644
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp1645
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1646
(dp1647
bsg55
g14
(g56
g16
Ntp1648
Rp1649
(dp1650
g60
(I01
I01
tp1651
sg62
g1625
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1652
(dp1653
g37
(lp1654
(g105
I76
g106
S'self.initTraining()'
p1655
tp1656
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p1657
tp1658
a(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p1659
tp1660
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1661
tp1662
asbsg211
(lp1663
g1500
asg213
g14
(g650
g16
Ntp1664
Rp1665
(dp1666
g654
g655
sg656
g14
(ctheano.scalar.basic
Pow
p1667
g16
Ntp1668
Rp1669
(dp1670
g661
g662
sg229
g230
sg20
S'pow'
p1671
sbsg20
S'Elemwise{pow,no_inplace}'
p1672
sg229
g230
sg665
(dp1673
sg667
(S'power'
p1674
I2
I1
tp1675
sg669
(dp1676
sg671
S"elementwise power\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1677
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1678
(dp1679
g37
(lp1680
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p1681
tp1682
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1683
tp1684
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1685
tp1686
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1687
tp1688
asbsg55
g14
(g56
g16
Ntp1689
Rp1690
(dp1691
g60
(I00
I00
tp1692
sg62
S'float64'
p1693
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1694
Rp1695
(dp1696
g32
g14
(g148
g16
Ntp1697
Rp1698
(dp1699
g12
(lp1700
g14
(g28
g16
Ntp1701
Rp1702
(dp1703
g32
g14
(g148
g16
Ntp1704
Rp1705
(dp1706
g12
(lp1707
g14
(g28
g16
Ntp1708
Rp1709
(dp1710
g32
g14
(g148
g16
Ntp1711
Rp1712
(dp1713
g12
(lp1714
g1500
asg34
(itheano.gof.utils
scratchpad
p1715
(dp1716
g37
(lp1717
(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p1718
tp1719
a(g198
I452
S'sum'
p1720
S'acc_dtype=acc_dtype)'
p1721
tp1722
a(g47
I2670
g1720
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p1723
tp1724
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1725
tp1726
asbsg211
(lp1727
g1709
asg213
g14
(ctheano.tensor.elemwise
Sum
p1728
g16
Ntp1729
Rp1730
(dp1731
S'acc_dtype'
p1732
g1693
sg62
g1693
sg229
g230
sg656
g659
sg571
Nsbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1733
(dp1734
g37
(lp1735
(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1736
tp1737
a(g205
I1797
g206
S'return CAReduce.make_node(op, input)'
p1738
tp1739
a(g205
I1299
g206
S'broadcastable=broadcastable)()'
p1740
tp1741
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1742
tp1743
asbsg55
g14
(g56
g16
Ntp1744
Rp1745
(dp1746
g60
(tsg62
g1693
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g475
g16
Ntp1747
Rp1748
(dp1749
g33
Nsg20
Nsg479
I01
sg480
g164
(g165
(I0
tp1750
g167
tp1751
Rp1752
(I1
(tg68
I00
S'\x00\x00\x00\x00\x00\x00\xf0?'
p1753
tp1754
bsg34
(itheano.gof.utils
scratchpad
p1755
(dp1756
g488
Nsbsg55
g14
(g56
g16
Ntp1757
Rp1758
(dp1759
g60
(tsg62
S'float64'
p1760
sg64
g68
sg71
I00
sg20
Nsbsbasg34
(itheano.gof.utils
scratchpad
p1761
(dp1762
g37
(lp1763
(g886
I450
g894
S'g_cost = _float_ones_like(cost)'
p1764
tp1765
a(g886
I1124
S'_float_ones_like'
p1766
S'rval = tensor.ones_like(x)'
p1767
tp1768
a(g47
I2070
S'ones_like'
p1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p1770
tp1771
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1772
tp1773
asbsg211
(lp1774
g1702
asg213
g14
(g650
g16
Ntp1775
Rp1776
(dp1777
g654
g655
sg656
g14
(ctheano.scalar.basic
Second
p1778
g16
Ntp1779
Rp1780
(dp1781
g661
g14
(ctheano.scalar.basic
transfer_type
p1782
g16
Ntp1783
Rp1784
(dp1785
S'transfer'
p1786
(I1
tp1787
sbsg229
g230
sg20
S'second'
p1788
sbsg20
S'Elemwise{second,no_inplace}'
p1789
sg229
g230
sg665
(dp1790
sg667
Nsg669
(dp1791
sg671
S"Create a matrix by filling the shape of a with b\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p1792
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1793
(dp1794
g37
(lp1795
(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p1796
tp1797
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1798
tp1799
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1800
tp1801
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1802
tp1803
asbsg55
g14
(g56
g16
Ntp1804
Rp1805
(dp1806
g60
(tsg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1807
(dp1808
g37
(lp1809
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p1810
tp1811
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1812
tp1813
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p1814
tp1815
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1816
tp1817
asbsg211
(lp1818
g1695
asg213
g14
(g214
g16
Ntp1819
Rp1820
(dp1821
g218
(lp1822
sg220
(lp1823
sg222
(lp1824
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp1825
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1826
(dp1827
bsg55
g14
(g56
g16
Ntp1828
Rp1829
(dp1830
g60
(I01
I01
tp1831
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1832
(dp1833
g37
(lp1834
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p1835
tp1836
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p1837
tp1838
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p1839
tp1840
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1841
tp1842
asbsg211
(lp1843
g1493
asg213
g14
(g650
g16
Ntp1844
Rp1845
(dp1846
g20
Nsg656
g1780
sg665
(dp1847
sg667
Nsg669
(dp1848
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1849
(dp1850
g37
(lp1851
(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p1852
tp1853
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1854
tp1855
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1856
tp1857
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1858
tp1859
asbsg55
g14
(g56
g16
Ntp1860
Rp1861
(dp1862
g60
(I00
I00
tp1863
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag1601
asg34
(itheano.gof.utils
scratchpad
p1864
(dp1865
g37
(lp1866
(g205
I763
S'_bgrad'
p1867
S'ret.append(transform(scalar_igrad))'
p1868
tp1869
a(g205
I755
S'transform'
p1870
S'*[transform(ipt) for ipt in node.inputs])'
p1871
tp1872
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1873
tp1874
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1875
tp1876
asbsg211
(lp1877
g1486
asg213
g14
(g650
g16
Ntp1878
Rp1879
(dp1880
g20
Nsg656
g14
(ctheano.scalar.basic
Mul
p1881
g16
Ntp1882
Rp1883
(dp1884
g661
g662
sg229
g230
sg20
S'mul'
p1885
sbsg665
(dp1886
sg667
Nsg669
(dp1887
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1888
(dp1889
g37
(lp1890
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1891
tp1892
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1893
tp1894
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1895
tp1896
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1897
tp1898
asbsg55
g14
(g56
g16
Ntp1899
Rp1900
(dp1901
g60
(I00
I00
tp1902
sg62
S'float64'
p1903
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp1904
Rp1905
(dp1906
g32
g14
(g148
g16
Ntp1907
Rp1908
(dp1909
g12
(lp1910
g1507
ag14
(g28
g16
Ntp1911
Rp1912
(dp1913
g32
g14
(g148
g16
Ntp1914
Rp1915
(dp1916
g12
(lp1917
g1601
ag14
(g28
g16
Ntp1918
Rp1919
(dp1920
g32
g14
(g148
g16
Ntp1921
Rp1922
(dp1923
g12
(lp1924
g14
(g475
g16
Ntp1925
Rp1926
(dp1927
g33
Nsg20
Nsg479
I01
sg480
g164
(g165
(I0
tp1928
g167
tp1929
Rp1930
(I1
(tg1615
I00
S'\x01'
p1931
tp1932
bsg34
(itheano.gof.utils
scratchpad
p1933
(dp1934
g488
Nsbsg55
g14
(g56
g16
Ntp1935
Rp1936
(dp1937
g60
(tsg62
S'int8'
p1938
sg64
g1615
sg71
I00
sg20
Nsbsbasg34
(itheano.gof.utils
scratchpad
p1939
(dp1940
g37
(lp1941
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1942
tp1943
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1944
tp1945
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p1946
tp1947
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1948
tp1949
asbsg211
(lp1950
g1919
asg213
g14
(g214
g16
Ntp1951
Rp1952
(dp1953
g218
(lp1954
sg220
(lp1955
sg222
(lp1956
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp1957
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1958
(dp1959
bsg55
g14
(g56
g16
Ntp1960
Rp1961
(dp1962
g60
(I01
I01
tp1963
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1964
(dp1965
g37
(lp1966
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1967
tp1968
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1969
tp1970
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1971
tp1972
a(g202
I401
g52
S'self.add_tag_trace(node)'
p1973
tp1974
asbsg211
(lp1975
g1912
asg213
g14
(g650
g16
Ntp1976
Rp1977
(dp1978
g20
Nsg656
g1575
sg665
(dp1979
sg667
Nsg669
(dp1980
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p1981
(dp1982
g37
(lp1983
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p1984
tp1985
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p1986
tp1987
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p1988
tp1989
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p1990
tp1991
asbsg55
g14
(g56
g16
Ntp1992
Rp1993
(dp1994
g60
(I01
I01
tp1995
sg62
S'int8'
p1996
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p1997
(dp1998
g37
(lp1999
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p2000
tp2001
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p2002
tp2003
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p2004
tp2005
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2006
tp2007
asbsg211
(lp2008
g1905
asg213
g14
(g650
g16
Ntp2009
Rp2010
(dp2011
g20
Nsg656
g1669
sg665
(dp2012
sg667
Nsg669
(dp2013
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2014
(dp2015
g37
(lp2016
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p2017
tp2018
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2019
tp2020
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2021
tp2022
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2023
tp2024
asbsg55
g14
(g56
g16
Ntp2025
Rp2026
(dp2027
g60
(I00
I00
tp2028
sg62
S'float64'
p2029
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2030
(dp2031
g37
(lp2032
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p2033
tp2034
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p2035
tp2036
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p2037
tp2038
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2039
tp2040
asbsg211
(lp2041
g1479
asg213
g14
(g650
g16
Ntp2042
Rp2043
(dp2044
g20
Nsg656
g1883
sg665
(dp2045
sg667
Nsg669
(dp2046
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2047
(dp2048
g37
(lp2049
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p2050
tp2051
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2052
tp2053
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2054
tp2055
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2056
tp2057
asbsg55
g14
(g56
g16
Ntp2058
Rp2059
(dp2060
g60
(I00
I00
tp2061
sg62
S'float64'
p2062
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2063
(dp2064
g37
(lp2065
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2066
tp2067
a(g893
I1582
g894
S'outer_inp_seqs.append(x[::-1])'
p2068
tp2069
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2070
tp2071
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2072
tp2073
asbsg211
(lp2074
g1472
asg213
g14
(g308
g16
Ntp2075
Rp2076
(dp2077
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2078
tp2079
Rp2080
tp2081
Rp2082
tp2083
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2084
(dp2085
bsg55
g14
(g56
g16
Ntp2086
Rp2087
(dp2088
g60
(I00
I00
tp2089
sg62
g2062
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2090
Rp2091
(dp2092
g32
g14
(g148
g16
Ntp2093
Rp2094
(dp2095
g12
(lp2096
g14
(g28
g16
Ntp2097
Rp2098
(dp2099
g32
g14
(g148
g16
Ntp2100
Rp2101
(dp2102
g12
(lp2103
g901
asg34
(itheano.gof.utils
scratchpad
p2104
(dp2105
g37
(lp2106
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2107
tp2108
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p2109
tp2110
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2111
tp2112
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2113
tp2114
asbsg211
(lp2115
g2098
asg213
g14
(g308
g16
Ntp2116
Rp2117
(dp2118
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2119
tp2120
Rp2121
tp2122
Rp2123
tp2124
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2125
(dp2126
bsg55
g14
(g56
g16
Ntp2127
Rp2128
(dp2129
g60
(I00
I00
tp2130
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2131
(dp2132
g37
(lp2133
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2134
tp2135
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p2136
tp2137
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2138
tp2139
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2140
tp2141
asbsg211
(lp2142
g2091
asg213
g14
(g308
g16
Ntp2143
Rp2144
(dp2145
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2146
tp2147
Rp2148
Ntp2149
Rp2150
tp2151
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2152
(dp2153
bsg55
g14
(g56
g16
Ntp2154
Rp2155
(dp2156
g60
(I00
I00
tp2157
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2158
Rp2159
(dp2160
g32
g14
(g148
g16
Ntp2161
Rp2162
(dp2163
g12
(lp2164
g266
asg34
(itheano.gof.utils
scratchpad
p2165
(dp2166
g37
(lp2167
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2168
tp2169
a(g893
I1608
g894
S'outer_inp_seqs += [x[::-1] for x in self.outer_nitsot_outs(outs)]'
p2170
tp2171
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2172
tp2173
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2174
tp2175
asbsg211
(lp2176
g2159
asg213
g14
(g308
g16
Ntp2177
Rp2178
(dp2179
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p2180
tp2181
Rp2182
tp2183
Rp2184
tp2185
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2186
(dp2187
bsg55
g14
(g56
g16
Ntp2188
Rp2189
(dp2190
g60
(I00
I00
tp2191
sg62
g1172
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2192
Rp2193
(dp2194
g32
g14
(g148
g16
Ntp2195
Rp2196
(dp2197
g12
(lp2198
g477
ag14
(g28
g16
Ntp2199
Rp2200
(dp2201
g32
g14
(g148
g16
Ntp2202
Rp2203
(dp2204
g12
(lp2205
g14
(g28
g16
Ntp2206
Rp2207
(dp2208
g32
g14
(g148
g16
Ntp2209
Rp2210
(dp2211
g12
(lp2212
g901
asg34
(itheano.gof.utils
scratchpad
p2213
(dp2214
g37
(lp2215
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2216
tp2217
a(g893
I1710
g894
S'tensor.zeros(outs[idx + offset].shape,'
p2218
tp2219
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2220
tp2221
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2222
tp2223
asbsg211
(lp2224
g2207
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2225
(dp2226
g37
(lp2227
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2228
tp2229
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2230
tp2231
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2232
tp2233
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2234
tp2235
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2236
(dp2237
g37
(lp2238
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2239
tp2240
a(g198
I419
S'__iter__'
p2241
S'yield self[i]'
p2242
tp2243
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2244
tp2245
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2246
tp2247
asbsg211
(lp2248
g2200
asg213
g14
(g308
g16
Ntp2249
Rp2250
(dp2251
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p2252
tp2253
Rp2254
tp2255
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2256
(dp2257
bsg55
g14
(g56
g16
Ntp2258
Rp2259
(dp2260
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2261
Rp2262
(dp2263
g32
g14
(g148
g16
Ntp2264
Rp2265
(dp2266
g12
(lp2267
g2207
asg34
(itheano.gof.utils
scratchpad
p2268
(dp2269
g37
(lp2270
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2271
tp2272
a(g198
I419
g2241
S'yield self[i]'
p2273
tp2274
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2275
tp2276
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2277
tp2278
asbsg211
(lp2279
g2262
asg213
g14
(g308
g16
Ntp2280
Rp2281
(dp2282
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2283
tp2284
Rp2285
tp2286
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2287
(dp2288
bsg55
g14
(g56
g16
Ntp2289
Rp2290
(dp2291
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2292
(dp2293
g37
(lp2294
(g893
I1711
g894
S'dtype=dC_dinps_t[ins_pos].dtype))'
p2295
tp2296
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2297
tp2298
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2299
tp2300
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2301
tp2302
asbsg211
(lp2303
g2193
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2304
(dp2305
g37
(lp2306
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2307
tp2308
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2309
tp2310
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p2311
tp2312
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2313
tp2314
asbsg55
g14
(g56
g16
Ntp2315
Rp2316
(dp2317
g60
(I00
I00
tp2318
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2319
Rp2320
(dp2321
g32
g14
(g148
g16
Ntp2322
Rp2323
(dp2324
g12
(lp2325
g477
ag14
(g28
g16
Ntp2326
Rp2327
(dp2328
g32
g14
(g148
g16
Ntp2329
Rp2330
(dp2331
g12
(lp2332
g252
ag1926
asg34
(itheano.gof.utils
scratchpad
p2333
(dp2334
g37
(lp2335
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2336
tp2337
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2338
tp2339
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2340
tp2341
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2342
tp2343
asbsg211
(lp2344
g2327
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2345
(dp2346
g37
(lp2347
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2348
tp2349
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2350
tp2351
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2352
tp2353
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2354
tp2355
asbsg55
g14
(g56
g16
Ntp2356
Rp2357
(dp2358
g60
(tsg62
S'int64'
p2359
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2360
Rp2361
(dp2362
g32
g14
(g148
g16
Ntp2363
Rp2364
(dp2365
g12
(lp2366
g14
(g28
g16
Ntp2367
Rp2368
(dp2369
g32
g14
(g148
g16
Ntp2370
Rp2371
(dp2372
g12
(lp2373
g155
asg34
(itheano.gof.utils
scratchpad
p2374
(dp2375
g37
(lp2376
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2377
tp2378
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2379
tp2380
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2381
tp2382
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2383
tp2384
asbsg211
(lp2385
g2368
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2386
(dp2387
g37
(lp2388
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2389
tp2390
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2391
tp2392
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2393
tp2394
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2395
tp2396
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2397
(dp2398
g37
(lp2399
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2400
tp2401
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2402
tp2403
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2404
tp2405
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2406
tp2407
asbsg211
(lp2408
g2361
asg213
g14
(g308
g16
Ntp2409
Rp2410
(dp2411
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p2412
tp2413
Rp2414
tp2415
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2416
(dp2417
bsg55
g14
(g56
g16
Ntp2418
Rp2419
(dp2420
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2421
Rp2422
(dp2423
g32
g14
(g148
g16
Ntp2424
Rp2425
(dp2426
g12
(lp2427
g14
(g28
g16
Ntp2428
Rp2429
(dp2430
g32
g14
(g148
g16
Ntp2431
Rp2432
(dp2433
g12
(lp2434
g155
asg34
(itheano.gof.utils
scratchpad
p2435
(dp2436
g37
(lp2437
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2438
tp2439
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2440
tp2441
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2442
tp2443
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2444
tp2445
asbsg211
(lp2446
g2429
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2447
(dp2448
g37
(lp2449
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2450
tp2451
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2452
tp2453
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2454
tp2455
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2456
tp2457
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2458
(dp2459
g37
(lp2460
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2461
tp2462
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2463
tp2464
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2465
tp2466
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2467
tp2468
asbsg211
(lp2469
g2422
asg213
g14
(g308
g16
Ntp2470
Rp2471
(dp2472
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2473
tp2474
Rp2475
tp2476
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2477
(dp2478
bsg55
g14
(g56
g16
Ntp2479
Rp2480
(dp2481
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2482
(dp2483
g37
(lp2484
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2485
tp2486
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2487
tp2488
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2489
tp2490
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2491
tp2492
asbsg211
(lp2493
g2320
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2494
(dp2495
g37
(lp2496
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2497
tp2498
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2499
tp2500
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p2501
tp2502
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2503
tp2504
asbsg55
g14
(g56
g16
Ntp2505
Rp2506
(dp2507
g60
(I00
I00
I00
tp2508
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2509
Rp2510
(dp2511
g32
g14
(g148
g16
Ntp2512
Rp2513
(dp2514
g12
(lp2515
g477
ag14
(g28
g16
Ntp2516
Rp2517
(dp2518
g32
g14
(g148
g16
Ntp2519
Rp2520
(dp2521
g12
(lp2522
g252
ag1926
asg34
(itheano.gof.utils
scratchpad
p2523
(dp2524
g37
(lp2525
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2526
tp2527
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2528
tp2529
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2530
tp2531
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2532
tp2533
asbsg211
(lp2534
g2517
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2535
(dp2536
g37
(lp2537
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2538
tp2539
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2540
tp2541
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2542
tp2543
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2544
tp2545
asbsg55
g14
(g56
g16
Ntp2546
Rp2547
(dp2548
g60
(tsg62
S'int64'
p2549
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2550
Rp2551
(dp2552
g32
g14
(g148
g16
Ntp2553
Rp2554
(dp2555
g12
(lp2556
g14
(g28
g16
Ntp2557
Rp2558
(dp2559
g32
g14
(g148
g16
Ntp2560
Rp2561
(dp2562
g12
(lp2563
g844
asg34
(itheano.gof.utils
scratchpad
p2564
(dp2565
g37
(lp2566
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2567
tp2568
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2569
tp2570
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2571
tp2572
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2573
tp2574
asbsg211
(lp2575
g2558
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2576
(dp2577
g37
(lp2578
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2579
tp2580
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2581
tp2582
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2583
tp2584
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2585
tp2586
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2587
(dp2588
g37
(lp2589
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2590
tp2591
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2592
tp2593
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2594
tp2595
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2596
tp2597
asbsg211
(lp2598
g2551
asg213
g14
(g308
g16
Ntp2599
Rp2600
(dp2601
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p2602
tp2603
Rp2604
tp2605
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2606
(dp2607
bsg55
g14
(g56
g16
Ntp2608
Rp2609
(dp2610
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2611
Rp2612
(dp2613
g32
g14
(g148
g16
Ntp2614
Rp2615
(dp2616
g12
(lp2617
g14
(g28
g16
Ntp2618
Rp2619
(dp2620
g32
g14
(g148
g16
Ntp2621
Rp2622
(dp2623
g12
(lp2624
g844
asg34
(itheano.gof.utils
scratchpad
p2625
(dp2626
g37
(lp2627
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2628
tp2629
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2630
tp2631
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2632
tp2633
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2634
tp2635
asbsg211
(lp2636
g2619
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2637
(dp2638
g37
(lp2639
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2640
tp2641
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2642
tp2643
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2644
tp2645
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2646
tp2647
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2648
(dp2649
g37
(lp2650
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2651
tp2652
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2653
tp2654
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2655
tp2656
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2657
tp2658
asbsg211
(lp2659
g2612
asg213
g14
(g308
g16
Ntp2660
Rp2661
(dp2662
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2663
tp2664
Rp2665
tp2666
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2667
(dp2668
bsg55
g14
(g56
g16
Ntp2669
Rp2670
(dp2671
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2672
(dp2673
g37
(lp2674
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2675
tp2676
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2677
tp2678
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2679
tp2680
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2681
tp2682
asbsg211
(lp2683
g2510
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2684
(dp2685
g37
(lp2686
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2687
tp2688
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2689
tp2690
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p2691
tp2692
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2693
tp2694
asbsg55
g14
(g56
g16
Ntp2695
Rp2696
(dp2697
g60
(I00
I00
I00
tp2698
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2699
Rp2700
(dp2701
g32
g14
(g148
g16
Ntp2702
Rp2703
(dp2704
g12
(lp2705
g477
ag14
(g28
g16
Ntp2706
Rp2707
(dp2708
g32
g14
(g148
g16
Ntp2709
Rp2710
(dp2711
g12
(lp2712
g252
ag1926
asg34
(itheano.gof.utils
scratchpad
p2713
(dp2714
g37
(lp2715
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2716
tp2717
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2718
tp2719
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2720
tp2721
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2722
tp2723
asbsg211
(lp2724
g2707
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2725
(dp2726
g37
(lp2727
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p2728
tp2729
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2730
tp2731
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p2732
tp2733
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2734
tp2735
asbsg55
g14
(g56
g16
Ntp2736
Rp2737
(dp2738
g60
(tsg62
S'int64'
p2739
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2740
Rp2741
(dp2742
g32
g14
(g148
g16
Ntp2743
Rp2744
(dp2745
g12
(lp2746
g14
(g28
g16
Ntp2747
Rp2748
(dp2749
g32
g14
(g148
g16
Ntp2750
Rp2751
(dp2752
g12
(lp2753
g864
asg34
(itheano.gof.utils
scratchpad
p2754
(dp2755
g37
(lp2756
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2757
tp2758
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2759
tp2760
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2761
tp2762
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2763
tp2764
asbsg211
(lp2765
g2748
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2766
(dp2767
g37
(lp2768
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2769
tp2770
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2771
tp2772
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2773
tp2774
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2775
tp2776
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2777
(dp2778
g37
(lp2779
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2780
tp2781
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2782
tp2783
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2784
tp2785
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2786
tp2787
asbsg211
(lp2788
g2741
asg213
g14
(g308
g16
Ntp2789
Rp2790
(dp2791
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p2792
tp2793
Rp2794
tp2795
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2796
(dp2797
bsg55
g14
(g56
g16
Ntp2798
Rp2799
(dp2800
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2801
Rp2802
(dp2803
g32
g14
(g148
g16
Ntp2804
Rp2805
(dp2806
g12
(lp2807
g14
(g28
g16
Ntp2808
Rp2809
(dp2810
g32
g14
(g148
g16
Ntp2811
Rp2812
(dp2813
g12
(lp2814
g864
asg34
(itheano.gof.utils
scratchpad
p2815
(dp2816
g37
(lp2817
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2818
tp2819
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2820
tp2821
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2822
tp2823
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2824
tp2825
asbsg211
(lp2826
g2809
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2827
(dp2828
g37
(lp2829
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p2830
tp2831
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2832
tp2833
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p2834
tp2835
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2836
tp2837
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2838
(dp2839
g37
(lp2840
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2841
tp2842
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2843
tp2844
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p2845
tp2846
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2847
tp2848
asbsg211
(lp2849
g2802
asg213
g14
(g308
g16
Ntp2850
Rp2851
(dp2852
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p2853
tp2854
Rp2855
tp2856
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2857
(dp2858
bsg55
g14
(g56
g16
Ntp2859
Rp2860
(dp2861
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p2862
(dp2863
g37
(lp2864
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p2865
tp2866
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p2867
tp2868
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2869
tp2870
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2871
tp2872
asbsg211
(lp2873
g2700
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p2874
(dp2875
g37
(lp2876
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p2877
tp2878
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2879
tp2880
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p2881
tp2882
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2883
tp2884
asbsg55
g14
(g56
g16
Ntp2885
Rp2886
(dp2887
g60
(I00
I00
I00
tp2888
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag273
ag155
ag844
ag864
asg34
(itheano.gof.utils
scratchpad
p2889
(dp2890
g37
(lp2891
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p2892
tp2893
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p2894
tp2895
a(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p2896
tp2897
a(g202
I401
g52
S'self.add_tag_trace(node)'
p2898
tp2899
asbsg211
(lp2900
g14
(g28
g16
Ntp2901
Rp2902
(dp2903
g32
g248
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p2904
(dp2905
g37
(lp2906
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p2907
tp2908
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2909
tp2910
a(g893
I440
g206
S'[t() for t in self.output_types])'
p2911
tp2912
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2913
tp2914
asbsg55
g14
(g56
g16
Ntp2915
Rp2916
(dp2917
g60
(I00
I00
tp2918
sg62
S'float64'
p2919
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag245
ag14
(g28
g16
Ntp2920
Rp2921
(dp2922
g32
g248
sg33
I2
sg34
(itheano.gof.utils
scratchpad
p2923
(dp2924
g37
(lp2925
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p2926
tp2927
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2928
tp2929
a(g893
I440
g206
S'[t() for t in self.output_types])'
p2930
tp2931
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2932
tp2933
asbsg55
g14
(g56
g16
Ntp2934
Rp2935
(dp2936
g60
(I00
I00
I00
tp2937
sg62
S'float64'
p2938
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2939
Rp2940
(dp2941
g32
g248
sg33
I3
sg34
(itheano.gof.utils
scratchpad
p2942
(dp2943
g37
(lp2944
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p2945
tp2946
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2947
tp2948
a(g893
I440
g206
S'[t() for t in self.output_types])'
p2949
tp2950
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2951
tp2952
asbsg55
g14
(g56
g16
Ntp2953
Rp2954
(dp2955
g60
(I00
I00
I00
tp2956
sg62
S'float64'
p2957
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp2958
Rp2959
(dp2960
g32
g248
sg33
I4
sg34
(itheano.gof.utils
scratchpad
p2961
(dp2962
g37
(lp2963
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p2964
tp2965
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p2966
tp2967
a(g893
I440
g206
S'[t() for t in self.output_types])'
p2968
tp2969
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2970
tp2971
asbsg55
g14
(g56
g16
Ntp2972
Rp2973
(dp2974
g60
(I00
I00
tp2975
sg62
S'float64'
p2976
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg213
g14
(g919
g16
Ntp2977
Rp2978
(dp2979
g8
I00
sg12
(lp2980
g14
(g28
g16
Ntp2981
Rp2982
(dp2983
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p2984
(dp2985
g37
(lp2986
(g893
I1420
g894
S'self.outputs)'
p2987
tp2988
a(g593
I793
S'reconstruct_graph'
p2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p2990
tp2991
a(g593
I75
g952
S'nw_x = x.type()'
p2992
tp2993
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p2994
tp2995
asbsg55
g939
sg20
Nsbag14
(g28
g16
Ntp2996
Rp2997
(dp2998
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p2999
(dp3000
g37
(lp3001
(g893
I1420
g894
S'self.outputs)'
p3002
tp3003
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p3004
tp3005
a(g593
I75
g952
S'nw_x = x.type()'
p3006
tp3007
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3008
tp3009
asbsg55
g58
sg20
Nsbag14
(g28
g16
Ntp3010
Rp3011
(dp3012
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3013
(dp3014
g37
(lp3015
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3016
tp3017
a(g893
I1525
g894
S'dC_dXt = safe_new(dC_douts[idx][0])'
p3018
tp3019
a(g593
I75
g952
S'nw_x = x.type()'
p3020
tp3021
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3022
tp3023
asbsg55
g14
(g56
g16
Ntp3024
Rp3025
(dp3026
g60
(I00
tp3027
sg62
g2062
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3028
Rp3029
(dp3030
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3031
(dp3032
g37
(lp3033
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3034
tp3035
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p3036
tp3037
a(g593
I75
g952
S'nw_x = x.type()'
p3038
tp3039
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3040
tp3041
asbsg55
g1144
sg20
Nsbag14
(g28
g16
Ntp3042
Rp3043
(dp3044
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3045
(dp3046
g37
(lp3047
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3048
tp3049
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p3050
tp3051
a(g593
I75
g952
S'nw_x = x.type()'
p3052
tp3053
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3054
tp3055
asbsg55
g1169
sg20
Nsbag14
(g28
g16
Ntp3056
Rp3057
(dp3058
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3059
(dp3060
g37
(lp3061
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3062
tp3063
a(g893
I1521
g894
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p3064
tp3065
a(g593
I75
g952
S'nw_x = x.type()'
p3066
tp3067
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3068
tp3069
asbsg55
g1144
sg20
Nsbag14
(g28
g16
Ntp3070
Rp3071
(dp3072
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3073
(dp3074
g37
(lp3075
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3076
tp3077
a(g893
I1553
g894
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p3078
tp3079
a(g593
I75
g952
S'nw_x = x.type()'
p3080
tp3081
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3082
tp3083
asbsg55
g1144
sg20
Nsbag14
(g28
g16
Ntp3084
Rp3085
(dp3086
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3087
(dp3088
g37
(lp3089
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3090
tp3091
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p3092
tp3093
a(g593
I75
g952
S'nw_x = x.type()'
p3094
tp3095
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3096
tp3097
asbsg55
g14
(g56
g16
Ntp3098
Rp3099
(dp3100
g60
(I00
I00
tp3101
sg62
S'float64'
p3102
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3103
Rp3104
(dp3105
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3106
(dp3107
g37
(lp3108
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3109
tp3110
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p3111
tp3112
a(g593
I75
g952
S'nw_x = x.type()'
p3113
tp3114
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3115
tp3116
asbsg55
g14
(g56
g16
Ntp3117
Rp3118
(dp3119
g60
(I00
I00
tp3120
sg62
S'float64'
p3121
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3122
Rp3123
(dp3124
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3125
(dp3126
g37
(lp3127
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3128
tp3129
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p3130
tp3131
a(g593
I75
g952
S'nw_x = x.type()'
p3132
tp3133
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3134
tp3135
asbsg55
g14
(g56
g16
Ntp3136
Rp3137
(dp3138
g60
(I00
I00
tp3139
sg62
S'float64'
p3140
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3141
Rp3142
(dp3143
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3144
(dp3145
g37
(lp3146
(g893
I1420
g894
S'self.outputs)'
p3147
tp3148
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p3149
tp3150
a(g593
I75
g952
S'nw_x = x.type()'
p3151
tp3152
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3153
tp3154
asbsg55
g175
sg20
Nsbag14
(g28
g16
Ntp3155
Rp3156
(dp3157
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3158
(dp3159
g37
(lp3160
(g893
I1420
g894
S'self.outputs)'
p3161
tp3162
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p3163
tp3164
a(g593
I75
g952
S'nw_x = x.type()'
p3165
tp3166
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3167
tp3168
asbsg55
g857
sg20
Nsbag14
(g28
g16
Ntp3169
Rp3170
(dp3171
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p3172
(dp3173
g37
(lp3174
(g893
I1420
g894
S'self.outputs)'
p3175
tp3176
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p3177
tp3178
a(g593
I75
g952
S'nw_x = x.type()'
p3179
tp3180
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3181
tp3182
asbsg55
g877
sg20
Nsbasg999
(lp3183
(lp3184
I0
aI1
aa(lp3185
I-1
aa(lp3186
I-1
aa(lp3187
I-1
aasg1003
I-1282353987
sg211
(lp3188
g14
(g28
g16
Ntp3189
Rp3190
(dp3191
g32
g14
(g148
g16
Ntp3192
Rp3193
(dp3194
g12
(lp3195
g14
(g28
g16
Ntp3196
Rp3197
(dp3198
g32
g14
(g148
g16
Ntp3199
Rp3200
(dp3201
g12
(lp3202
g14
(g28
g16
Ntp3203
Rp3204
(dp3205
g32
g14
(g148
g16
Ntp3206
Rp3207
(dp3208
g12
(lp3209
g14
(g28
g16
Ntp3210
Rp3211
(dp3212
g32
g14
(g148
g16
Ntp3213
Rp3214
(dp3215
g12
(lp3216
g3057
ag14
(g28
g16
Ntp3217
Rp3218
(dp3219
g32
g14
(g148
g16
Ntp3220
Rp3221
(dp3222
g12
(lp3223
g14
(g28
g16
Ntp3224
Rp3225
(dp3226
g32
g14
(g148
g16
Ntp3227
Rp3228
(dp3229
g12
(lp3230
g1926
asg34
(itheano.gof.utils
scratchpad
p3231
(dp3232
g37
(lp3233
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3234
tp3235
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3236
tp3237
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p3238
tp3239
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3240
tp3241
asbsg211
(lp3242
g3225
asg213
g14
(g214
g16
Ntp3243
Rp3244
(dp3245
g218
(lp3246
sg220
(lp3247
sg222
(lp3248
I0
asg224
(tsg225
I00
sg226
(g227
tp3249
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3250
(dp3251
bsg55
g14
(g56
g16
Ntp3252
Rp3253
(dp3254
g60
(I01
tp3255
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3256
Rp3257
(dp3258
g32
g14
(g148
g16
Ntp3259
Rp3260
(dp3261
g12
(lp3262
g3029
asg34
(itheano.gof.utils
scratchpad
p3263
(dp3264
g37
(lp3265
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3266
tp3267
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3268
tp3269
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3270
tp3271
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3272
tp3273
asbsg211
(lp3274
g3257
asg213
g14
(g650
g16
Ntp3275
Rp3276
(dp3277
g20
Nsg656
g14
(ctheano.scalar.basic
Sqr
p3278
g16
Ntp3279
Rp3280
(dp3281
g661
ctheano.scalar.basic
same_out
p3282
sg229
g230
sg20
S'sqr'
p3283
sbsg665
(dp3284
sg667
Nsg669
(dp3285
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3286
(dp3287
g37
(lp3288
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3289
tp3290
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3291
tp3292
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3293
tp3294
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3295
tp3296
asbsg55
g14
(g56
g16
Ntp3297
Rp3298
(dp3299
g60
(I00
tp3300
sg62
S'float64'
p3301
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3302
(dp3303
g37
(lp3304
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p3305
tp3306
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3307
tp3308
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3309
tp3310
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3311
tp3312
asbsg211
(lp3313
g3218
asg213
g14
(g650
g16
Ntp3314
Rp3315
(dp3316
g20
Nsg656
g1575
sg665
(dp3317
sg667
Nsg669
(dp3318
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3319
(dp3320
g37
(lp3321
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3322
tp3323
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3324
tp3325
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3326
tp3327
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3328
tp3329
asbsg55
g14
(g56
g16
Ntp3330
Rp3331
(dp3332
g60
(I00
tp3333
sg62
S'float64'
p3334
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3335
(dp3336
g37
(lp3337
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p3338
tp3339
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p3340
tp3341
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3342
tp3343
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3344
tp3345
asbsg211
(lp3346
g3211
asg213
g14
(g650
g16
Ntp3347
Rp3348
(dp3349
g20
Nsg656
g1883
sg665
(dp3350
sg667
Nsg669
(dp3351
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3352
(dp3353
g37
(lp3354
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3355
tp3356
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3357
tp3358
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3359
tp3360
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3361
tp3362
asbsg55
g14
(g56
g16
Ntp3363
Rp3364
(dp3365
g60
(I00
tp3366
sg62
S'float64'
p3367
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3368
Rp3369
(dp3370
g32
g14
(g148
g16
Ntp3371
Rp3372
(dp3373
g12
(lp3374
g3156
asg34
(itheano.gof.utils
scratchpad
p3375
(dp3376
g37
(lp3377
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3378
tp3379
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3380
tp3381
a(g47
I3084
S'transpose'
p3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3383
tp3384
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3385
tp3386
asbsg211
(lp3387
g3369
asg213
g14
(g214
g16
Ntp3388
Rp3389
(dp3390
g218
(lp3391
sg220
(lp3392
I1
aI0
asg222
(lp3393
sg224
g859
sg225
I00
sg226
(I1
I0
tp3394
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3395
(dp3396
bsg55
g14
(g56
g16
Ntp3397
Rp3398
(dp3399
g60
(I00
I00
tp3400
sg62
g860
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3401
(dp3402
g37
(lp3403
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3404
tp3405
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3406
tp3407
a(g47
I4732
g1035
S'return _dot(a, b)'
p3408
tp3409
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3410
tp3411
asbsg211
(lp3412
g3204
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3413
(dp3414
bsg55
g14
(g56
g16
Ntp3415
Rp3416
(dp3417
g60
(I00
tp3418
sg62
S'float64'
p3419
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3420
Rp3421
(dp3422
g32
g14
(g148
g16
Ntp3423
Rp3424
(dp3425
g12
(lp3426
g14
(g28
g16
Ntp3427
Rp3428
(dp3429
g32
g14
(g148
g16
Ntp3430
Rp3431
(dp3432
g12
(lp3433
g14
(g28
g16
Ntp3434
Rp3435
(dp3436
g32
g14
(g148
g16
Ntp3437
Rp3438
(dp3439
g12
(lp3440
g3011
ag14
(g28
g16
Ntp3441
Rp3442
(dp3443
g32
g14
(g148
g16
Ntp3444
Rp3445
(dp3446
g12
(lp3447
g3170
asg34
(itheano.gof.utils
scratchpad
p3448
(dp3449
g37
(lp3450
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3451
tp3452
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3453
tp3454
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3455
tp3456
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3457
tp3458
asbsg211
(lp3459
g3442
asg213
g14
(g214
g16
Ntp3460
Rp3461
(dp3462
g218
(lp3463
sg220
(lp3464
I1
aI0
asg222
(lp3465
sg224
g879
sg225
I00
sg226
(I1
I0
tp3466
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3467
(dp3468
bsg55
g14
(g56
g16
Ntp3469
Rp3470
(dp3471
g60
(I00
I00
tp3472
sg62
g880
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3473
(dp3474
g37
(lp3475
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3476
tp3477
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3478
tp3479
a(g47
I4732
g1035
S'return _dot(a, b)'
p3480
tp3481
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3482
tp3483
asbsg211
(lp3484
g3435
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3485
(dp3486
bsg55
g14
(g56
g16
Ntp3487
Rp3488
(dp3489
g60
(I00
tp3490
sg62
S'float64'
p3491
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3492
Rp3493
(dp3494
g32
g14
(g148
g16
Ntp3495
Rp3496
(dp3497
g12
(lp3498
g14
(g28
g16
Ntp3499
Rp3500
(dp3501
g32
g14
(g148
g16
Ntp3502
Rp3503
(dp3504
g12
(lp3505
g1926
asg34
(itheano.gof.utils
scratchpad
p3506
(dp3507
g37
(lp3508
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3509
tp3510
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3511
tp3512
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p3513
tp3514
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3515
tp3516
asbsg211
(lp3517
g3500
asg213
g14
(g214
g16
Ntp3518
Rp3519
(dp3520
g218
(lp3521
sg220
(lp3522
sg222
(lp3523
I0
asg224
(tsg225
I00
sg226
(g227
tp3524
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3525
(dp3526
bsg55
g14
(g56
g16
Ntp3527
Rp3528
(dp3529
g60
(I01
tp3530
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3531
Rp3532
(dp3533
g32
g14
(g148
g16
Ntp3534
Rp3535
(dp3536
g12
(lp3537
g3029
asg34
(itheano.gof.utils
scratchpad
p3538
(dp3539
g37
(lp3540
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3541
tp3542
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3543
tp3544
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3545
tp3546
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3547
tp3548
asbsg211
(lp3549
g3532
asg213
g14
(g650
g16
Ntp3550
Rp3551
(dp3552
g20
Nsg656
g3280
sg665
(dp3553
sg667
Nsg669
(dp3554
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3555
(dp3556
g37
(lp3557
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3558
tp3559
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3560
tp3561
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3562
tp3563
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3564
tp3565
asbsg55
g14
(g56
g16
Ntp3566
Rp3567
(dp3568
g60
(I00
tp3569
sg62
S'float64'
p3570
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3571
(dp3572
g37
(lp3573
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p3574
tp3575
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3576
tp3577
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3578
tp3579
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3580
tp3581
asbsg211
(lp3582
g3493
asg213
g14
(g650
g16
Ntp3583
Rp3584
(dp3585
g20
Nsg656
g1575
sg665
(dp3586
sg667
Nsg669
(dp3587
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3588
(dp3589
g37
(lp3590
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3591
tp3592
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3593
tp3594
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3595
tp3596
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3597
tp3598
asbsg55
g14
(g56
g16
Ntp3599
Rp3600
(dp3601
g60
(I00
tp3602
sg62
S'float64'
p3603
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3604
(dp3605
g37
(lp3606
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p3607
tp3608
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p3609
tp3610
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3611
tp3612
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3613
tp3614
asbsg211
(lp3615
g3428
asg213
g14
(g650
g16
Ntp3616
Rp3617
(dp3618
g20
Nsg656
g1883
sg665
(dp3619
sg667
Nsg669
(dp3620
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3621
(dp3622
g37
(lp3623
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p3624
tp3625
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3626
tp3627
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3628
tp3629
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3630
tp3631
asbsg55
g14
(g56
g16
Ntp3632
Rp3633
(dp3634
g60
(I00
tp3635
sg62
S'float64'
p3636
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3637
Rp3638
(dp3639
g32
g14
(g148
g16
Ntp3640
Rp3641
(dp3642
g12
(lp3643
g3156
asg34
(itheano.gof.utils
scratchpad
p3644
(dp3645
g37
(lp3646
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3647
tp3648
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3649
tp3650
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3651
tp3652
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3653
tp3654
asbsg211
(lp3655
g3638
asg213
g14
(g214
g16
Ntp3656
Rp3657
(dp3658
g218
(lp3659
sg220
(lp3660
I1
aI0
asg222
(lp3661
sg224
g859
sg225
I00
sg226
(I1
I0
tp3662
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3663
(dp3664
bsg55
g14
(g56
g16
Ntp3665
Rp3666
(dp3667
g60
(I00
I00
tp3668
sg62
g860
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3669
(dp3670
g37
(lp3671
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3672
tp3673
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p3674
tp3675
a(g47
I4732
g1035
S'return _dot(a, b)'
p3676
tp3677
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3678
tp3679
asbsg211
(lp3680
g3421
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3681
(dp3682
bsg55
g14
(g56
g16
Ntp3683
Rp3684
(dp3685
g60
(I00
tp3686
sg62
S'float64'
p3687
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3688
(dp3689
g37
(lp3690
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3691
tp3692
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p3693
tp3694
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p3695
tp3696
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3697
tp3698
asbsg211
(lp3699
g3197
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3700
(dp3701
g37
(lp3702
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p3703
tp3704
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3705
tp3706
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3707
tp3708
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3709
tp3710
asbsg55
g14
(g56
g16
Ntp3711
Rp3712
(dp3713
g60
(I00
tp3714
sg62
S'float64'
p3715
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag3071
asg34
(itheano.gof.utils
scratchpad
p3716
(dp3717
g37
(lp3718
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p3719
tp3720
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p3721
tp3722
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p3723
tp3724
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3725
tp3726
asbsg211
(lp3727
g3190
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3728
(dp3729
g37
(lp3730
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p3731
tp3732
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p3733
tp3734
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p3735
tp3736
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p3737
tp3738
asbsg55
g14
(g56
g16
Ntp3739
Rp3740
(dp3741
g60
(I00
tp3742
sg62
g2919
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3743
Rp3744
(dp3745
g32
g14
(g148
g16
Ntp3746
Rp3747
(dp3748
g12
(lp3749
g14
(g28
g16
Ntp3750
Rp3751
(dp3752
g32
g14
(g148
g16
Ntp3753
Rp3754
(dp3755
g12
(lp3756
g14
(g28
g16
Ntp3757
Rp3758
(dp3759
g32
g14
(g148
g16
Ntp3760
Rp3761
(dp3762
g12
(lp3763
g14
(g28
g16
Ntp3764
Rp3765
(dp3766
g32
g14
(g148
g16
Ntp3767
Rp3768
(dp3769
g12
(lp3770
g14
(g28
g16
Ntp3771
Rp3772
(dp3773
g32
g14
(g148
g16
Ntp3774
Rp3775
(dp3776
g12
(lp3777
g2982
asg34
(itheano.gof.utils
scratchpad
p3778
(dp3779
g37
(lp3780
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3781
tp3782
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3783
tp3784
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3785
tp3786
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3787
tp3788
asbsg211
(lp3789
g3772
asg213
g14
(g214
g16
Ntp3790
Rp3791
(dp3792
g218
(lp3793
sg220
(lp3794
I0
asg222
(lp3795
sg224
g941
sg225
I00
sg226
(I0
tp3796
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3797
(dp3798
bsg55
g14
(g56
g16
Ntp3799
Rp3800
(dp3801
g60
(I00
tp3802
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3803
(dp3804
g37
(lp3805
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3806
tp3807
a(g47
I4937
S'outer'
p3808
S"x.dimshuffle(0, 'x'),"
p3809
tp3810
a(g198
I324
S'dimshuffle'
p3811
S'return op(self)'
p3812
tp3813
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3814
tp3815
asbsg211
(lp3816
g3765
asg213
g14
(g214
g16
Ntp3817
Rp3818
(dp3819
g218
(lp3820
sg220
(lp3821
I0
asg222
(lp3822
I1
asg224
(I00
tp3823
sg225
I00
sg226
(I0
g227
tp3824
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3825
(dp3826
bsg55
g14
(g56
g16
Ntp3827
Rp3828
(dp3829
g60
(I00
I01
tp3830
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3831
Rp3832
(dp3833
g32
g14
(g148
g16
Ntp3834
Rp3835
(dp3836
g12
(lp3837
g14
(g28
g16
Ntp3838
Rp3839
(dp3840
g32
g14
(g148
g16
Ntp3841
Rp3842
(dp3843
g12
(lp3844
g3057
ag14
(g28
g16
Ntp3845
Rp3846
(dp3847
g32
g14
(g148
g16
Ntp3848
Rp3849
(dp3850
g12
(lp3851
g14
(g28
g16
Ntp3852
Rp3853
(dp3854
g32
g14
(g148
g16
Ntp3855
Rp3856
(dp3857
g12
(lp3858
g1926
asg34
(itheano.gof.utils
scratchpad
p3859
(dp3860
g37
g3233
sbsg211
(lp3861
g3853
asg213
g3244
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3862
(dp3863
bsg55
g3253
sg20
Nsbag14
(g28
g16
Ntp3864
Rp3865
(dp3866
g32
g14
(g148
g16
Ntp3867
Rp3868
(dp3869
g12
(lp3870
g3029
asg34
(itheano.gof.utils
scratchpad
p3871
(dp3872
g37
g3265
sbsg211
(lp3873
g3865
asg213
g3276
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3874
(dp3875
g37
g3288
sbsg55
g3298
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3876
(dp3877
g37
g3304
sbsg211
(lp3878
g3846
asg213
g3315
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3879
(dp3880
g37
g3321
sbsg55
g3331
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3881
(dp3882
g37
g3337
sbsg211
(lp3883
g3839
asg213
g3348
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3884
(dp3885
g37
g3354
sbsg55
g3364
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3886
(dp3887
g37
(lp3888
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3889
tp3890
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p3891
tp3892
a(g198
I324
g3811
S'return op(self)'
p3893
tp3894
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3895
tp3896
asbsg211
(lp3897
g3832
asg213
g14
(g214
g16
Ntp3898
Rp3899
(dp3900
g218
(lp3901
sg220
(lp3902
I0
asg222
(lp3903
I0
asg224
(I00
tp3904
sg225
I00
sg226
(g227
I0
tp3905
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3906
(dp3907
bsg55
g14
(g56
g16
Ntp3908
Rp3909
(dp3910
g60
(I01
I00
tp3911
sg62
g3367
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3912
(dp3913
g37
(lp3914
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3915
tp3916
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p3917
tp3918
a(g47
I4732
g1035
S'return _dot(a, b)'
p3919
tp3920
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3921
tp3922
asbsg211
(lp3923
g3758
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3924
(dp3925
bsg55
g14
(g56
g16
Ntp3926
Rp3927
(dp3928
g60
(I00
I00
tp3929
sg62
S'float64'
p3930
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp3931
Rp3932
(dp3933
g32
g14
(g148
g16
Ntp3934
Rp3935
(dp3936
g12
(lp3937
g14
(g28
g16
Ntp3938
Rp3939
(dp3940
g32
g14
(g148
g16
Ntp3941
Rp3942
(dp3943
g12
(lp3944
g14
(g28
g16
Ntp3945
Rp3946
(dp3947
g32
g14
(g148
g16
Ntp3948
Rp3949
(dp3950
g12
(lp3951
g2982
asg34
(itheano.gof.utils
scratchpad
p3952
(dp3953
g37
(lp3954
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3955
tp3956
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p3957
tp3958
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p3959
tp3960
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3961
tp3962
asbsg211
(lp3963
g3946
asg213
g14
(g214
g16
Ntp3964
Rp3965
(dp3966
g218
(lp3967
sg220
(lp3968
I0
asg222
(lp3969
sg224
g941
sg225
I00
sg226
(I0
tp3970
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3971
(dp3972
bsg55
g14
(g56
g16
Ntp3973
Rp3974
(dp3975
g60
(I00
tp3976
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p3977
(dp3978
g37
(lp3979
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p3980
tp3981
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p3982
tp3983
a(g198
I324
g3811
S'return op(self)'
p3984
tp3985
a(g202
I401
g52
S'self.add_tag_trace(node)'
p3986
tp3987
asbsg211
(lp3988
g3939
asg213
g14
(g214
g16
Ntp3989
Rp3990
(dp3991
g218
(lp3992
sg220
(lp3993
I0
asg222
(lp3994
I1
asg224
(I00
tp3995
sg225
I00
sg226
(I0
g227
tp3996
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p3997
(dp3998
bsg55
g14
(g56
g16
Ntp3999
Rp4000
(dp4001
g60
(I00
I01
tp4002
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4003
Rp4004
(dp4005
g32
g14
(g148
g16
Ntp4006
Rp4007
(dp4008
g12
(lp4009
g14
(g28
g16
Ntp4010
Rp4011
(dp4012
g32
g14
(g148
g16
Ntp4013
Rp4014
(dp4015
g12
(lp4016
g14
(g28
g16
Ntp4017
Rp4018
(dp4019
g32
g14
(g148
g16
Ntp4020
Rp4021
(dp4022
g12
(lp4023
g3011
ag14
(g28
g16
Ntp4024
Rp4025
(dp4026
g32
g14
(g148
g16
Ntp4027
Rp4028
(dp4029
g12
(lp4030
g3170
asg34
(itheano.gof.utils
scratchpad
p4031
(dp4032
g37
g3450
sbsg211
(lp4033
g4025
asg213
g3461
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4034
(dp4035
bsg55
g3470
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4036
(dp4037
g37
g3475
sbsg211
(lp4038
g4018
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4039
(dp4040
bsg55
g3488
sg20
Nsbag14
(g28
g16
Ntp4041
Rp4042
(dp4043
g32
g14
(g148
g16
Ntp4044
Rp4045
(dp4046
g12
(lp4047
g14
(g28
g16
Ntp4048
Rp4049
(dp4050
g32
g14
(g148
g16
Ntp4051
Rp4052
(dp4053
g12
(lp4054
g1926
asg34
(itheano.gof.utils
scratchpad
p4055
(dp4056
g37
g3508
sbsg211
(lp4057
g4049
asg213
g3519
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4058
(dp4059
bsg55
g3528
sg20
Nsbag14
(g28
g16
Ntp4060
Rp4061
(dp4062
g32
g14
(g148
g16
Ntp4063
Rp4064
(dp4065
g12
(lp4066
g3029
asg34
(itheano.gof.utils
scratchpad
p4067
(dp4068
g37
g3540
sbsg211
(lp4069
g4061
asg213
g3551
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4070
(dp4071
g37
g3557
sbsg55
g3567
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4072
(dp4073
g37
g3573
sbsg211
(lp4074
g4042
asg213
g3584
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4075
(dp4076
g37
g3590
sbsg55
g3600
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4077
(dp4078
g37
g3606
sbsg211
(lp4079
g4011
asg213
g3617
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4080
(dp4081
g37
g3623
sbsg55
g3633
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4082
(dp4083
g37
(lp4084
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4085
tp4086
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4087
tp4088
a(g198
I324
g3811
S'return op(self)'
p4089
tp4090
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4091
tp4092
asbsg211
(lp4093
g4004
asg213
g14
(g214
g16
Ntp4094
Rp4095
(dp4096
g218
(lp4097
sg220
(lp4098
I0
asg222
(lp4099
I0
asg224
(I00
tp4100
sg225
I00
sg226
(g227
I0
tp4101
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4102
(dp4103
bsg55
g14
(g56
g16
Ntp4104
Rp4105
(dp4106
g60
(I01
I00
tp4107
sg62
g3636
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4108
(dp4109
g37
(lp4110
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4111
tp4112
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4113
tp4114
a(g47
I4732
g1035
S'return _dot(a, b)'
p4115
tp4116
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4117
tp4118
asbsg211
(lp4119
g3932
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4120
(dp4121
bsg55
g14
(g56
g16
Ntp4122
Rp4123
(dp4124
g60
(I00
I00
tp4125
sg62
S'float64'
p4126
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4127
(dp4128
g37
(lp4129
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4130
tp4131
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p4132
tp4133
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4134
tp4135
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4136
tp4137
asbsg211
(lp4138
g3751
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4139
(dp4140
g37
(lp4141
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4142
tp4143
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p4144
tp4145
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4146
tp4147
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p4148
tp4149
asbsg55
g3099
sg20
Nsbag3085
asg34
(itheano.gof.utils
scratchpad
p4150
(dp4151
g37
(lp4152
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4153
tp4154
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p4155
tp4156
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4157
tp4158
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4159
tp4160
asbsg211
(lp4161
g3744
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4162
(dp4163
g37
(lp4164
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4165
tp4166
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p4167
tp4168
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4169
tp4170
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p4171
tp4172
asbsg55
g14
(g56
g16
Ntp4173
Rp4174
(dp4175
g60
(I00
I00
tp4176
sg62
S'float64'
p4177
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4178
Rp4179
(dp4180
g32
g14
(g148
g16
Ntp4181
Rp4182
(dp4183
g12
(lp4184
g14
(g28
g16
Ntp4185
Rp4186
(dp4187
g32
g14
(g148
g16
Ntp4188
Rp4189
(dp4190
g12
(lp4191
g14
(g28
g16
Ntp4192
Rp4193
(dp4194
g32
g14
(g148
g16
Ntp4195
Rp4196
(dp4197
g12
(lp4198
g14
(g28
g16
Ntp4199
Rp4200
(dp4201
g32
g14
(g148
g16
Ntp4202
Rp4203
(dp4204
g12
(lp4205
g14
(g28
g16
Ntp4206
Rp4207
(dp4208
g32
g14
(g148
g16
Ntp4209
Rp4210
(dp4211
g12
(lp4212
g2997
asg34
(itheano.gof.utils
scratchpad
p4213
(dp4214
g37
(lp4215
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4216
tp4217
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p4218
tp4219
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p4220
tp4221
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4222
tp4223
asbsg211
(lp4224
g4207
asg213
g14
(g214
g16
Ntp4225
Rp4226
(dp4227
g218
(lp4228
sg220
(lp4229
I0
asg222
(lp4230
sg224
g61
sg225
I00
sg226
(I0
tp4231
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4232
(dp4233
bsg55
g14
(g56
g16
Ntp4234
Rp4235
(dp4236
g60
(I00
tp4237
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4238
(dp4239
g37
(lp4240
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4241
tp4242
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p4243
tp4244
a(g198
I324
g3811
S'return op(self)'
p4245
tp4246
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4247
tp4248
asbsg211
(lp4249
g4200
asg213
g14
(g214
g16
Ntp4250
Rp4251
(dp4252
g218
(lp4253
sg220
(lp4254
I0
asg222
(lp4255
I1
asg224
(I00
tp4256
sg225
I00
sg226
(I0
g227
tp4257
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4258
(dp4259
bsg55
g14
(g56
g16
Ntp4260
Rp4261
(dp4262
g60
(I00
I01
tp4263
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4264
Rp4265
(dp4266
g32
g14
(g148
g16
Ntp4267
Rp4268
(dp4269
g12
(lp4270
g14
(g28
g16
Ntp4271
Rp4272
(dp4273
g32
g14
(g148
g16
Ntp4274
Rp4275
(dp4276
g12
(lp4277
g3057
ag14
(g28
g16
Ntp4278
Rp4279
(dp4280
g32
g14
(g148
g16
Ntp4281
Rp4282
(dp4283
g12
(lp4284
g14
(g28
g16
Ntp4285
Rp4286
(dp4287
g32
g14
(g148
g16
Ntp4288
Rp4289
(dp4290
g12
(lp4291
g1926
asg34
(itheano.gof.utils
scratchpad
p4292
(dp4293
g37
g3233
sbsg211
(lp4294
g4286
asg213
g3244
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4295
(dp4296
bsg55
g3253
sg20
Nsbag14
(g28
g16
Ntp4297
Rp4298
(dp4299
g32
g14
(g148
g16
Ntp4300
Rp4301
(dp4302
g12
(lp4303
g3029
asg34
(itheano.gof.utils
scratchpad
p4304
(dp4305
g37
g3265
sbsg211
(lp4306
g4298
asg213
g3276
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4307
(dp4308
g37
g3288
sbsg55
g3298
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4309
(dp4310
g37
g3304
sbsg211
(lp4311
g4279
asg213
g3315
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4312
(dp4313
g37
g3321
sbsg55
g3331
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4314
(dp4315
g37
g3337
sbsg211
(lp4316
g4272
asg213
g3348
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4317
(dp4318
g37
g3354
sbsg55
g3364
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4319
(dp4320
g37
(lp4321
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4322
tp4323
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4324
tp4325
a(g198
I324
g3811
S'return op(self)'
p4326
tp4327
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4328
tp4329
asbsg211
(lp4330
g4265
asg213
g14
(g214
g16
Ntp4331
Rp4332
(dp4333
g218
(lp4334
sg220
(lp4335
I0
asg222
(lp4336
I0
asg224
(I00
tp4337
sg225
I00
sg226
(g227
I0
tp4338
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4339
(dp4340
bsg55
g14
(g56
g16
Ntp4341
Rp4342
(dp4343
g60
(I01
I00
tp4344
sg62
g3367
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4345
(dp4346
g37
(lp4347
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4348
tp4349
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4350
tp4351
a(g47
I4732
g1035
S'return _dot(a, b)'
p4352
tp4353
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4354
tp4355
asbsg211
(lp4356
g4193
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4357
(dp4358
bsg55
g14
(g56
g16
Ntp4359
Rp4360
(dp4361
g60
(I00
I00
tp4362
sg62
S'float64'
p4363
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4364
Rp4365
(dp4366
g32
g14
(g148
g16
Ntp4367
Rp4368
(dp4369
g12
(lp4370
g14
(g28
g16
Ntp4371
Rp4372
(dp4373
g32
g14
(g148
g16
Ntp4374
Rp4375
(dp4376
g12
(lp4377
g14
(g28
g16
Ntp4378
Rp4379
(dp4380
g32
g14
(g148
g16
Ntp4381
Rp4382
(dp4383
g12
(lp4384
g2997
asg34
(itheano.gof.utils
scratchpad
p4385
(dp4386
g37
(lp4387
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4388
tp4389
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p4390
tp4391
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p4392
tp4393
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4394
tp4395
asbsg211
(lp4396
g4379
asg213
g14
(g214
g16
Ntp4397
Rp4398
(dp4399
g218
(lp4400
sg220
(lp4401
I0
asg222
(lp4402
sg224
g61
sg225
I00
sg226
(I0
tp4403
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4404
(dp4405
bsg55
g14
(g56
g16
Ntp4406
Rp4407
(dp4408
g60
(I00
tp4409
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4410
(dp4411
g37
(lp4412
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4413
tp4414
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p4415
tp4416
a(g198
I324
g3811
S'return op(self)'
p4417
tp4418
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4419
tp4420
asbsg211
(lp4421
g4372
asg213
g14
(g214
g16
Ntp4422
Rp4423
(dp4424
g218
(lp4425
sg220
(lp4426
I0
asg222
(lp4427
I1
asg224
(I00
tp4428
sg225
I00
sg226
(I0
g227
tp4429
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4430
(dp4431
bsg55
g14
(g56
g16
Ntp4432
Rp4433
(dp4434
g60
(I00
I01
tp4435
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4436
Rp4437
(dp4438
g32
g14
(g148
g16
Ntp4439
Rp4440
(dp4441
g12
(lp4442
g14
(g28
g16
Ntp4443
Rp4444
(dp4445
g32
g14
(g148
g16
Ntp4446
Rp4447
(dp4448
g12
(lp4449
g14
(g28
g16
Ntp4450
Rp4451
(dp4452
g32
g14
(g148
g16
Ntp4453
Rp4454
(dp4455
g12
(lp4456
g3011
ag14
(g28
g16
Ntp4457
Rp4458
(dp4459
g32
g14
(g148
g16
Ntp4460
Rp4461
(dp4462
g12
(lp4463
g3170
asg34
(itheano.gof.utils
scratchpad
p4464
(dp4465
g37
g3450
sbsg211
(lp4466
g4458
asg213
g3461
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4467
(dp4468
bsg55
g3470
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4469
(dp4470
g37
g3475
sbsg211
(lp4471
g4451
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4472
(dp4473
bsg55
g3488
sg20
Nsbag14
(g28
g16
Ntp4474
Rp4475
(dp4476
g32
g14
(g148
g16
Ntp4477
Rp4478
(dp4479
g12
(lp4480
g14
(g28
g16
Ntp4481
Rp4482
(dp4483
g32
g14
(g148
g16
Ntp4484
Rp4485
(dp4486
g12
(lp4487
g1926
asg34
(itheano.gof.utils
scratchpad
p4488
(dp4489
g37
g3508
sbsg211
(lp4490
g4482
asg213
g3519
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4491
(dp4492
bsg55
g3528
sg20
Nsbag14
(g28
g16
Ntp4493
Rp4494
(dp4495
g32
g14
(g148
g16
Ntp4496
Rp4497
(dp4498
g12
(lp4499
g3029
asg34
(itheano.gof.utils
scratchpad
p4500
(dp4501
g37
g3540
sbsg211
(lp4502
g4494
asg213
g3551
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4503
(dp4504
g37
g3557
sbsg55
g3567
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4505
(dp4506
g37
g3573
sbsg211
(lp4507
g4475
asg213
g3584
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4508
(dp4509
g37
g3590
sbsg55
g3600
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4510
(dp4511
g37
g3606
sbsg211
(lp4512
g4444
asg213
g3617
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4513
(dp4514
g37
g3623
sbsg55
g3633
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4515
(dp4516
g37
(lp4517
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4518
tp4519
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4520
tp4521
a(g198
I324
g3811
S'return op(self)'
p4522
tp4523
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4524
tp4525
asbsg211
(lp4526
g4437
asg213
g14
(g214
g16
Ntp4527
Rp4528
(dp4529
g218
(lp4530
sg220
(lp4531
I0
asg222
(lp4532
I0
asg224
(I00
tp4533
sg225
I00
sg226
(g227
I0
tp4534
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4535
(dp4536
bsg55
g14
(g56
g16
Ntp4537
Rp4538
(dp4539
g60
(I01
I00
tp4540
sg62
g3636
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4541
(dp4542
g37
(lp4543
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4544
tp4545
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4546
tp4547
a(g47
I4732
g1035
S'return _dot(a, b)'
p4548
tp4549
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4550
tp4551
asbsg211
(lp4552
g4365
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4553
(dp4554
bsg55
g14
(g56
g16
Ntp4555
Rp4556
(dp4557
g60
(I00
I00
tp4558
sg62
S'float64'
p4559
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4560
(dp4561
g37
(lp4562
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4563
tp4564
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p4565
tp4566
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4567
tp4568
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4569
tp4570
asbsg211
(lp4571
g4186
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4572
(dp4573
g37
(lp4574
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4575
tp4576
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p4577
tp4578
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4579
tp4580
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p4581
tp4582
asbsg55
g3118
sg20
Nsbag3104
asg34
(itheano.gof.utils
scratchpad
p4583
(dp4584
g37
(lp4585
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4586
tp4587
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p4588
tp4589
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4590
tp4591
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4592
tp4593
asbsg211
(lp4594
g4179
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4595
(dp4596
g37
(lp4597
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4598
tp4599
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p4600
tp4601
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4602
tp4603
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p4604
tp4605
asbsg55
g14
(g56
g16
Ntp4606
Rp4607
(dp4608
g60
(I00
I00
tp4609
sg62
g2938
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4610
Rp4611
(dp4612
g32
g14
(g148
g16
Ntp4613
Rp4614
(dp4615
g12
(lp4616
g14
(g28
g16
Ntp4617
Rp4618
(dp4619
g32
g14
(g148
g16
Ntp4620
Rp4621
(dp4622
g12
(lp4623
g14
(g28
g16
Ntp4624
Rp4625
(dp4626
g32
g14
(g148
g16
Ntp4627
Rp4628
(dp4629
g12
(lp4630
g14
(g28
g16
Ntp4631
Rp4632
(dp4633
g32
g14
(g148
g16
Ntp4634
Rp4635
(dp4636
g12
(lp4637
g3029
asg34
(itheano.gof.utils
scratchpad
p4638
(dp4639
g37
(lp4640
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4641
tp4642
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p4643
tp4644
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p4645
tp4646
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4647
tp4648
asbsg211
(lp4649
g4632
asg213
g14
(g214
g16
Ntp4650
Rp4651
(dp4652
g218
(lp4653
sg220
(lp4654
I0
asg222
(lp4655
sg224
g1146
sg225
I00
sg226
(I0
tp4656
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4657
(dp4658
bsg55
g14
(g56
g16
Ntp4659
Rp4660
(dp4661
g60
(I00
tp4662
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4663
(dp4664
g37
(lp4665
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4666
tp4667
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p4668
tp4669
a(g198
I324
g3811
S'return op(self)'
p4670
tp4671
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4672
tp4673
asbsg211
(lp4674
g4625
asg213
g14
(g214
g16
Ntp4675
Rp4676
(dp4677
g218
(lp4678
sg220
(lp4679
I0
asg222
(lp4680
I1
asg224
(I00
tp4681
sg225
I00
sg226
(I0
g227
tp4682
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4683
(dp4684
bsg55
g14
(g56
g16
Ntp4685
Rp4686
(dp4687
g60
(I00
I01
tp4688
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4689
Rp4690
(dp4691
g32
g14
(g148
g16
Ntp4692
Rp4693
(dp4694
g12
(lp4695
g3011
asg34
(itheano.gof.utils
scratchpad
p4696
(dp4697
g37
(lp4698
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4699
tp4700
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4701
tp4702
a(g198
I324
g3811
S'return op(self)'
p4703
tp4704
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4705
tp4706
asbsg211
(lp4707
g4690
asg213
g14
(g214
g16
Ntp4708
Rp4709
(dp4710
g218
(lp4711
sg220
(lp4712
I0
asg222
(lp4713
I0
asg224
(I00
tp4714
sg225
I00
sg226
(g227
I0
tp4715
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4716
(dp4717
bsg55
g14
(g56
g16
Ntp4718
Rp4719
(dp4720
g60
(I01
I00
tp4721
sg62
g2062
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4722
(dp4723
g37
(lp4724
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p4725
tp4726
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p4727
tp4728
a(g47
I4732
g1035
S'return _dot(a, b)'
p4729
tp4730
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4731
tp4732
asbsg211
(lp4733
g4618
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4734
(dp4735
bsg55
g3137
sg20
Nsbag3123
asg34
(itheano.gof.utils
scratchpad
p4736
(dp4737
g37
(lp4738
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4739
tp4740
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p4741
tp4742
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4743
tp4744
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4745
tp4746
asbsg211
(lp4747
g4611
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4748
(dp4749
g37
(lp4750
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p4751
tp4752
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p4753
tp4754
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p4755
tp4756
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p4757
tp4758
asbsg55
g14
(g56
g16
Ntp4759
Rp4760
(dp4761
g60
(I00
I00
tp4762
sg62
g2957
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4763
Rp4764
(dp4765
g32
g14
(g148
g16
Ntp4766
Rp4767
(dp4768
g12
(lp4769
g14
(g28
g16
Ntp4770
Rp4771
(dp4772
g32
g14
(g148
g16
Ntp4773
Rp4774
(dp4775
g12
(lp4776
g14
(g28
g16
Ntp4777
Rp4778
(dp4779
g32
g14
(g148
g16
Ntp4780
Rp4781
(dp4782
g12
(lp4783
g3057
ag14
(g28
g16
Ntp4784
Rp4785
(dp4786
g32
g14
(g148
g16
Ntp4787
Rp4788
(dp4789
g12
(lp4790
g14
(g28
g16
Ntp4791
Rp4792
(dp4793
g32
g14
(g148
g16
Ntp4794
Rp4795
(dp4796
g12
(lp4797
g1926
asg34
(itheano.gof.utils
scratchpad
p4798
(dp4799
g37
g3233
sbsg211
(lp4800
g4792
asg213
g3244
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4801
(dp4802
bsg55
g3253
sg20
Nsbag14
(g28
g16
Ntp4803
Rp4804
(dp4805
g32
g14
(g148
g16
Ntp4806
Rp4807
(dp4808
g12
(lp4809
g3029
asg34
(itheano.gof.utils
scratchpad
p4810
(dp4811
g37
g3265
sbsg211
(lp4812
g4804
asg213
g3276
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4813
(dp4814
g37
g3288
sbsg55
g3298
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4815
(dp4816
g37
g3304
sbsg211
(lp4817
g4785
asg213
g3315
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4818
(dp4819
g37
g3321
sbsg55
g3331
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4820
(dp4821
g37
g3337
sbsg211
(lp4822
g4778
asg213
g3348
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4823
(dp4824
g37
g3354
sbsg55
g3364
sg20
Nsbag14
(g28
g16
Ntp4825
Rp4826
(dp4827
g32
g14
(g148
g16
Ntp4828
Rp4829
(dp4830
g12
(lp4831
g3142
asg34
(itheano.gof.utils
scratchpad
p4832
(dp4833
g37
(lp4834
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p4835
tp4836
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p4837
tp4838
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p4839
tp4840
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4841
tp4842
asbsg211
(lp4843
g4826
asg213
g14
(g214
g16
Ntp4844
Rp4845
(dp4846
g218
(lp4847
sg220
(lp4848
I1
aI0
asg222
(lp4849
sg224
g177
sg225
I00
sg226
(I1
I0
tp4850
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4851
(dp4852
bsg55
g14
(g56
g16
Ntp4853
Rp4854
(dp4855
g60
(I00
I00
tp4856
sg62
g178
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4857
(dp4858
g37
(lp4859
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4860
tp4861
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p4862
tp4863
a(g47
I4732
g1035
S'return _dot(a, b)'
p4864
tp4865
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4866
tp4867
asbsg211
(lp4868
g4771
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4869
(dp4870
bsg55
g14
(g56
g16
Ntp4871
Rp4872
(dp4873
g60
(I00
tp4874
sg62
S'float64'
p4875
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp4876
Rp4877
(dp4878
g32
g14
(g148
g16
Ntp4879
Rp4880
(dp4881
g12
(lp4882
g14
(g28
g16
Ntp4883
Rp4884
(dp4885
g32
g14
(g148
g16
Ntp4886
Rp4887
(dp4888
g12
(lp4889
g14
(g28
g16
Ntp4890
Rp4891
(dp4892
g32
g14
(g148
g16
Ntp4893
Rp4894
(dp4895
g12
(lp4896
g3011
ag14
(g28
g16
Ntp4897
Rp4898
(dp4899
g32
g14
(g148
g16
Ntp4900
Rp4901
(dp4902
g12
(lp4903
g3170
asg34
(itheano.gof.utils
scratchpad
p4904
(dp4905
g37
g3450
sbsg211
(lp4906
g4898
asg213
g3461
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4907
(dp4908
bsg55
g3470
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4909
(dp4910
g37
g3475
sbsg211
(lp4911
g4891
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4912
(dp4913
bsg55
g3488
sg20
Nsbag14
(g28
g16
Ntp4914
Rp4915
(dp4916
g32
g14
(g148
g16
Ntp4917
Rp4918
(dp4919
g12
(lp4920
g14
(g28
g16
Ntp4921
Rp4922
(dp4923
g32
g14
(g148
g16
Ntp4924
Rp4925
(dp4926
g12
(lp4927
g1926
asg34
(itheano.gof.utils
scratchpad
p4928
(dp4929
g37
g3508
sbsg211
(lp4930
g4922
asg213
g3519
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4931
(dp4932
bsg55
g3528
sg20
Nsbag14
(g28
g16
Ntp4933
Rp4934
(dp4935
g32
g14
(g148
g16
Ntp4936
Rp4937
(dp4938
g12
(lp4939
g3029
asg34
(itheano.gof.utils
scratchpad
p4940
(dp4941
g37
g3540
sbsg211
(lp4942
g4934
asg213
g3551
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4943
(dp4944
g37
g3557
sbsg55
g3567
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4945
(dp4946
g37
g3573
sbsg211
(lp4947
g4915
asg213
g3584
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4948
(dp4949
g37
g3590
sbsg55
g3600
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4950
(dp4951
g37
g3606
sbsg211
(lp4952
g4884
asg213
g3617
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4953
(dp4954
g37
g3623
sbsg55
g3633
sg20
Nsbag14
(g28
g16
Ntp4955
Rp4956
(dp4957
g32
g14
(g148
g16
Ntp4958
Rp4959
(dp4960
g12
(lp4961
g3142
asg34
(itheano.gof.utils
scratchpad
p4962
(dp4963
g37
(lp4964
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p4965
tp4966
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p4967
tp4968
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p4969
tp4970
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4971
tp4972
asbsg211
(lp4973
g4956
asg213
g14
(g214
g16
Ntp4974
Rp4975
(dp4976
g218
(lp4977
sg220
(lp4978
I1
aI0
asg222
(lp4979
sg224
g177
sg225
I00
sg226
(I1
I0
tp4980
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4981
(dp4982
bsg55
g14
(g56
g16
Ntp4983
Rp4984
(dp4985
g60
(I00
I00
tp4986
sg62
g178
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p4987
(dp4988
g37
(lp4989
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p4990
tp4991
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p4992
tp4993
a(g47
I4732
g1035
S'return _dot(a, b)'
p4994
tp4995
a(g202
I401
g52
S'self.add_tag_trace(node)'
p4996
tp4997
asbsg211
(lp4998
g4877
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p4999
(dp5000
bsg55
g14
(g56
g16
Ntp5001
Rp5002
(dp5003
g60
(I00
tp5004
sg62
S'float64'
p5005
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5006
(dp5007
g37
(lp5008
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5009
tp5010
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p5011
tp5012
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p5013
tp5014
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5015
tp5016
asbsg211
(lp5017
g4764
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5018
(dp5019
g37
(lp5020
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p5021
tp5022
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5023
tp5024
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5025
tp5026
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5027
tp5028
asbsg55
g14
(g56
g16
Ntp5029
Rp5030
(dp5031
g60
(I00
tp5032
sg62
g2976
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I6
sg1174
(lp5033
I00
aI00
aI00
aI00
aI00
asg1243
I00
sg665
g1176
((lp5034
tp5035
Rp5036
sg1180
I1
sg1181
I4
sg1182
(lp5037
g314
(g317
S'\x00\x00\x00\x00'
p5038
tp5039
Rp5040
ag314
(g317
S'\xff\xff\xff\xff'
p5041
tp5042
Rp5043
ag314
(g317
S'\xff\xff\xff\xff'
p5044
tp5045
Rp5046
ag314
(g317
S'\xff\xff\xff\xff'
p5047
tp5048
Rp5049
aI0
asg1002
I1
sg1188
I10
sg1189
I00
sg1190
I-1
sg1191
I5
sg20
S'grad_of_scan_fn'
p5050
sg1193
g1196
sg1221
g1176
((lp5051
(lp5052
g1191
aI5
aa(lp5053
g1232
aI0
aa(lp5054
g999
ag3183
aa(lp5055
g1243
aI00
aa(lp5056
g1002
aI1
aa(lp5057
g1227
aI1
aa(lp5058
g1229
a(lp5059
(lp5060
I1
aaaa(lp5061
g1190
aI-1
aa(lp5062
g1187
aI3
aa(lp5063
g1235
aI0
aa(lp5064
g1180
aI1
aa(lp5065
g1189
aI00
aa(lp5066
g8
aI00
aa(lp5067
g665
ag5036
aa(lp5068
g20
ag5050
aa(lp5069
g1240
aNaatp5070
Rp5071
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p5072
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p5073
(g4975
((g175
((I-1
I10
tp5074
I00
tp5075
tp5076
tp5077
(I1
(I00
tp5078
tp5079
tp5080
(g4845
((g175
(g5074
I00
tp5081
tp5082
tp5083
(I1
(I00
tp5084
tp5085
tp5086
(g3551
((g1144
((I-1
I3
tp5087
I00
tp5088
tp5089
tp5090
(I1
(I00
tp5091
tp5092
tp5093
(g3276
((g1144
(g5087
I00
tp5094
tp5095
tp5096
(I1
(I00
tp5097
tp5098
tp5099
(g4651
((g1144
(g5087
I00
tp5100
tp5101
tp5102
(I1
(I00
tp5103
tp5104
tp5105
(g3551
((g1144
(g5087
I00
tp5106
tp5107
tp5108
(I1
(I00
tp5109
tp5110
tp5111
(g3276
((g1144
(g5087
I00
tp5112
tp5113
tp5114
(I1
(I00
tp5115
tp5116
tp5117
(g3551
((g1144
(g5087
I00
tp5118
tp5119
tp5120
(I1
(I00
tp5121
tp5122
tp5123
(g3276
((g1144
(g5087
I00
tp5124
tp5125
tp5126
(I1
(I00
tp5127
tp5128
tp5129
(g3551
((g1144
(g5087
I00
tp5130
tp5131
tp5132
(I1
(I00
tp5133
tp5134
tp5135
(g3276
((g1144
(g5087
I00
tp5136
tp5137
tp5138
(I1
(I00
tp5139
tp5140
tp5141
(g3519
((g1936
((S'a173b056c810f5c9ee305c38ce680f38'
p5142
I11
I0
tp5143
I00
tp5144
tp5145
tp5146
(I1
(I00
tp5147
tp5148
tp5149
(g3244
((g1936
(g5143
I00
tp5150
tp5151
tp5152
(I1
(I00
tp5153
tp5154
tp5155
(g3519
((g1936
(g5143
I00
tp5156
tp5157
tp5158
(I1
(I00
tp5159
tp5160
tp5161
(g3244
((g1936
(g5143
I00
tp5162
tp5163
tp5164
(I1
(I00
tp5165
tp5166
tp5167
(g3519
((g1936
(g5143
I00
tp5168
tp5169
tp5170
(I1
(I00
tp5171
tp5172
tp5173
(g3244
((g1936
(g5143
I00
tp5174
tp5175
tp5176
(I1
(I00
tp5177
tp5178
tp5179
(g3519
((g1936
(g5143
I00
tp5180
tp5181
tp5182
(I1
(I00
tp5183
tp5184
tp5185
(g3244
((g1936
(g5143
I00
tp5186
tp5187
tp5188
(I1
(I00
tp5189
tp5190
tp5191
(g3461
((g877
((I-1
I12
tp5192
I00
tp5193
tp5194
tp5195
(I1
(I00
tp5196
tp5197
tp5198
(g3461
((g877
(g5192
I00
tp5199
tp5200
tp5201
(I1
(I00
tp5202
tp5203
tp5204
(g3461
((g877
(g5192
I00
tp5205
tp5206
tp5207
(I1
(I00
tp5208
tp5209
tp5210
(g3461
((g877
(g5192
I00
tp5211
tp5212
tp5213
(I1
(I00
tp5214
tp5215
tp5216
(g4709
((g3025
((I-1
I2
tp5217
I00
tp5218
tp5219
tp5220
(I1
(I00
tp5221
tp5222
tp5223
(g4398
((g58
((I-1
I1
tp5224
I00
tp5225
tp5226
tp5227
(I1
(I00
tp5228
tp5229
tp5230
(g4226
((g58
(g5224
I00
tp5231
tp5232
tp5233
(I1
(I00
tp5234
tp5235
tp5236
(g3965
((g939
((I-1
I0
tp5237
I00
tp5238
tp5239
tp5240
(I1
(I00
tp5241
tp5242
tp5243
(g3791
((g939
(g5237
I00
tp5244
tp5245
tp5246
(I1
(I00
tp5247
tp5248
tp5249
(g3657
((g857
((I-1
I11
tp5250
I00
tp5251
tp5252
tp5253
(I1
(I00
tp5254
tp5255
tp5256
(g3389
((g857
(g5250
I00
tp5257
tp5258
tp5259
(I1
(I00
tp5260
tp5261
tp5262
(g4676
((g4660
((I4
I0
tp5263
I00
tp5264
tp5265
tp5266
(I1
(I00
tp5267
tp5268
tp5269
(g3584
((g3528
((I11
I0
tp5270
I00
tp5271
tp5272
(g3567
((I2
I0
tp5273
I00
tp5274
tp5275
tp5276
(I1
(I00
tp5277
tp5278
tp5279
(g3315
((g3253
((I12
I0
tp5280
I00
tp5281
tp5282
(g3298
((I3
I0
tp5283
I00
tp5284
tp5285
tp5286
(I1
(I00
tp5287
tp5288
tp5289
(g3584
((g3528
((I13
I0
tp5290
I00
tp5291
tp5292
(g3567
((I5
I0
tp5293
I00
tp5294
tp5295
tp5296
(I1
(I00
tp5297
tp5298
tp5299
(g3315
((g3253
((I14
I0
tp5300
I00
tp5301
tp5302
(g3298
((I6
I0
tp5303
I00
tp5304
tp5305
tp5306
(I1
(I00
tp5307
tp5308
tp5309
(g3584
((g3528
((I15
I0
tp5310
I00
tp5311
tp5312
(g3567
((I7
I0
tp5313
I00
tp5314
tp5315
tp5316
(I1
(I00
tp5317
tp5318
tp5319
(g3315
((g3253
((I16
I0
tp5320
I00
tp5321
tp5322
(g3298
((I8
I0
tp5323
I00
tp5324
tp5325
tp5326
(I1
(I00
tp5327
tp5328
tp5329
(g3584
((g3528
((I17
I0
tp5330
I00
tp5331
tp5332
(g3567
((I9
I0
tp5333
I00
tp5334
tp5335
tp5336
(I1
(I00
tp5337
tp5338
tp5339
(g3315
((g3253
((I18
I0
tp5340
I00
tp5341
tp5342
(g3298
((I10
I0
tp5343
I00
tp5344
tp5345
tp5346
(I1
(I00
tp5347
tp5348
tp5349
(g1043
((g3025
(g5217
I00
tp5350
tp5351
(g3470
((I19
I0
tp5352
I00
tp5353
tp5354
tp5355
(I1
(I00
tp5356
tp5357
tp5358
(g1043
((g3025
(g5217
I00
tp5359
tp5360
(g3470
((I20
I0
tp5361
I00
tp5362
tp5363
tp5364
(I1
(I00
tp5365
tp5366
tp5367
(g1043
((g3025
(g5217
I00
tp5368
tp5369
(g3470
((I21
I0
tp5370
I00
tp5371
tp5372
tp5373
(I1
(I00
tp5374
tp5375
tp5376
(g1043
((g3025
(g5217
I00
tp5377
tp5378
(g3470
((I22
I0
tp5379
I00
tp5380
tp5381
tp5382
(I1
(I00
tp5383
tp5384
tp5385
(g4423
((g4407
((I24
I0
tp5386
I00
tp5387
tp5388
tp5389
(I1
(I00
tp5390
tp5391
tp5392
(g4251
((g4235
((I25
I0
tp5393
I00
tp5394
tp5395
tp5396
(I1
(I00
tp5397
tp5398
tp5399
(g3990
((g3974
((I26
I0
tp5400
I00
tp5401
tp5402
tp5403
(I1
(I00
tp5404
tp5405
tp5406
(g3818
((g3800
((I27
I0
tp5407
I00
tp5408
tp5409
tp5410
(I1
(I00
tp5411
tp5412
tp5413
(g1043
((g4686
((I30
I0
tp5414
I00
tp5415
tp5416
(g4719
((I23
I0
tp5417
I00
tp5418
tp5419
tp5420
(I1
(I00
tp5421
tp5422
tp5423
(g3348
((g1144
((I-1
I5
tp5424
I00
tp5425
tp5426
(g3331
((I32
I0
tp5427
I00
tp5428
tp5429
tp5430
(I1
(I00
tp5431
tp5432
tp5433
(g3348
((g1144
(g5424
I00
tp5434
tp5435
(g3331
((I34
I0
tp5436
I00
tp5437
tp5438
tp5439
(I1
(I00
tp5440
tp5441
tp5442
(g3348
((g1144
(g5424
I00
tp5443
tp5444
(g3331
((I36
I0
tp5445
I00
tp5446
tp5447
tp5448
(I1
(I00
tp5449
tp5450
tp5451
(g3348
((g1144
(g5424
I00
tp5452
tp5453
(g3331
((I38
I0
tp5454
I00
tp5455
tp5456
tp5457
(I1
(I00
tp5458
tp5459
tp5460
(g3617
((g3488
((I39
I0
tp5461
I00
tp5462
tp5463
(g3600
((I31
I0
tp5464
I00
tp5465
tp5466
tp5467
(I1
(I00
tp5468
tp5469
tp5470
(g3617
((g3488
((I40
I0
tp5471
I00
tp5472
tp5473
(g3600
((I33
I0
tp5474
I00
tp5475
tp5476
tp5477
(I1
(I00
tp5478
tp5479
tp5480
(g3617
((g3488
((I41
I0
tp5481
I00
tp5482
tp5483
(g3600
((I35
I0
tp5484
I00
tp5485
tp5486
tp5487
(I1
(I00
tp5488
tp5489
tp5490
(g3617
((g3488
((I42
I0
tp5491
I00
tp5492
tp5493
(g3600
((I37
I0
tp5494
I00
tp5495
tp5496
tp5497
(I1
(I00
tp5498
tp5499
tp5500
(g652
((g3137
((I47
I0
tp5501
I00
tp5502
tp5503
(g3137
((I-1
I9
tp5504
I00
tp5505
tp5506
tp5507
(I1
(I00
tp5508
tp5509
tp5510
(g1043
((g3364
((I48
I0
tp5511
I00
tp5512
tp5513
(g4854
((I1
I0
tp5514
I00
tp5515
tp5516
tp5517
(I1
(I00
tp5518
tp5519
tp5520
(g4332
((g3364
((I49
I0
tp5521
I00
tp5522
tp5523
tp5524
(I1
(I00
tp5525
tp5526
tp5527
(g3899
((g3364
((I50
I0
tp5528
I00
tp5529
tp5530
tp5531
(I1
(I00
tp5532
tp5533
tp5534
(g1043
((g3364
((I51
I0
tp5535
I00
tp5536
tp5537
(g3398
((I29
I0
tp5538
I00
tp5539
tp5540
tp5541
(I1
(I00
tp5542
tp5543
tp5544
(g1043
((g3633
((I52
I0
tp5545
I00
tp5546
tp5547
(g4984
((I0
I0
tp5548
I00
tp5549
tp5550
tp5551
(I1
(I00
tp5552
tp5553
tp5554
(g4528
((g3633
((I53
I0
tp5555
I00
tp5556
tp5557
tp5558
(I1
(I00
tp5559
tp5560
tp5561
(g4095
((g3633
((I54
I0
tp5562
I00
tp5563
tp5564
tp5565
(I1
(I00
tp5566
tp5567
tp5568
(g1043
((g3633
((I55
I0
tp5569
I00
tp5570
tp5571
(g3666
((I28
I0
tp5572
I00
tp5573
tp5574
tp5575
(I1
(I00
tp5576
tp5577
tp5578
(g1043
((g4261
((I44
I0
tp5579
I00
tp5580
tp5581
(g4342
((I58
I0
tp5582
I00
tp5583
tp5584
tp5585
(I1
(I00
tp5586
tp5587
tp5588
(g1043
((g3828
((I46
I0
tp5589
I00
tp5590
tp5591
(g3909
((I59
I0
tp5592
I00
tp5593
tp5594
tp5595
(I1
(I00
tp5596
tp5597
tp5598
(g652
((g4872
((I57
I0
tp5599
I00
tp5600
tp5601
(g5002
((I61
I0
tp5602
I00
tp5603
tp5604
tp5605
(I1
(I00
tp5606
tp5607
tp5608
(g1043
((g4433
((I43
I0
tp5609
I00
tp5610
tp5611
(g4538
((I62
I0
tp5612
I00
tp5613
tp5614
tp5615
(I1
(I00
tp5616
tp5617
tp5618
(g1043
((g4000
((I45
I0
tp5619
I00
tp5620
tp5621
(g4105
((I63
I0
tp5622
I00
tp5623
tp5624
tp5625
(I1
(I00
tp5626
tp5627
tp5628
(g652
((g3416
((I60
I0
tp5629
I00
tp5630
tp5631
(g3684
((I64
I0
tp5632
I00
tp5633
tp5634
tp5635
(I1
(I00
tp5636
tp5637
tp5638
(g652
((g4360
((I65
I0
tp5639
I00
tp5640
tp5641
(g4556
((I68
I0
tp5642
I00
tp5643
tp5644
tp5645
(I1
(I00
tp5646
tp5647
tp5648
(g652
((g3927
((I66
I0
tp5649
I00
tp5650
tp5651
(g4123
((I69
I0
tp5652
I00
tp5653
tp5654
tp5655
(I1
(I00
tp5656
tp5657
tp5658
(g652
((g3712
((I70
I0
tp5659
I00
tp5660
tp5661
(g1144
((I-1
I6
tp5662
I00
tp5663
tp5664
tp5665
(I1
(I00
tp5666
tp5667
tp5668
(g652
((g3118
((I71
I0
tp5669
I00
tp5670
tp5671
(g3118
((I-1
I8
tp5672
I00
tp5673
tp5674
tp5675
(I1
(I00
tp5676
tp5677
tp5678
(g652
((g3099
((I72
I0
tp5679
I00
tp5680
tp5681
(g3099
((I-1
I7
tp5682
I00
tp5683
tp5684
tp5685
(I1
(I00
tp5686
tp5687
tp5688
tp5689
tp5690
sg1232
I0
sg1301
(lp5691
I00
aI00
aI00
aI00
aI00
asg1303
I1
sg1235
I0
sg1240
Nsg1304
(lp5692
g2916
ag14
(g56
g16
Ntp5693
Rp5694
(dp5695
g60
(I00
I00
I00
tp5696
sg62
g4177
sg64
g68
sg71
I00
sg20
Nsbag2935
ag2954
ag2973
asg1187
I3
sg1227
I1
sg1310
I10
sg1229
g5059
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p5697
(dp5698
g37
(lp5699
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p5700
tp5701
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5702
tp5703
a(g893
I440
g206
S'[t() for t in self.output_types])'
p5704
tp5705
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5706
tp5707
asbsg55
g5694
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5708
(dp5709
g37
(lp5710
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5711
tp5712
a(g893
I1880
g894
S'gradients.append(x[-1])'
p5713
tp5714
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p5715
tp5716
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5717
tp5718
asbsg211
(lp5719
g238
asg213
g14
(g308
g16
Ntp5720
Rp5721
(dp5722
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p5723
tp5724
Rp5725
tp5726
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5727
(dp5728
bsg55
g14
(g56
g16
Ntp5729
Rp5730
(dp5731
g60
(I00
I00
tp5732
sg62
g4177
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5733
(dp5734
g37
(lp5735
(g105
I76
g106
S'self.initTraining()'
p5736
tp5737
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p5738
tp5739
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5740
tp5741
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5742
tp5743
asbsg211
(lp5744
g182
asg213
g14
(g650
g16
Ntp5745
Rp5746
(dp5747
g654
g655
sg656
g1883
sg20
S'Elemwise{mul,no_inplace}'
p5748
sg229
g230
sg665
(dp5749
sg667
(S'multiply'
p5750
I2
I1
tp5751
sg669
(dp5752
sg671
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Examples:\n      Elemwise(add) # represents + on tensors (x + y)\n      Elemwise(add, {0 : 0}) # represents the += operation (x += y)\n      Elemwise(add, {0 : 1}) # represents += on the second argument (y += x)\n      Elemwise(mul)(rand(10, 5), rand(1, 5)) # the second input is completed\n        # along the first dimension to match the first input\n      Elemwise(true_div)(rand(10, 5), rand(10, 1)) # same but along the\n        # second dimension\n      Elemwise(int_div)(rand(1, 5), rand(10, 1)) # the output has size (10, 5)\n      Elemwise(log)(rand(3, 4, 5))\n    "
p5753
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5754
(dp5755
g37
(lp5756
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5757
tp5758
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5759
tp5760
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5761
tp5762
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5763
tp5764
asbsg55
g14
(g56
g16
Ntp5765
Rp5766
(dp5767
g60
(I00
I00
tp5768
sg62
S'float64'
p5769
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5770
(dp5771
g37
(lp5772
(g105
I76
g106
S'self.initTraining()'
p5773
tp5774
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p5775
tp5776
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p5777
tp5778
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5779
tp5780
asbsg211
(lp5781
g146
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5782
(dp5783
g37
(lp5784
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p5785
tp5786
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5787
tp5788
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5789
tp5790
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5791
tp5792
asbsg55
g14
(g56
g16
Ntp5793
Rp5794
(dp5795
g60
(I00
I00
tp5796
sg62
S'float64'
p5797
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g160
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g155
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp5798
Rp5799
(dp5800
g20
Nsg21
g14
(g28
g16
Ntp5801
Rp5802
(dp5803
g32
g14
(g148
g16
Ntp5804
Rp5805
(dp5806
g12
(lp5807
g844
ag14
(g28
g16
Ntp5808
Rp5809
(dp5810
g32
g14
(g148
g16
Ntp5811
Rp5812
(dp5813
g12
(lp5814
g14
(g28
g16
Ntp5815
Rp5816
(dp5817
g32
g14
(g148
g16
Ntp5818
Rp5819
(dp5820
g12
(lp5821
g125
asg34
(itheano.gof.utils
scratchpad
p5822
(dp5823
g37
(lp5824
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5825
tp5826
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5827
tp5828
a(g205
I533
g206
S'inplace=False)(input))'
p5829
tp5830
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5831
tp5832
asbsg211
(lp5833
g5816
asg213
g14
(g214
g16
Ntp5834
Rp5835
(dp5836
g218
(lp5837
sg220
(lp5838
sg222
(lp5839
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp5840
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5841
(dp5842
bsg55
g14
(g56
g16
Ntp5843
Rp5844
(dp5845
g60
(I01
I01
tp5846
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp5847
Rp5848
(dp5849
g32
g14
(g148
g16
Ntp5850
Rp5851
(dp5852
g12
(lp5853
g2921
asg34
(itheano.gof.utils
scratchpad
p5854
(dp5855
g37
(lp5856
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5857
tp5858
a(g893
I1880
g894
S'gradients.append(x[-1])'
p5859
tp5860
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p5861
tp5862
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5863
tp5864
asbsg211
(lp5865
g5848
asg213
g14
(g308
g16
Ntp5866
Rp5867
(dp5868
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p5869
tp5870
Rp5871
tp5872
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5873
(dp5874
bsg55
g14
(g56
g16
Ntp5875
Rp5876
(dp5877
g60
(I00
I00
tp5878
sg62
g2938
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5879
(dp5880
g37
(lp5881
(g105
I76
g106
S'self.initTraining()'
p5882
tp5883
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p5884
tp5885
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5886
tp5887
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5888
tp5889
asbsg211
(lp5890
g5809
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5891
(dp5892
g37
(lp5893
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5894
tp5895
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5896
tp5897
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5898
tp5899
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5900
tp5901
asbsg55
g14
(g56
g16
Ntp5902
Rp5903
(dp5904
g60
(I00
I00
tp5905
sg62
S'float64'
p5906
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p5907
(dp5908
g37
(lp5909
(g105
I76
g106
S'self.initTraining()'
p5910
tp5911
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p5912
tp5913
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p5914
tp5915
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5916
tp5917
asbsg211
(lp5918
g5802
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5919
(dp5920
g37
(lp5921
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p5922
tp5923
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5924
tp5925
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p5926
tp5927
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p5928
tp5929
asbsg55
g14
(g56
g16
Ntp5930
Rp5931
(dp5932
g60
(I00
I00
tp5933
sg62
S'float64'
p5934
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g847
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g844
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp5935
Rp5936
(dp5937
g20
Nsg21
g14
(g28
g16
Ntp5938
Rp5939
(dp5940
g32
g14
(g148
g16
Ntp5941
Rp5942
(dp5943
g12
(lp5944
g864
ag14
(g28
g16
Ntp5945
Rp5946
(dp5947
g32
g14
(g148
g16
Ntp5948
Rp5949
(dp5950
g12
(lp5951
g14
(g28
g16
Ntp5952
Rp5953
(dp5954
g32
g14
(g148
g16
Ntp5955
Rp5956
(dp5957
g12
(lp5958
g125
asg34
(itheano.gof.utils
scratchpad
p5959
(dp5960
g37
(lp5961
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p5962
tp5963
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p5964
tp5965
a(g205
I533
g206
S'inplace=False)(input))'
p5966
tp5967
a(g202
I401
g52
S'self.add_tag_trace(node)'
p5968
tp5969
asbsg211
(lp5970
g5953
asg213
g14
(g214
g16
Ntp5971
Rp5972
(dp5973
g218
(lp5974
sg220
(lp5975
sg222
(lp5976
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp5977
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p5978
(dp5979
bsg55
g14
(g56
g16
Ntp5980
Rp5981
(dp5982
g60
(I01
I01
tp5983
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp5984
Rp5985
(dp5986
g32
g14
(g148
g16
Ntp5987
Rp5988
(dp5989
g12
(lp5990
g2940
asg34
(itheano.gof.utils
scratchpad
p5991
(dp5992
g37
(lp5993
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p5994
tp5995
a(g893
I1880
g894
S'gradients.append(x[-1])'
p5996
tp5997
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p5998
tp5999
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6000
tp6001
asbsg211
(lp6002
g5985
asg213
g14
(g308
g16
Ntp6003
Rp6004
(dp6005
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p6006
tp6007
Rp6008
tp6009
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6010
(dp6011
bsg55
g14
(g56
g16
Ntp6012
Rp6013
(dp6014
g60
(I00
I00
tp6015
sg62
g2957
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6016
(dp6017
g37
(lp6018
(g105
I76
g106
S'self.initTraining()'
p6019
tp6020
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p6021
tp6022
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p6023
tp6024
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6025
tp6026
asbsg211
(lp6027
g5946
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6028
(dp6029
g37
(lp6030
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p6031
tp6032
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p6033
tp6034
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6035
tp6036
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6037
tp6038
asbsg55
g14
(g56
g16
Ntp6039
Rp6040
(dp6041
g60
(I00
I00
tp6042
sg62
S'float64'
p6043
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6044
(dp6045
g37
(lp6046
(g105
I76
g106
S'self.initTraining()'
p6047
tp6048
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p6049
tp6050
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p6051
tp6052
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6053
tp6054
asbsg211
(lp6055
g5939
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6056
(dp6057
g37
(lp6058
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p6059
tp6060
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p6061
tp6062
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p6063
tp6064
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6065
tp6066
asbsg55
g14
(g56
g16
Ntp6067
Rp6068
(dp6069
g60
(I00
I00
tp6070
sg62
S'float64'
p6071
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g867
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g864
sg72
I01
sg73
Nsbasg211
g14
(ctheano.compile.io
SymbolicOutput
p6072
g16
Ntp6073
Rp6074
(dp6075
g27
g1709
sg23
I00
sbsg1240
g1196
stp6076
Rp6077
(lp6078
g14
(g158
g16
Ntp6079
Rp6080
(dp6081
S'provided'
p6082
I1
sg20
NsS'required'
p6083
I01
sg162
(lp6084
Nasg25
I00
sg24
I00
sg173
I00
sg55
g58
sg73
Nsbag14
(g158
g16
Ntp6085
Rp6086
(dp6087
g6082
I1
sg20
Nsg6083
I01
sg162
(lp6088
Nasg25
I00
sg24
I00
sg173
I00
sg55
g93
sg73
Nsbag14
(g158
g16
Ntp6089
Rp6090
(dp6091
g6082
I1
sg20
Nsg6083
I01
sg162
(lp6092
Nasg25
I00
sg24
I00
sg173
I00
sg55
g118
sg73
Nsbag14
(g158
g16
Ntp6093
Rp6094
(dp6095
g6082
I1
sg20
Nsg6083
I01
sg162
(lp6096
Nasg25
I00
sg24
I00
sg173
I00
sg55
g140
sg73
Nsbag14
(g158
g16
Ntp6097
Rp6098
(dp6099
g6082
I0
sg20
Nsg6083
I00
sg162
g163
sg25
I01
sg24
I00
sg173
I00
sg55
g175
sg73
Nsbag14
(g158
g16
Ntp6100
Rp6101
(dp6102
g6082
I0
sg20
Nsg6083
I00
sg162
g849
sg25
I01
sg24
I00
sg173
I00
sg55
g857
sg73
Nsbag14
(g158
g16
Ntp6103
Rp6104
(dp6105
g6082
I0
sg20
Nsg6083
I00
sg162
g869
sg25
I01
sg24
I00
sg173
I00
sg55
g877
sg73
Nsba(lp6106
NaNaNaNag169
ag852
ag872
atp6107
Rp6108
sS'n'
p6109
I2
sS'_RNN__u'
p6110
g78
sS'W_out'
p6111
g864
sS'_RNN__run'
p6112
g5
(g6
((dp6113
g8
Nsg9
g10
sg11
I00
sg12
(lp6114
g14
(g15
g16
Ntp6115
Rp6116
(dp6117
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g78
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp6118
Rp6119
(dp6120
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g30
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp6121
Rp6122
(dp6123
g20
Nsg21
Nsg22
g160
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g155
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp6124
Rp6125
(dp6126
g20
Nsg21
Nsg22
g847
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g844
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp6127
Rp6128
(dp6129
g20
Nsg21
Nsg22
g867
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g864
sg72
I01
sg73
Nsbasg211
(lp6130
g14
(g6072
g16
Ntp6131
Rp6132
(dp6133
g27
g14
(g28
g16
Ntp6134
Rp6135
(dp6136
g32
g14
(g148
g16
Ntp6137
Rp6138
(dp6139
g12
(lp6140
g14
(g28
g16
Ntp6141
Rp6142
(dp6143
g32
g14
(g148
g16
Ntp6144
Rp6145
(dp6146
g12
(lp6147
g14
(g28
g16
Ntp6148
Rp6149
(dp6150
g32
g14
(g148
g16
Ntp6151
Rp6152
(dp6153
g12
(lp6154
g14
(g28
g16
Ntp6155
Rp6156
(dp6157
g32
g14
(g148
g16
Ntp6158
Rp6159
(dp6160
g12
(lp6161
g14
(g28
g16
Ntp6162
Rp6163
(dp6164
g32
g14
(g148
g16
Ntp6165
Rp6166
(dp6167
g12
(lp6168
g78
asg34
(itheano.gof.utils
scratchpad
p6169
(dp6170
g37
g295
sbsg211
(lp6171
g6163
asg213
g310
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6172
(dp6173
bsg55
g330
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6174
(dp6175
g37
g335
sbsg211
(lp6176
g6156
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6177
(dp6178
g37
g351
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6179
(dp6180
g37
g372
sbsg211
(lp6181
g6149
asg213
g383
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6182
(dp6183
bsg55
g392
sg20
Nsbag14
(g28
g16
Ntp6184
Rp6185
(dp6186
g32
g14
(g148
g16
Ntp6187
Rp6188
(dp6189
g12
(lp6190
g6163
ag14
(g401
g16
Ntp6191
Rp6192
(dp6193
g32
g14
(g148
g16
Ntp6194
Rp6195
(dp6196
g12
(lp6197
g6149
asg34
(itheano.gof.utils
scratchpad
p6198
(dp6199
g37
g411
sbsg211
(lp6200
g6192
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6201
(dp6202
bsg55
g432
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6203
(dp6204
g37
g436
sbsg211
(lp6205
g6185
asg213
g447
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6206
(dp6207
bsg55
g458
sg20
Nsbag14
(g28
g16
Ntp6208
Rp6209
(dp6210
g32
g14
(g148
g16
Ntp6211
Rp6212
(dp6213
g12
(lp6214
g14
(g28
g16
Ntp6215
Rp6216
(dp6217
g32
g14
(g148
g16
Ntp6218
Rp6219
(dp6220
g12
(lp6221
g477
ag14
(g28
g16
Ntp6222
Rp6223
(dp6224
g32
g14
(g148
g16
Ntp6225
Rp6226
(dp6227
g12
(lp6228
g6149
ag14
(g28
g16
Ntp6229
Rp6230
(dp6231
g32
g14
(g148
g16
Ntp6232
Rp6233
(dp6234
g12
(lp6235
g14
(g28
g16
Ntp6236
Rp6237
(dp6238
g32
g14
(g148
g16
Ntp6239
Rp6240
(dp6241
g12
(lp6242
g14
(g28
g16
Ntp6243
Rp6244
(dp6245
g32
g14
(g148
g16
Ntp6246
Rp6247
(dp6248
g12
(lp6249
g14
(g28
g16
Ntp6250
Rp6251
(dp6252
g32
g14
(g148
g16
Ntp6253
Rp6254
(dp6255
g12
(lp6256
g30
asg34
(itheano.gof.utils
scratchpad
p6257
(dp6258
g37
g530
sbsg211
(lp6259
g6251
asg213
g542
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6260
(dp6261
bsg55
g551
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6262
(dp6263
g37
g556
sbsg211
(lp6264
g6244
asg213
g569
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6265
(dp6266
g37
g575
sbsg55
g585
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6267
(dp6268
g37
g590
sbsg211
(lp6269
g6237
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6270
(dp6271
g37
g604
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6272
(dp6273
g37
g615
sbsg211
(lp6274
g6230
asg213
g626
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6275
(dp6276
bsg55
g635
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6277
(dp6278
g37
g639
sbsg211
(lp6279
g6223
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6280
(dp6281
g37
g675
sbsg55
g685
sg20
Nsbag14
(g28
g16
Ntp6282
Rp6283
(dp6284
g32
g14
(g148
g16
Ntp6285
Rp6286
(dp6287
g12
(lp6288
g14
(g28
g16
Ntp6289
Rp6290
(dp6291
g32
g14
(g148
g16
Ntp6292
Rp6293
(dp6294
g12
(lp6295
g6244
asg34
(itheano.gof.utils
scratchpad
p6296
(dp6297
g37
g704
sbsg211
(lp6298
g6290
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6299
(dp6300
g37
g716
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6301
(dp6302
g37
g727
sbsg211
(lp6303
g6283
asg213
g738
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6304
(dp6305
bsg55
g747
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6306
(dp6307
g37
g751
sbsg211
(lp6308
g6216
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6309
(dp6310
g37
g768
sbsg55
g778
sg20
Nsbag6244
ag14
(g401
g16
Ntp6311
Rp6312
(dp6313
g32
g14
(g148
g16
Ntp6314
Rp6315
(dp6316
g12
(lp6317
g6230
asg34
(itheano.gof.utils
scratchpad
p6318
(dp6319
g37
g790
sbsg211
(lp6320
g6312
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6321
(dp6322
bsg55
g803
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6323
(dp6324
g37
g807
sbsg211
(lp6325
g6209
asg213
g821
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6326
(dp6327
g37
g834
sbsg55
g778
sg20
Nsbag6149
ag155
ag844
ag864
asg34
(itheano.gof.utils
scratchpad
p6328
(dp6329
g37
g1522
sbsg211
(lp6330
g6142
ag14
(g28
g16
Ntp6331
Rp6332
(dp6333
g32
g6145
sg33
I1
sg34
(itheano.gof.utils
scratchpad
p6334
(dp6335
g37
g1548
sbsg55
g1307
sg20
Nsbasg213
g921
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6336
(dp6337
g37
g1537
sbsg55
g915
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6338
(dp6339
g37
(lp6340
(g298
I1044
g299
S'offsets)'
p6341
tp6342
a(g298
I1029
S'remove_dimensions'
p6343
S'out_ls.append(out[offsets[idx]:])'
p6344
tp6345
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p6346
tp6347
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6348
tp6349
asbsg211
(lp6350
g6135
asg213
g14
(g308
g16
Ntp6351
Rp6352
(dp6353
g312
(g313
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p6354
tp6355
Rp6356
NNtp6357
Rp6358
tp6359
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6360
(dp6361
bsg55
g14
(g56
g16
Ntp6362
Rp6363
(dp6364
g60
(I00
I00
tp6365
sg62
g918
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg23
I00
sbag14
(g6072
g16
Ntp6366
Rp6367
(dp6368
g27
g6332
sg23
I00
sbasg1240
g1196
stp6369
Rp6370
(lp6371
g14
(g158
g16
Ntp6372
Rp6373
(dp6374
g6082
I1
sg20
Nsg6083
I01
sg162
(lp6375
Nasg25
I00
sg24
I00
sg173
I00
sg55
g93
sg73
Nsbag14
(g158
g16
Ntp6376
Rp6377
(dp6378
g6082
I1
sg20
Nsg6083
I01
sg162
(lp6379
Nasg25
I00
sg24
I00
sg173
I00
sg55
g58
sg73
Nsbag14
(g158
g16
Ntp6380
Rp6381
(dp6382
g6082
I0
sg20
Nsg6083
I00
sg162
g163
sg25
I01
sg24
I00
sg173
I00
sg55
g175
sg73
Nsbag14
(g158
g16
Ntp6383
Rp6384
(dp6385
g6082
I0
sg20
Nsg6083
I00
sg162
g849
sg25
I01
sg24
I00
sg173
I00
sg55
g857
sg73
Nsbag14
(g158
g16
Ntp6386
Rp6387
(dp6388
g6082
I0
sg20
Nsg6083
I00
sg162
g869
sg25
I01
sg24
I00
sg173
I00
sg55
g877
sg73
Nsba(lp6389
NaNag169
ag852
ag872
atp6390
Rp6391
sS'W'
p6392
g844
sS'_RNN__h0'
p6393
g30
sS'_RNN__y'
p6394
g14
(g28
g16
Ntp6395
Rp6396
(dp6397
g32
g14
(g148
g16
Ntp6398
Rp6399
(dp6400
g12
(lp6401
g14
(g28
g16
Ntp6402
Rp6403
(dp6404
g32
g14
(g148
g16
Ntp6405
Rp6406
(dp6407
g12
(lp6408
g14
(g28
g16
Ntp6409
Rp6410
(dp6411
g32
g14
(g148
g16
Ntp6412
Rp6413
(dp6414
g12
(lp6415
g14
(g28
g16
Ntp6416
Rp6417
(dp6418
g32
g14
(g148
g16
Ntp6419
Rp6420
(dp6421
g12
(lp6422
g78
asg34
(itheano.gof.utils
scratchpad
p6423
(dp6424
g37
g295
sbsg211
(lp6425
g6417
asg213
g310
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6426
(dp6427
bsg55
g330
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6428
(dp6429
g37
g335
sbsg211
(lp6430
g6410
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6431
(dp6432
g37
g351
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6433
(dp6434
g37
g372
sbsg211
(lp6435
g6403
asg213
g383
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6436
(dp6437
bsg55
g392
sg20
Nsbag14
(g28
g16
Ntp6438
Rp6439
(dp6440
g32
g14
(g148
g16
Ntp6441
Rp6442
(dp6443
g12
(lp6444
g6417
ag14
(g401
g16
Ntp6445
Rp6446
(dp6447
g32
g14
(g148
g16
Ntp6448
Rp6449
(dp6450
g12
(lp6451
g6403
asg34
(itheano.gof.utils
scratchpad
p6452
(dp6453
g37
g411
sbsg211
(lp6454
g6446
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6455
(dp6456
bsg55
g432
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6457
(dp6458
g37
g436
sbsg211
(lp6459
g6439
asg213
g447
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6460
(dp6461
bsg55
g458
sg20
Nsbag14
(g28
g16
Ntp6462
Rp6463
(dp6464
g32
g14
(g148
g16
Ntp6465
Rp6466
(dp6467
g12
(lp6468
g14
(g28
g16
Ntp6469
Rp6470
(dp6471
g32
g14
(g148
g16
Ntp6472
Rp6473
(dp6474
g12
(lp6475
g477
ag14
(g28
g16
Ntp6476
Rp6477
(dp6478
g32
g14
(g148
g16
Ntp6479
Rp6480
(dp6481
g12
(lp6482
g6403
ag14
(g28
g16
Ntp6483
Rp6484
(dp6485
g32
g14
(g148
g16
Ntp6486
Rp6487
(dp6488
g12
(lp6489
g14
(g28
g16
Ntp6490
Rp6491
(dp6492
g32
g14
(g148
g16
Ntp6493
Rp6494
(dp6495
g12
(lp6496
g14
(g28
g16
Ntp6497
Rp6498
(dp6499
g32
g14
(g148
g16
Ntp6500
Rp6501
(dp6502
g12
(lp6503
g14
(g28
g16
Ntp6504
Rp6505
(dp6506
g32
g14
(g148
g16
Ntp6507
Rp6508
(dp6509
g12
(lp6510
g30
asg34
(itheano.gof.utils
scratchpad
p6511
(dp6512
g37
g530
sbsg211
(lp6513
g6505
asg213
g542
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6514
(dp6515
bsg55
g551
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6516
(dp6517
g37
g556
sbsg211
(lp6518
g6498
asg213
g569
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6519
(dp6520
g37
g575
sbsg55
g585
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6521
(dp6522
g37
g590
sbsg211
(lp6523
g6491
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6524
(dp6525
g37
g604
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6526
(dp6527
g37
g615
sbsg211
(lp6528
g6484
asg213
g626
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6529
(dp6530
bsg55
g635
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6531
(dp6532
g37
g639
sbsg211
(lp6533
g6477
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6534
(dp6535
g37
g675
sbsg55
g685
sg20
Nsbag14
(g28
g16
Ntp6536
Rp6537
(dp6538
g32
g14
(g148
g16
Ntp6539
Rp6540
(dp6541
g12
(lp6542
g14
(g28
g16
Ntp6543
Rp6544
(dp6545
g32
g14
(g148
g16
Ntp6546
Rp6547
(dp6548
g12
(lp6549
g6498
asg34
(itheano.gof.utils
scratchpad
p6550
(dp6551
g37
g704
sbsg211
(lp6552
g6544
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6553
(dp6554
g37
g716
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6555
(dp6556
g37
g727
sbsg211
(lp6557
g6537
asg213
g738
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6558
(dp6559
bsg55
g747
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6560
(dp6561
g37
g751
sbsg211
(lp6562
g6470
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6563
(dp6564
g37
g768
sbsg55
g778
sg20
Nsbag6498
ag14
(g401
g16
Ntp6565
Rp6566
(dp6567
g32
g14
(g148
g16
Ntp6568
Rp6569
(dp6570
g12
(lp6571
g6484
asg34
(itheano.gof.utils
scratchpad
p6572
(dp6573
g37
g790
sbsg211
(lp6574
g6566
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6575
(dp6576
bsg55
g803
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6577
(dp6578
g37
g807
sbsg211
(lp6579
g6463
asg213
g821
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6580
(dp6581
g37
g834
sbsg55
g778
sg20
Nsbag6403
ag155
ag844
ag864
asg34
(itheano.gof.utils
scratchpad
p6582
(dp6583
g37
g1522
sbsg211
(lp6584
g14
(g28
g16
Ntp6585
Rp6586
(dp6587
g32
g6399
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p6588
(dp6589
g37
g1537
sbsg55
g915
sg20
Nsbag6396
asg213
g921
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p6590
(dp6591
g37
g1548
sbsg55
g1307
sg20
NsbsS'nout'
p6592
I1
sS'W_in'
p6593
g155
sba(irnn
RNN
p6594
(dp6595
g3
I1
sg4
g5
(g6
((dp6596
g8
Nsg9
g10
sg11
I00
sg12
(lp6597
g14
(g15
g16
Ntp6598
Rp6599
(dp6600
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp6601
Rp6602
(dp6603
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p6604
(dp6605
g37
(lp6606
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p6607
tp6608
a(g43
I34
g44
S'h0 = self.__h0 = TT.vector()'
p6609
tp6610
a(g47
I744
g48
S'return type(name)'
p6611
tp6612
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6613
tp6614
asbsg55
g14
(g56
g16
Ntp6615
Rp6616
(dp6617
g60
(I00
tp6618
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp6619
Rp6620
(dp6621
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp6622
Rp6623
(dp6624
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p6625
(dp6626
g37
(lp6627
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p6628
tp6629
a(g43
I32
g44
S'u = self.__u = TT.matrix()'
p6630
tp6631
a(g47
I771
g87
S'return type(name)'
p6632
tp6633
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6634
tp6635
asbsg55
g14
(g56
g16
Ntp6636
Rp6637
(dp6638
g60
(I00
I00
tp6639
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp6640
Rp6641
(dp6642
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp6643
Rp6644
(dp6645
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p6646
(dp6647
g37
(lp6648
(g105
I76
g106
S'self.initTraining()'
p6649
tp6650
a(g109
I88
g110
S't = TT.matrix()'
p6651
tp6652
a(g47
I771
g87
S'return type(name)'
p6653
tp6654
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6655
tp6656
asbsg55
g14
(g56
g16
Ntp6657
Rp6658
(dp6659
g60
(I00
I00
tp6660
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp6661
Rp6662
(dp6663
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp6664
Rp6665
(dp6666
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p6667
(dp6668
g37
(lp6669
(g105
I76
g106
S'self.initTraining()'
p6670
tp6671
a(g109
I90
g110
S'lr = TT.scalar()'
p6672
tp6673
a(g47
I714
g134
S'return type(name)'
p6674
tp6675
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6676
tp6677
asbsg55
g14
(g56
g16
Ntp6678
Rp6679
(dp6680
g60
(tsg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp6681
Rp6682
(dp6683
g20
Nsg21
g14
(g28
g16
Ntp6684
Rp6685
(dp6686
g32
g14
(g148
g16
Ntp6687
Rp6688
(dp6689
g12
(lp6690
g14
(g153
g16
Ntp6691
Rp6692
(dp6693
g33
Nsg157
g14
(g158
g16
Ntp6694
Rp6695
(dp6696
g20
Nsg162
(lp6697
g164
(g165
(I0
tp6698
g167
tp6699
Rp6700
(I1
(I1
I2
tp6701
g68
I00
S'H#Q\xa4\xe4\x03\xe9\xbf\xf0\xb0\xe0\xd1\xaa\xe1\xb8?'
p6702
tp6703
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp6704
Rp6705
(dp6706
g60
(I00
I00
tp6707
sg62
S'float64'
p6708
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p6709
(dp6710
bsg32
Nsg55
g6705
sbag14
(g28
g16
Ntp6711
Rp6712
(dp6713
g32
g14
(g148
g16
Ntp6714
Rp6715
(dp6716
g12
(lp6717
g14
(g28
g16
Ntp6718
Rp6719
(dp6720
g32
g14
(g148
g16
Ntp6721
Rp6722
(dp6723
g12
(lp6724
g6665
asg34
(itheano.gof.utils
scratchpad
p6725
(dp6726
g37
(lp6727
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p6728
tp6729
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p6730
tp6731
a(g205
I533
g206
S'inplace=False)(input))'
p6732
tp6733
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6734
tp6735
asbsg211
(lp6736
g6719
asg213
g14
(g214
g16
Ntp6737
Rp6738
(dp6739
g218
(lp6740
sg220
(lp6741
sg222
(lp6742
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp6743
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6744
(dp6745
bsg55
g14
(g56
g16
Ntp6746
Rp6747
(dp6748
g60
(I01
I01
tp6749
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp6750
Rp6751
(dp6752
g32
g14
(g148
g16
Ntp6753
Rp6754
(dp6755
g12
(lp6756
g14
(g28
g16
Ntp6757
Rp6758
(dp6759
g32
g14
(g148
g16
Ntp6760
Rp6761
(dp6762
g12
(lp6763
g14
(g28
g16
Ntp6764
Rp6765
(dp6766
g32
g14
(g148
g16
Ntp6767
Rp6768
(dp6769
g12
(lp6770
g14
(g28
g16
Ntp6771
Rp6772
(dp6773
g32
g14
(g148
g16
Ntp6774
Rp6775
(dp6776
g12
(lp6777
g14
(g28
g16
Ntp6778
Rp6779
(dp6780
g32
g14
(g148
g16
Ntp6781
Rp6782
(dp6783
g12
(lp6784
g14
(g28
g16
Ntp6785
Rp6786
(dp6787
g32
g14
(g148
g16
Ntp6788
Rp6789
(dp6790
g12
(lp6791
g14
(g28
g16
Ntp6792
Rp6793
(dp6794
g32
g14
(g148
g16
Ntp6795
Rp6796
(dp6797
g12
(lp6798
g14
(g28
g16
Ntp6799
Rp6800
(dp6801
g32
g14
(g148
g16
Ntp6802
Rp6803
(dp6804
g12
(lp6805
g6623
asg34
(itheano.gof.utils
scratchpad
p6806
(dp6807
g37
(lp6808
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p6809
tp6810
a(g298
I505
g299
S"nw_seq = seq['input'][offset + k - mintap:]"
p6811
tp6812
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p6813
tp6814
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6815
tp6816
asbsg211
(lp6817
g6800
asg213
g14
(g308
g16
Ntp6818
Rp6819
(dp6820
g312
(g313
(g314
(g317
S'\x00\x00\x00\x00'
p6821
tp6822
Rp6823
NNtp6824
Rp6825
tp6826
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6827
(dp6828
bsg55
g14
(g56
g16
Ntp6829
Rp6830
(dp6831
g60
(I00
I00
tp6832
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6833
(dp6834
g37
(lp6835
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p6836
tp6837
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p6838
tp6839
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p6840
tp6841
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6842
tp6843
asbsg211
(lp6844
g6793
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6845
(dp6846
g37
(lp6847
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p6848
tp6849
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p6850
tp6851
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p6852
tp6853
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p6854
tp6855
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6856
(dp6857
g37
(lp6858
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p6859
tp6860
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p6861
tp6862
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p6863
tp6864
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6865
tp6866
asbsg211
(lp6867
g6786
asg213
g14
(g308
g16
Ntp6868
Rp6869
(dp6870
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p6871
tp6872
Rp6873
tp6874
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6875
(dp6876
bsg55
g14
(g56
g16
Ntp6877
Rp6878
(dp6879
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp6880
Rp6881
(dp6882
g32
g14
(g148
g16
Ntp6883
Rp6884
(dp6885
g12
(lp6886
g6800
ag14
(g401
g16
Ntp6887
Rp6888
(dp6889
g32
g14
(g148
g16
Ntp6890
Rp6891
(dp6892
g12
(lp6893
g6786
asg34
(itheano.gof.utils
scratchpad
p6894
(dp6895
g37
(lp6896
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p6897
tp6898
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p6899
tp6900
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p6901
tp6902
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6903
tp6904
asbsg211
(lp6905
g6888
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6906
(dp6907
bsg55
g14
(g430
g16
Ntp6908
Rp6909
(dp6910
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p6911
(dp6912
g37
(lp6913
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p6914
tp6915
a(g298
I546
g299
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p6916
tp6917
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p6918
tp6919
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6920
tp6921
asbsg211
(lp6922
g6881
asg213
g14
(g308
g16
Ntp6923
Rp6924
(dp6925
g312
(g313
(Ng14
(g430
g16
Ntp6926
Rp6927
(dp6928
g62
g364
sbNtp6929
Rp6930
tp6931
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p6932
(dp6933
bsg55
g14
(g56
g16
Ntp6934
Rp6935
(dp6936
g60
(I00
I00
tp6937
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp6938
Rp6939
(dp6940
g32
g14
(g148
g16
Ntp6941
Rp6942
(dp6943
g12
(lp6944
g14
(g28
g16
Ntp6945
Rp6946
(dp6947
g32
g14
(g148
g16
Ntp6948
Rp6949
(dp6950
g12
(lp6951
g477
ag14
(g28
g16
Ntp6952
Rp6953
(dp6954
g32
g14
(g148
g16
Ntp6955
Rp6956
(dp6957
g12
(lp6958
g6786
ag14
(g28
g16
Ntp6959
Rp6960
(dp6961
g32
g14
(g148
g16
Ntp6962
Rp6963
(dp6964
g12
(lp6965
g14
(g28
g16
Ntp6966
Rp6967
(dp6968
g32
g14
(g148
g16
Ntp6969
Rp6970
(dp6971
g12
(lp6972
g14
(g28
g16
Ntp6973
Rp6974
(dp6975
g32
g14
(g148
g16
Ntp6976
Rp6977
(dp6978
g12
(lp6979
g14
(g28
g16
Ntp6980
Rp6981
(dp6982
g32
g14
(g148
g16
Ntp6983
Rp6984
(dp6985
g12
(lp6986
g6602
asg34
(itheano.gof.utils
scratchpad
p6987
(dp6988
g37
(lp6989
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p6990
tp6991
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p6992
tp6993
a(g47
I3636
g535
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p6994
tp6995
a(g202
I401
g52
S'self.add_tag_trace(node)'
p6996
tp6997
asbsg211
(lp6998
g6981
asg213
g14
(g214
g16
Ntp6999
Rp7000
(dp7001
g218
(lp7002
sg220
(lp7003
I0
asg222
(lp7004
I0
asg224
g6618
sg225
I00
sg226
(g227
I0
tp7005
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7006
(dp7007
bsg55
g14
(g56
g16
Ntp7008
Rp7009
(dp7010
g60
(I01
I00
tp7011
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7012
(dp7013
g37
(lp7014
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7015
tp7016
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p7017
tp7018
a(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p7019
tp7020
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7021
tp7022
asbsg211
(lp7023
g6974
asg213
g14
(g567
g16
Ntp7024
Rp7025
(dp7026
g229
g230
sg571
(dp7027
I0
I00
ssbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7028
(dp7029
g37
(lp7030
(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p7031
tp7032
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7033
tp7034
a(g47
I3284
g206
S'return Apply(self, [x], [t()])'
p7035
tp7036
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7037
tp7038
asbsg55
g14
(g56
g16
Ntp7039
Rp7040
(dp7041
g60
(I00
I00
tp7042
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7043
(dp7044
g37
(lp7045
(g298
I620
g299
S'actual_n_steps'
p7046
tp7047
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p7048
tp7049
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7050
tp7051
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7052
tp7053
asbsg211
(lp7054
g6967
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7055
(dp7056
g37
(lp7057
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7058
tp7059
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7060
tp7061
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p7062
tp7063
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7064
tp7065
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7066
(dp7067
g37
(lp7068
(g298
I620
g299
S'actual_n_steps'
p7069
tp7070
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p7071
tp7072
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7073
tp7074
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7075
tp7076
asbsg211
(lp7077
g6960
asg213
g14
(g308
g16
Ntp7078
Rp7079
(dp7080
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p7081
tp7082
Rp7083
tp7084
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7085
(dp7086
bsg55
g14
(g56
g16
Ntp7087
Rp7088
(dp7089
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7090
(dp7091
g37
(lp7092
(g298
I620
g299
S'actual_n_steps'
p7093
tp7094
a(g593
I364
g594
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p7095
tp7096
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p7097
tp7098
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7099
tp7100
asbsg211
(lp7101
g6953
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7102
(dp7103
g37
(lp7104
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p7105
tp7106
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7107
tp7108
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7109
tp7110
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7111
tp7112
asbsg55
g14
(g56
g16
Ntp7113
Rp7114
(dp7115
g60
(tsg62
S'int64'
p7116
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7117
Rp7118
(dp7119
g32
g14
(g148
g16
Ntp7120
Rp7121
(dp7122
g12
(lp7123
g14
(g28
g16
Ntp7124
Rp7125
(dp7126
g32
g14
(g148
g16
Ntp7127
Rp7128
(dp7129
g12
(lp7130
g6974
asg34
(itheano.gof.utils
scratchpad
p7131
(dp7132
g37
(lp7133
(g298
I620
g299
S'actual_n_steps'
p7134
tp7135
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p7136
tp7137
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7138
tp7139
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7140
tp7141
asbsg211
(lp7142
g7125
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7143
(dp7144
g37
(lp7145
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7146
tp7147
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7148
tp7149
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p7150
tp7151
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7152
tp7153
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7154
(dp7155
g37
(lp7156
(g298
I620
g299
S'actual_n_steps'
p7157
tp7158
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p7159
tp7160
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7161
tp7162
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7163
tp7164
asbsg211
(lp7165
g7118
asg213
g14
(g308
g16
Ntp7166
Rp7167
(dp7168
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p7169
tp7170
Rp7171
tp7172
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7173
(dp7174
bsg55
g14
(g56
g16
Ntp7175
Rp7176
(dp7177
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7178
(dp7179
g37
(lp7180
(g593
I366
g594
S'dtype=tensor_var.dtype)'
p7181
tp7182
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p7183
tp7184
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p7185
tp7186
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7187
tp7188
asbsg211
(lp7189
g6946
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7190
(dp7191
g37
(lp7192
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p7193
tp7194
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7195
tp7196
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p7197
tp7198
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7199
tp7200
asbsg55
g14
(g56
g16
Ntp7201
Rp7202
(dp7203
g60
(I00
I00
tp7204
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag6974
ag14
(g401
g16
Ntp7205
Rp7206
(dp7207
g32
g14
(g148
g16
Ntp7208
Rp7209
(dp7210
g12
(lp7211
g6960
asg34
(itheano.gof.utils
scratchpad
p7212
(dp7213
g37
(lp7214
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p7215
tp7216
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p7217
tp7218
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p7219
tp7220
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7221
tp7222
asbsg211
(lp7223
g7206
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7224
(dp7225
bsg55
g14
(g430
g16
Ntp7226
Rp7227
(dp7228
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7229
(dp7230
g37
(lp7231
(g593
I367
g594
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p7232
tp7233
a(g412
I904
g810
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p7234
tp7235
a(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p7236
tp7237
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7238
tp7239
asbsg211
(lp7240
g6939
asg213
g14
(g819
g16
Ntp7241
Rp7242
(dp7243
g312
(lp7244
g313
(Ng14
(g430
g16
Ntp7245
Rp7246
(dp7247
g62
g364
sbNtp7248
Rp7249
asg829
(lp7250
sg229
g230
sg831
I01
sg225
I00
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7251
(dp7252
g37
(lp7253
(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p7254
tp7255
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7256
tp7257
a(g412
I1109
g206
S'[x.type()])'
p7258
tp7259
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7260
tp7261
asbsg55
g7202
sg20
Nsbag6786
ag6692
ag14
(g153
g16
Ntp7262
Rp7263
(dp7264
g33
Nsg157
g14
(g158
g16
Ntp7265
Rp7266
(dp7267
g20
Nsg162
(lp7268
g164
(g165
(I0
tp7269
g167
tp7270
Rp7271
(I1
(I2
I2
tp7272
g68
I00
S"\xc06\x80#2\xe4\xc3\xbf\x84y\xa6\xf4\xb4&\xdf\xbf\xfaeWi\xc0p\xe9?\x88\xc1>'\xd92\xe5?"
p7273
tp7274
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp7275
Rp7276
(dp7277
g60
(I00
I00
tp7278
sg62
S'float64'
p7279
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p7280
(dp7281
bsg32
Nsg55
g7276
sbag14
(g153
g16
Ntp7282
Rp7283
(dp7284
g33
Nsg157
g14
(g158
g16
Ntp7285
Rp7286
(dp7287
g20
Nsg162
(lp7288
g164
(g165
(I0
tp7289
g167
tp7290
Rp7291
(I1
(I2
I1
tp7292
g68
I00
S'\x9a1:\x97(m\xef\xbf\xaa\xb4\x0c\xfaX\xfc\xe2\xbf'
p7293
tp7294
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp7295
Rp7296
(dp7297
g60
(I00
I00
tp7298
sg62
S'float64'
p7299
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p7300
(dp7301
bsg32
Nsg55
g7296
sbasg34
(itheano.gof.utils
scratchpad
p7302
(dp7303
g37
(lp7304
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p7305
tp7306
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7307
tp7308
a(g893
I1400
g894
S'outs = self(*inputs)'
p7309
tp7310
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7311
tp7312
asbsg211
(lp7313
g14
(g28
g16
Ntp7314
Rp7315
(dp7316
g32
g6782
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p7317
(dp7318
g37
(lp7319
(g893
I1400
g894
S'outs = self(*inputs)'
p7320
tp7321
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7322
tp7323
a(g893
I440
g206
S'[t() for t in self.output_types])'
p7324
tp7325
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7326
tp7327
asbsg55
g14
(g56
g16
Ntp7328
Rp7329
(dp7330
g60
(I00
I00
tp7331
sg62
S'float64'
p7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag6779
asg213
g14
(g919
g16
Ntp7333
Rp7334
(dp7335
g8
I00
sg12
(lp7336
g14
(g28
g16
Ntp7337
Rp7338
(dp7339
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p7340
(dp7341
g37
(lp7342
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p7343
tp7344
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7345
tp7346
a(g298
I465
g299
S'nw_slice = _seq_val_slice.type()'
p7347
tp7348
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7349
tp7350
asbsg55
g14
(g56
g16
Ntp7351
Rp7352
(dp7353
g60
(I00
tp7354
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7355
Rp7356
(dp7357
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p7358
(dp7359
g37
(lp7360
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7361
tp7362
a(g298
I592
g299
S"arg = safe_new(init_out['initial'])"
p7363
tp7364
a(g593
I75
g952
S'nw_x = x.type()'
p7365
tp7366
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7367
tp7368
asbsg55
g6616
sg20
Nsbag14
(g28
g16
Ntp7369
Rp7370
(dp7371
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p7372
(dp7373
g37
(lp7374
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7375
tp7376
a(g298
I913
g299
S'not arg.update)]'
p7377
tp7378
a(g593
I75
g952
S'nw_x = x.type()'
p7379
tp7380
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7381
tp7382
asbsg55
g6705
sg20
Nsbag14
(g28
g16
Ntp7383
Rp7384
(dp7385
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p7386
(dp7387
g37
(lp7388
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7389
tp7390
a(g298
I913
g299
S'not arg.update)]'
p7391
tp7392
a(g593
I75
g952
S'nw_x = x.type()'
p7393
tp7394
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7395
tp7396
asbsg55
g7276
sg20
Nsbag14
(g28
g16
Ntp7397
Rp7398
(dp7399
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p7400
(dp7401
g37
(lp7402
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7403
tp7404
a(g298
I913
g299
S'not arg.update)]'
p7405
tp7406
a(g593
I75
g952
S'nw_x = x.type()'
p7407
tp7408
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7409
tp7410
asbsg55
g7296
sg20
Nsbasg999
(lp7411
(lp7412
I-1
aasg1002
I0
sg1003
I-1001547823
sg211
(lp7413
g14
(g28
g16
Ntp7414
Rp7415
(dp7416
g32
g14
(g148
g16
Ntp7417
Rp7418
(dp7419
g12
(lp7420
g14
(g28
g16
Ntp7421
Rp7422
(dp7423
g32
g14
(g148
g16
Ntp7424
Rp7425
(dp7426
g12
(lp7427
g14
(g28
g16
Ntp7428
Rp7429
(dp7430
g32
g14
(g148
g16
Ntp7431
Rp7432
(dp7433
g12
(lp7434
g7338
ag7370
asg34
(itheano.gof.utils
scratchpad
p7435
(dp7436
g37
(lp7437
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p7438
tp7439
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p7440
tp7441
a(g47
I4732
g1035
S'return _dot(a, b)'
p7442
tp7443
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7444
tp7445
asbsg211
(lp7446
g7429
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7447
(dp7448
bsg55
g14
(g56
g16
Ntp7449
Rp7450
(dp7451
g60
(I00
tp7452
sg62
S'float64'
p7453
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7454
Rp7455
(dp7456
g32
g14
(g148
g16
Ntp7457
Rp7458
(dp7459
g12
(lp7460
g7356
ag7384
asg34
(itheano.gof.utils
scratchpad
p7461
(dp7462
g37
(lp7463
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p7464
tp7465
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p7466
tp7467
a(g47
I4732
g1035
S'return _dot(a, b)'
p7468
tp7469
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7470
tp7471
asbsg211
(lp7472
g7455
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7473
(dp7474
bsg55
g14
(g56
g16
Ntp7475
Rp7476
(dp7477
g60
(I00
tp7478
sg62
S'float64'
p7479
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7480
(dp7481
g37
(lp7482
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p7483
tp7484
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p7485
tp7486
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p7487
tp7488
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7489
tp7490
asbsg211
(lp7491
g7422
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7492
(dp7493
g37
(lp7494
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p7495
tp7496
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7497
tp7498
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7499
tp7500
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7501
tp7502
asbsg55
g14
(g56
g16
Ntp7503
Rp7504
(dp7505
g60
(I00
tp7506
sg62
S'float64'
p7507
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7508
(dp7509
g37
(lp7510
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7511
tp7512
a(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p7513
tp7514
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p7515
tp7516
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7517
tp7518
asbsg211
(lp7519
g7415
asg213
g1119
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7520
(dp7521
g37
(lp7522
(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p7523
tp7524
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7525
tp7526
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7527
tp7528
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7529
tp7530
asbsg55
g14
(g56
g16
Ntp7531
Rp7532
(dp7533
g60
(I00
tp7534
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7535
Rp7536
(dp7537
g32
g14
(g148
g16
Ntp7538
Rp7539
(dp7540
g12
(lp7541
g7415
ag7398
asg34
(itheano.gof.utils
scratchpad
p7542
(dp7543
g37
(lp7544
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p7545
tp7546
a(g1031
I28
g1032
S'y_t = TT.dot(h_t, W_out)'
p7547
tp7548
a(g47
I4732
g1035
S'return _dot(a, b)'
p7549
tp7550
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7551
tp7552
asbsg211
(lp7553
g7536
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7554
(dp7555
bsg55
g14
(g56
g16
Ntp7556
Rp7557
(dp7558
g60
(I00
tp7559
sg62
S'float64'
p7560
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I2
sg1174
(lp7561
I00
asg665
g1176
((lp7562
tp7563
Rp7564
sg1180
I1
sg1181
I1
sg1182
(lp7565
g314
(g317
S'\xff\xff\xff\xff'
p7566
tp7567
Rp7568
aI0
asg1187
I1
sg1188
I3
sg1189
I00
sg1190
I-1
sg1191
I1
sg20
g1192
sg1193
g1196
sg1221
g1176
((lp7569
(lp7570
g999
ag7411
aa(lp7571
g1191
aI1
aa(lp7572
g1002
aI0
aa(lp7573
g1227
aI0
aa(lp7574
g1229
a(lp7575
aa(lp7576
g1232
aI0
aa(lp7577
g1187
aI1
aa(lp7578
g1235
aI0
aa(lp7579
g1180
aI1
aa(lp7580
g1190
aI-1
aa(lp7581
g20
ag1192
aa(lp7582
g1240
aNaa(lp7583
g665
ag7564
aa(lp7584
g1243
aI00
aa(lp7585
g1189
aI00
aa(lp7586
g8
aI00
aatp7587
Rp7588
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p7589
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p7590
(g1043
((g6616
((I-1
I1
tp7591
I00
tp7592
tp7593
(g7276
((I-1
I3
tp7594
I00
tp7595
tp7596
tp7597
(I1
(I00
tp7598
tp7599
tp7600
(g1043
((g7352
((I-1
I0
tp7601
I00
tp7602
tp7603
(g6705
((I-1
I2
tp7604
I00
tp7605
tp7606
tp7607
(I1
(I00
tp7608
tp7609
tp7610
(g652
((g7450
((I1
I0
tp7611
I00
tp7612
tp7613
(g7476
((I0
I0
tp7614
I00
tp7615
tp7616
tp7617
(I1
(I00
tp7618
tp7619
tp7620
(g1119
((g7504
((I2
I0
tp7621
I00
tp7622
tp7623
tp7624
(I1
(I00
tp7625
tp7626
tp7627
(g1043
((g7532
((I3
I0
I0
tp7628
I00
tp7629
tp7630
(g7296
((I-1
I4
tp7631
I00
tp7632
tp7633
tp7634
(I1
(I00
tp7635
tp7636
tp7637
tp7638
tp7639
sg1232
I0
sg1301
(lp7640
I00
aI00
asg1303
I0
sg1235
I0
sg1240
Nsg1304
(lp7641
g7329
ag14
(g56
g16
Ntp7642
Rp7643
(dp7644
g60
(I00
I00
tp7645
sg62
g7560
sg64
g68
sg71
I00
sg20
Nsbasg1243
I00
sg1227
I0
sg1310
I3
sg1229
g7575
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p7646
(dp7647
g37
(lp7648
(g893
I1400
g894
S'outs = self(*inputs)'
p7649
tp7650
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7651
tp7652
a(g893
I440
g206
S'[t() for t in self.output_types])'
p7653
tp7654
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7655
tp7656
asbsg55
g7643
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7657
(dp7658
g37
(lp7659
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7660
tp7661
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p7662
tp7663
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7664
tp7665
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7666
tp7667
asbsg211
(lp7668
g6772
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7669
(dp7670
g37
(lp7671
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p7672
tp7673
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7674
tp7675
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p7676
tp7677
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7678
tp7679
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7680
(dp7681
g37
(lp7682
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7683
tp7684
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p7685
tp7686
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7687
tp7688
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7689
tp7690
asbsg211
(lp7691
g6765
asg213
g14
(g308
g16
Ntp7692
Rp7693
(dp7694
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p7695
tp7696
Rp7697
tp7698
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7699
(dp7700
bsg55
g14
(g56
g16
Ntp7701
Rp7702
(dp7703
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7704
Rp7705
(dp7706
g32
g14
(g148
g16
Ntp7707
Rp7708
(dp7709
g12
(lp7710
g6881
asg34
(itheano.gof.utils
scratchpad
p7711
(dp7712
g37
(lp7713
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7714
tp7715
a(g893
I1563
g894
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p7716
tp7717
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7718
tp7719
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7720
tp7721
asbsg211
(lp7722
g7705
asg213
g14
(g308
g16
Ntp7723
Rp7724
(dp7725
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p7726
tp7727
Rp7728
tp7729
Rp7730
tp7731
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7732
(dp7733
bsg55
g14
(g56
g16
Ntp7734
Rp7735
(dp7736
g60
(I00
I00
tp7737
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7738
Rp7739
(dp7740
g32
g14
(g148
g16
Ntp7741
Rp7742
(dp7743
g12
(lp7744
g14
(g28
g16
Ntp7745
Rp7746
(dp7747
g32
g14
(g148
g16
Ntp7748
Rp7749
(dp7750
g12
(lp7751
g7315
asg34
(itheano.gof.utils
scratchpad
p7752
(dp7753
g37
(lp7754
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7755
tp7756
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p7757
tp7758
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7759
tp7760
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7761
tp7762
asbsg211
(lp7763
g7746
asg213
g14
(g308
g16
Ntp7764
Rp7765
(dp7766
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p7767
tp7768
Rp7769
Ntp7770
Rp7771
tp7772
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7773
(dp7774
bsg55
g14
(g56
g16
Ntp7775
Rp7776
(dp7777
g60
(I00
I00
tp7778
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7779
(dp7780
g37
(lp7781
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p7782
tp7783
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p7784
tp7785
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p7786
tp7787
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7788
tp7789
asbsg211
(lp7790
g7739
asg213
g14
(g308
g16
Ntp7791
Rp7792
(dp7793
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p7794
tp7795
Rp7796
tp7797
Rp7798
tp7799
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7800
(dp7801
bsg55
g14
(g56
g16
Ntp7802
Rp7803
(dp7804
g60
(I00
I00
tp7805
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7806
Rp7807
(dp7808
g32
g14
(g148
g16
Ntp7809
Rp7810
(dp7811
g12
(lp7812
g14
(g28
g16
Ntp7813
Rp7814
(dp7815
g32
g14
(g148
g16
Ntp7816
Rp7817
(dp7818
g12
(lp7819
g14
(g28
g16
Ntp7820
Rp7821
(dp7822
g32
g14
(g148
g16
Ntp7823
Rp7824
(dp7825
g12
(lp7826
g14
(g28
g16
Ntp7827
Rp7828
(dp7829
g32
g14
(g148
g16
Ntp7830
Rp7831
(dp7832
g12
(lp7833
g14
(g28
g16
Ntp7834
Rp7835
(dp7836
g32
g14
(g148
g16
Ntp7837
Rp7838
(dp7839
g12
(lp7840
g14
(g28
g16
Ntp7841
Rp7842
(dp7843
g32
g14
(g148
g16
Ntp7844
Rp7845
(dp7846
g12
(lp7847
g14
(g28
g16
Ntp7848
Rp7849
(dp7850
g32
g14
(g148
g16
Ntp7851
Rp7852
(dp7853
g12
(lp7854
g6786
ag6881
ag6939
ag6786
ag6692
ag7263
ag7283
asg34
(itheano.gof.utils
scratchpad
p7855
(dp7856
g37
(lp7857
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p7858
tp7859
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p7860
tp7861
a(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p7862
tp7863
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7864
tp7865
asbsg211
(lp7866
g14
(g28
g16
Ntp7867
Rp7868
(dp7869
g32
g7852
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p7870
(dp7871
g37
(lp7872
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p7873
tp7874
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7875
tp7876
a(g893
I440
g206
S'[t() for t in self.output_types])'
p7877
tp7878
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7879
tp7880
asbsg55
g7329
sg20
Nsbag7849
asg213
g7334
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p7881
(dp7882
g37
(lp7883
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p7884
tp7885
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7886
tp7887
a(g893
I440
g206
S'[t() for t in self.output_types])'
p7888
tp7889
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7890
tp7891
asbsg55
g7643
sg20
Nsbag6644
asg34
(itheano.gof.utils
scratchpad
p7892
(dp7893
g37
(lp7894
(g105
I76
g106
S'self.initTraining()'
p7895
tp7896
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p7897
tp7898
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p7899
tp7900
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7901
tp7902
asbsg211
(lp7903
g7842
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7904
(dp7905
g37
(lp7906
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p7907
tp7908
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7909
tp7910
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7911
tp7912
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7913
tp7914
asbsg55
g14
(g56
g16
Ntp7915
Rp7916
(dp7917
g60
(I00
I00
tp7918
sg62
S'float64'
p7919
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7920
Rp7921
(dp7922
g32
g14
(g148
g16
Ntp7923
Rp7924
(dp7925
g12
(lp7926
g1608
asg34
(itheano.gof.utils
scratchpad
p7927
(dp7928
g37
(lp7929
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p7930
tp7931
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7932
tp7933
a(g205
I533
g206
S'inplace=False)(input))'
p7934
tp7935
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7936
tp7937
asbsg211
(lp7938
g7921
asg213
g14
(g214
g16
Ntp7939
Rp7940
(dp7941
g218
(lp7942
sg220
(lp7943
sg222
(lp7944
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp7945
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7946
(dp7947
bsg55
g14
(g56
g16
Ntp7948
Rp7949
(dp7950
g60
(I01
I01
tp7951
sg62
g1625
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p7952
(dp7953
g37
(lp7954
(g105
I76
g106
S'self.initTraining()'
p7955
tp7956
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p7957
tp7958
a(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p7959
tp7960
a(g202
I401
g52
S'self.add_tag_trace(node)'
p7961
tp7962
asbsg211
(lp7963
g7835
asg213
g1665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p7964
(dp7965
g37
(lp7966
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p7967
tp7968
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p7969
tp7970
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p7971
tp7972
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p7973
tp7974
asbsg55
g14
(g56
g16
Ntp7975
Rp7976
(dp7977
g60
(I00
I00
tp7978
sg62
S'float64'
p7979
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp7980
Rp7981
(dp7982
g32
g14
(g148
g16
Ntp7983
Rp7984
(dp7985
g12
(lp7986
g14
(g28
g16
Ntp7987
Rp7988
(dp7989
g32
g14
(g148
g16
Ntp7990
Rp7991
(dp7992
g12
(lp7993
g14
(g28
g16
Ntp7994
Rp7995
(dp7996
g32
g14
(g148
g16
Ntp7997
Rp7998
(dp7999
g12
(lp8000
g7835
asg34
(itheano.gof.utils
scratchpad
p8001
(dp8002
g37
(lp8003
(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p8004
tp8005
a(g198
I452
g1720
S'acc_dtype=acc_dtype)'
p8006
tp8007
a(g47
I2670
g1720
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p8008
tp8009
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8010
tp8011
asbsg211
(lp8012
g7995
asg213
g14
(g1728
g16
Ntp8013
Rp8014
(dp8015
g1732
g7979
sg62
g7979
sg229
g230
sg656
g659
sg571
Nsbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8016
(dp8017
g37
(lp8018
(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8019
tp8020
a(g205
I1797
g206
S'return CAReduce.make_node(op, input)'
p8021
tp8022
a(g205
I1299
g206
S'broadcastable=broadcastable)()'
p8023
tp8024
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8025
tp8026
asbsg55
g14
(g56
g16
Ntp8027
Rp8028
(dp8029
g60
(tsg62
g7979
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag1748
asg34
(itheano.gof.utils
scratchpad
p8030
(dp8031
g37
(lp8032
(g886
I450
g894
S'g_cost = _float_ones_like(cost)'
p8033
tp8034
a(g886
I1124
g1766
S'rval = tensor.ones_like(x)'
p8035
tp8036
a(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p8037
tp8038
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8039
tp8040
asbsg211
(lp8041
g7988
asg213
g1776
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8042
(dp8043
g37
(lp8044
(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p8045
tp8046
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8047
tp8048
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8049
tp8050
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8051
tp8052
asbsg55
g14
(g56
g16
Ntp8053
Rp8054
(dp8055
g60
(tsg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8056
(dp8057
g37
(lp8058
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p8059
tp8060
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8061
tp8062
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p8063
tp8064
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8065
tp8066
asbsg211
(lp8067
g7981
asg213
g14
(g214
g16
Ntp8068
Rp8069
(dp8070
g218
(lp8071
sg220
(lp8072
sg222
(lp8073
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp8074
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8075
(dp8076
bsg55
g14
(g56
g16
Ntp8077
Rp8078
(dp8079
g60
(I01
I01
tp8080
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8081
(dp8082
g37
(lp8083
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p8084
tp8085
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8086
tp8087
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p8088
tp8089
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8090
tp8091
asbsg211
(lp8092
g7828
asg213
g14
(g650
g16
Ntp8093
Rp8094
(dp8095
g20
Nsg656
g1780
sg665
(dp8096
sg667
Nsg669
(dp8097
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8098
(dp8099
g37
(lp8100
(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p8101
tp8102
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8103
tp8104
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8105
tp8106
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8107
tp8108
asbsg55
g14
(g56
g16
Ntp8109
Rp8110
(dp8111
g60
(I00
I00
tp8112
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag7921
asg34
(itheano.gof.utils
scratchpad
p8113
(dp8114
g37
(lp8115
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p8116
tp8117
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8118
tp8119
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8120
tp8121
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8122
tp8123
asbsg211
(lp8124
g7821
asg213
g14
(g650
g16
Ntp8125
Rp8126
(dp8127
g20
Nsg656
g1883
sg665
(dp8128
sg667
Nsg669
(dp8129
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8130
(dp8131
g37
(lp8132
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8133
tp8134
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8135
tp8136
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8137
tp8138
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8139
tp8140
asbsg55
g14
(g56
g16
Ntp8141
Rp8142
(dp8143
g60
(I00
I00
tp8144
sg62
S'float64'
p8145
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8146
Rp8147
(dp8148
g32
g14
(g148
g16
Ntp8149
Rp8150
(dp8151
g12
(lp8152
g7842
ag14
(g28
g16
Ntp8153
Rp8154
(dp8155
g32
g14
(g148
g16
Ntp8156
Rp8157
(dp8158
g12
(lp8159
g7921
ag14
(g28
g16
Ntp8160
Rp8161
(dp8162
g32
g14
(g148
g16
Ntp8163
Rp8164
(dp8165
g12
(lp8166
g1926
asg34
(itheano.gof.utils
scratchpad
p8167
(dp8168
g37
(lp8169
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8170
tp8171
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8172
tp8173
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p8174
tp8175
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8176
tp8177
asbsg211
(lp8178
g8161
asg213
g14
(g214
g16
Ntp8179
Rp8180
(dp8181
g218
(lp8182
sg220
(lp8183
sg222
(lp8184
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp8185
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8186
(dp8187
bsg55
g14
(g56
g16
Ntp8188
Rp8189
(dp8190
g60
(I01
I01
tp8191
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8192
(dp8193
g37
(lp8194
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8195
tp8196
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8197
tp8198
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8199
tp8200
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8201
tp8202
asbsg211
(lp8203
g8154
asg213
g14
(g650
g16
Ntp8204
Rp8205
(dp8206
g20
Nsg656
g1575
sg665
(dp8207
sg667
Nsg669
(dp8208
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8209
(dp8210
g37
(lp8211
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8212
tp8213
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8214
tp8215
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8216
tp8217
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8218
tp8219
asbsg55
g14
(g56
g16
Ntp8220
Rp8221
(dp8222
g60
(I01
I01
tp8223
sg62
S'int8'
p8224
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8225
(dp8226
g37
(lp8227
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p8228
tp8229
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8230
tp8231
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8232
tp8233
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8234
tp8235
asbsg211
(lp8236
g8147
asg213
g14
(g650
g16
Ntp8237
Rp8238
(dp8239
g20
Nsg656
g1669
sg665
(dp8240
sg667
Nsg669
(dp8241
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8242
(dp8243
g37
(lp8244
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8245
tp8246
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8247
tp8248
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8249
tp8250
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8251
tp8252
asbsg55
g14
(g56
g16
Ntp8253
Rp8254
(dp8255
g60
(I00
I00
tp8256
sg62
S'float64'
p8257
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8258
(dp8259
g37
(lp8260
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p8261
tp8262
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p8263
tp8264
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8265
tp8266
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8267
tp8268
asbsg211
(lp8269
g7814
asg213
g14
(g650
g16
Ntp8270
Rp8271
(dp8272
g20
Nsg656
g1883
sg665
(dp8273
sg667
Nsg669
(dp8274
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8275
(dp8276
g37
(lp8277
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p8278
tp8279
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8280
tp8281
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8282
tp8283
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8284
tp8285
asbsg55
g14
(g56
g16
Ntp8286
Rp8287
(dp8288
g60
(I00
I00
tp8289
sg62
S'float64'
p8290
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8291
(dp8292
g37
(lp8293
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8294
tp8295
a(g893
I1582
g894
S'outer_inp_seqs.append(x[::-1])'
p8296
tp8297
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8298
tp8299
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8300
tp8301
asbsg211
(lp8302
g7807
asg213
g14
(g308
g16
Ntp8303
Rp8304
(dp8305
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p8306
tp8307
Rp8308
tp8309
Rp8310
tp8311
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8312
(dp8313
bsg55
g14
(g56
g16
Ntp8314
Rp8315
(dp8316
g60
(I00
I00
tp8317
sg62
g8290
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8318
Rp8319
(dp8320
g32
g14
(g148
g16
Ntp8321
Rp8322
(dp8323
g12
(lp8324
g14
(g28
g16
Ntp8325
Rp8326
(dp8327
g32
g14
(g148
g16
Ntp8328
Rp8329
(dp8330
g12
(lp8331
g7315
asg34
(itheano.gof.utils
scratchpad
p8332
(dp8333
g37
(lp8334
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8335
tp8336
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p8337
tp8338
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8339
tp8340
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8341
tp8342
asbsg211
(lp8343
g8326
asg213
g14
(g308
g16
Ntp8344
Rp8345
(dp8346
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p8347
tp8348
Rp8349
tp8350
Rp8351
tp8352
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8353
(dp8354
bsg55
g14
(g56
g16
Ntp8355
Rp8356
(dp8357
g60
(I00
I00
tp8358
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8359
(dp8360
g37
(lp8361
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8362
tp8363
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p8364
tp8365
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8366
tp8367
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8368
tp8369
asbsg211
(lp8370
g8319
asg213
g14
(g308
g16
Ntp8371
Rp8372
(dp8373
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p8374
tp8375
Rp8376
Ntp8377
Rp8378
tp8379
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8380
(dp8381
bsg55
g14
(g56
g16
Ntp8382
Rp8383
(dp8384
g60
(I00
I00
tp8385
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8386
Rp8387
(dp8388
g32
g14
(g148
g16
Ntp8389
Rp8390
(dp8391
g12
(lp8392
g6779
asg34
(itheano.gof.utils
scratchpad
p8393
(dp8394
g37
(lp8395
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8396
tp8397
a(g893
I1608
g894
S'outer_inp_seqs += [x[::-1] for x in self.outer_nitsot_outs(outs)]'
p8398
tp8399
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8400
tp8401
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8402
tp8403
asbsg211
(lp8404
g8387
asg213
g14
(g308
g16
Ntp8405
Rp8406
(dp8407
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p8408
tp8409
Rp8410
tp8411
Rp8412
tp8413
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8414
(dp8415
bsg55
g14
(g56
g16
Ntp8416
Rp8417
(dp8418
g60
(I00
I00
tp8419
sg62
g7560
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8420
Rp8421
(dp8422
g32
g14
(g148
g16
Ntp8423
Rp8424
(dp8425
g12
(lp8426
g477
ag14
(g28
g16
Ntp8427
Rp8428
(dp8429
g32
g14
(g148
g16
Ntp8430
Rp8431
(dp8432
g12
(lp8433
g14
(g28
g16
Ntp8434
Rp8435
(dp8436
g32
g14
(g148
g16
Ntp8437
Rp8438
(dp8439
g12
(lp8440
g7315
asg34
(itheano.gof.utils
scratchpad
p8441
(dp8442
g37
(lp8443
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8444
tp8445
a(g893
I1710
g894
S'tensor.zeros(outs[idx + offset].shape,'
p8446
tp8447
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8448
tp8449
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8450
tp8451
asbsg211
(lp8452
g8435
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8453
(dp8454
g37
(lp8455
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8456
tp8457
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8458
tp8459
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p8460
tp8461
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8462
tp8463
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8464
(dp8465
g37
(lp8466
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p8467
tp8468
a(g198
I419
g2241
S'yield self[i]'
p8469
tp8470
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8471
tp8472
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8473
tp8474
asbsg211
(lp8475
g8428
asg213
g14
(g308
g16
Ntp8476
Rp8477
(dp8478
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8479
tp8480
Rp8481
tp8482
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8483
(dp8484
bsg55
g14
(g56
g16
Ntp8485
Rp8486
(dp8487
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8488
Rp8489
(dp8490
g32
g14
(g148
g16
Ntp8491
Rp8492
(dp8493
g12
(lp8494
g8435
asg34
(itheano.gof.utils
scratchpad
p8495
(dp8496
g37
(lp8497
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p8498
tp8499
a(g198
I419
g2241
S'yield self[i]'
p8500
tp8501
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8502
tp8503
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8504
tp8505
asbsg211
(lp8506
g8489
asg213
g14
(g308
g16
Ntp8507
Rp8508
(dp8509
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8510
tp8511
Rp8512
tp8513
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8514
(dp8515
bsg55
g14
(g56
g16
Ntp8516
Rp8517
(dp8518
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8519
(dp8520
g37
(lp8521
(g893
I1711
g894
S'dtype=dC_dinps_t[ins_pos].dtype))'
p8522
tp8523
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p8524
tp8525
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8526
tp8527
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8528
tp8529
asbsg211
(lp8530
g8421
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8531
(dp8532
g37
(lp8533
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8534
tp8535
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8536
tp8537
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p8538
tp8539
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8540
tp8541
asbsg55
g14
(g56
g16
Ntp8542
Rp8543
(dp8544
g60
(I00
I00
tp8545
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8546
Rp8547
(dp8548
g32
g14
(g148
g16
Ntp8549
Rp8550
(dp8551
g12
(lp8552
g477
ag14
(g28
g16
Ntp8553
Rp8554
(dp8555
g32
g14
(g148
g16
Ntp8556
Rp8557
(dp8558
g12
(lp8559
g6765
ag1926
asg34
(itheano.gof.utils
scratchpad
p8560
(dp8561
g37
(lp8562
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8563
tp8564
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8565
tp8566
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8567
tp8568
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8569
tp8570
asbsg211
(lp8571
g8554
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8572
(dp8573
g37
(lp8574
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8575
tp8576
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8577
tp8578
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8579
tp8580
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8581
tp8582
asbsg55
g14
(g56
g16
Ntp8583
Rp8584
(dp8585
g60
(tsg62
S'int64'
p8586
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8587
Rp8588
(dp8589
g32
g14
(g148
g16
Ntp8590
Rp8591
(dp8592
g12
(lp8593
g14
(g28
g16
Ntp8594
Rp8595
(dp8596
g32
g14
(g148
g16
Ntp8597
Rp8598
(dp8599
g12
(lp8600
g6692
asg34
(itheano.gof.utils
scratchpad
p8601
(dp8602
g37
(lp8603
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8604
tp8605
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8606
tp8607
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8608
tp8609
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8610
tp8611
asbsg211
(lp8612
g8595
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8613
(dp8614
g37
(lp8615
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8616
tp8617
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8618
tp8619
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p8620
tp8621
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8622
tp8623
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8624
(dp8625
g37
(lp8626
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8627
tp8628
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8629
tp8630
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8631
tp8632
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8633
tp8634
asbsg211
(lp8635
g8588
asg213
g14
(g308
g16
Ntp8636
Rp8637
(dp8638
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8639
tp8640
Rp8641
tp8642
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8643
(dp8644
bsg55
g14
(g56
g16
Ntp8645
Rp8646
(dp8647
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8648
Rp8649
(dp8650
g32
g14
(g148
g16
Ntp8651
Rp8652
(dp8653
g12
(lp8654
g14
(g28
g16
Ntp8655
Rp8656
(dp8657
g32
g14
(g148
g16
Ntp8658
Rp8659
(dp8660
g12
(lp8661
g6692
asg34
(itheano.gof.utils
scratchpad
p8662
(dp8663
g37
(lp8664
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8665
tp8666
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8667
tp8668
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8669
tp8670
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8671
tp8672
asbsg211
(lp8673
g8656
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8674
(dp8675
g37
(lp8676
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8677
tp8678
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8679
tp8680
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p8681
tp8682
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8683
tp8684
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8685
(dp8686
g37
(lp8687
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8688
tp8689
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8690
tp8691
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8692
tp8693
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8694
tp8695
asbsg211
(lp8696
g8649
asg213
g14
(g308
g16
Ntp8697
Rp8698
(dp8699
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8700
tp8701
Rp8702
tp8703
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8704
(dp8705
bsg55
g14
(g56
g16
Ntp8706
Rp8707
(dp8708
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8709
(dp8710
g37
(lp8711
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8712
tp8713
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p8714
tp8715
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8716
tp8717
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8718
tp8719
asbsg211
(lp8720
g8547
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8721
(dp8722
g37
(lp8723
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8724
tp8725
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8726
tp8727
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p8728
tp8729
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8730
tp8731
asbsg55
g14
(g56
g16
Ntp8732
Rp8733
(dp8734
g60
(I00
I00
I00
tp8735
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8736
Rp8737
(dp8738
g32
g14
(g148
g16
Ntp8739
Rp8740
(dp8741
g12
(lp8742
g477
ag14
(g28
g16
Ntp8743
Rp8744
(dp8745
g32
g14
(g148
g16
Ntp8746
Rp8747
(dp8748
g12
(lp8749
g6765
ag1926
asg34
(itheano.gof.utils
scratchpad
p8750
(dp8751
g37
(lp8752
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8753
tp8754
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8755
tp8756
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8757
tp8758
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8759
tp8760
asbsg211
(lp8761
g8744
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8762
(dp8763
g37
(lp8764
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8765
tp8766
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8767
tp8768
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8769
tp8770
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8771
tp8772
asbsg55
g14
(g56
g16
Ntp8773
Rp8774
(dp8775
g60
(tsg62
S'int64'
p8776
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8777
Rp8778
(dp8779
g32
g14
(g148
g16
Ntp8780
Rp8781
(dp8782
g12
(lp8783
g14
(g28
g16
Ntp8784
Rp8785
(dp8786
g32
g14
(g148
g16
Ntp8787
Rp8788
(dp8789
g12
(lp8790
g7263
asg34
(itheano.gof.utils
scratchpad
p8791
(dp8792
g37
(lp8793
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8794
tp8795
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8796
tp8797
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8798
tp8799
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8800
tp8801
asbsg211
(lp8802
g8785
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8803
(dp8804
g37
(lp8805
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8806
tp8807
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8808
tp8809
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p8810
tp8811
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8812
tp8813
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8814
(dp8815
g37
(lp8816
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8817
tp8818
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8819
tp8820
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8821
tp8822
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8823
tp8824
asbsg211
(lp8825
g8778
asg213
g14
(g308
g16
Ntp8826
Rp8827
(dp8828
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p8829
tp8830
Rp8831
tp8832
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8833
(dp8834
bsg55
g14
(g56
g16
Ntp8835
Rp8836
(dp8837
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8838
Rp8839
(dp8840
g32
g14
(g148
g16
Ntp8841
Rp8842
(dp8843
g12
(lp8844
g14
(g28
g16
Ntp8845
Rp8846
(dp8847
g32
g14
(g148
g16
Ntp8848
Rp8849
(dp8850
g12
(lp8851
g7263
asg34
(itheano.gof.utils
scratchpad
p8852
(dp8853
g37
(lp8854
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8855
tp8856
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8857
tp8858
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8859
tp8860
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8861
tp8862
asbsg211
(lp8863
g8846
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8864
(dp8865
g37
(lp8866
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8867
tp8868
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8869
tp8870
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p8871
tp8872
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8873
tp8874
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8875
(dp8876
g37
(lp8877
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8878
tp8879
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8880
tp8881
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p8882
tp8883
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8884
tp8885
asbsg211
(lp8886
g8839
asg213
g14
(g308
g16
Ntp8887
Rp8888
(dp8889
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p8890
tp8891
Rp8892
tp8893
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8894
(dp8895
bsg55
g14
(g56
g16
Ntp8896
Rp8897
(dp8898
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p8899
(dp8900
g37
(lp8901
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8902
tp8903
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p8904
tp8905
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8906
tp8907
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8908
tp8909
asbsg211
(lp8910
g8737
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8911
(dp8912
g37
(lp8913
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p8914
tp8915
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8916
tp8917
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p8918
tp8919
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8920
tp8921
asbsg55
g14
(g56
g16
Ntp8922
Rp8923
(dp8924
g60
(I00
I00
I00
tp8925
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8926
Rp8927
(dp8928
g32
g14
(g148
g16
Ntp8929
Rp8930
(dp8931
g12
(lp8932
g477
ag14
(g28
g16
Ntp8933
Rp8934
(dp8935
g32
g14
(g148
g16
Ntp8936
Rp8937
(dp8938
g12
(lp8939
g6765
ag1926
asg34
(itheano.gof.utils
scratchpad
p8940
(dp8941
g37
(lp8942
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8943
tp8944
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8945
tp8946
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8947
tp8948
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8949
tp8950
asbsg211
(lp8951
g8934
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8952
(dp8953
g37
(lp8954
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p8955
tp8956
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8957
tp8958
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p8959
tp8960
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p8961
tp8962
asbsg55
g14
(g56
g16
Ntp8963
Rp8964
(dp8965
g60
(tsg62
S'int64'
p8966
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp8967
Rp8968
(dp8969
g32
g14
(g148
g16
Ntp8970
Rp8971
(dp8972
g12
(lp8973
g14
(g28
g16
Ntp8974
Rp8975
(dp8976
g32
g14
(g148
g16
Ntp8977
Rp8978
(dp8979
g12
(lp8980
g7283
asg34
(itheano.gof.utils
scratchpad
p8981
(dp8982
g37
(lp8983
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p8984
tp8985
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p8986
tp8987
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8988
tp8989
a(g202
I401
g52
S'self.add_tag_trace(node)'
p8990
tp8991
asbsg211
(lp8992
g8975
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p8993
(dp8994
g37
(lp8995
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p8996
tp8997
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p8998
tp8999
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p9000
tp9001
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9002
tp9003
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9004
(dp9005
g37
(lp9006
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9007
tp9008
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p9009
tp9010
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p9011
tp9012
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9013
tp9014
asbsg211
(lp9015
g8968
asg213
g14
(g308
g16
Ntp9016
Rp9017
(dp9018
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p9019
tp9020
Rp9021
tp9022
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9023
(dp9024
bsg55
g14
(g56
g16
Ntp9025
Rp9026
(dp9027
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9028
Rp9029
(dp9030
g32
g14
(g148
g16
Ntp9031
Rp9032
(dp9033
g12
(lp9034
g14
(g28
g16
Ntp9035
Rp9036
(dp9037
g32
g14
(g148
g16
Ntp9038
Rp9039
(dp9040
g12
(lp9041
g7283
asg34
(itheano.gof.utils
scratchpad
p9042
(dp9043
g37
(lp9044
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9045
tp9046
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p9047
tp9048
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9049
tp9050
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9051
tp9052
asbsg211
(lp9053
g9036
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9054
(dp9055
g37
(lp9056
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p9057
tp9058
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9059
tp9060
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p9061
tp9062
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9063
tp9064
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9065
(dp9066
g37
(lp9067
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9068
tp9069
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p9070
tp9071
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p9072
tp9073
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9074
tp9075
asbsg211
(lp9076
g9029
asg213
g14
(g308
g16
Ntp9077
Rp9078
(dp9079
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p9080
tp9081
Rp9082
tp9083
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9084
(dp9085
bsg55
g14
(g56
g16
Ntp9086
Rp9087
(dp9088
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9089
(dp9090
g37
(lp9091
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p9092
tp9093
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p9094
tp9095
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p9096
tp9097
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9098
tp9099
asbsg211
(lp9100
g8927
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9101
(dp9102
g37
(lp9103
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p9104
tp9105
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9106
tp9107
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p9108
tp9109
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9110
tp9111
asbsg55
g14
(g56
g16
Ntp9112
Rp9113
(dp9114
g60
(I00
I00
I00
tp9115
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag6786
ag6692
ag7263
ag7283
asg34
(itheano.gof.utils
scratchpad
p9116
(dp9117
g37
(lp9118
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p9119
tp9120
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9121
tp9122
a(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p9123
tp9124
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9125
tp9126
asbsg211
(lp9127
g14
(g28
g16
Ntp9128
Rp9129
(dp9130
g32
g6761
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p9131
(dp9132
g37
(lp9133
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p9134
tp9135
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9136
tp9137
a(g893
I440
g206
S'[t() for t in self.output_types])'
p9138
tp9139
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9140
tp9141
asbsg55
g14
(g56
g16
Ntp9142
Rp9143
(dp9144
g60
(I00
I00
tp9145
sg62
S'float64'
p9146
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag6758
ag14
(g28
g16
Ntp9147
Rp9148
(dp9149
g32
g6761
sg33
I2
sg34
(itheano.gof.utils
scratchpad
p9150
(dp9151
g37
(lp9152
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p9153
tp9154
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9155
tp9156
a(g893
I440
g206
S'[t() for t in self.output_types])'
p9157
tp9158
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9159
tp9160
asbsg55
g14
(g56
g16
Ntp9161
Rp9162
(dp9163
g60
(I00
I00
I00
tp9164
sg62
S'float64'
p9165
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9166
Rp9167
(dp9168
g32
g6761
sg33
I3
sg34
(itheano.gof.utils
scratchpad
p9169
(dp9170
g37
(lp9171
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p9172
tp9173
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9174
tp9175
a(g893
I440
g206
S'[t() for t in self.output_types])'
p9176
tp9177
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9178
tp9179
asbsg55
g14
(g56
g16
Ntp9180
Rp9181
(dp9182
g60
(I00
I00
I00
tp9183
sg62
S'float64'
p9184
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9185
Rp9186
(dp9187
g32
g6761
sg33
I4
sg34
(itheano.gof.utils
scratchpad
p9188
(dp9189
g37
(lp9190
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p9191
tp9192
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9193
tp9194
a(g893
I440
g206
S'[t() for t in self.output_types])'
p9195
tp9196
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9197
tp9198
asbsg55
g14
(g56
g16
Ntp9199
Rp9200
(dp9201
g60
(I00
I00
tp9202
sg62
S'float64'
p9203
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg213
g14
(g919
g16
Ntp9204
Rp9205
(dp9206
g8
I00
sg12
(lp9207
g14
(g28
g16
Ntp9208
Rp9209
(dp9210
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9211
(dp9212
g37
(lp9213
(g893
I1420
g894
S'self.outputs)'
p9214
tp9215
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p9216
tp9217
a(g593
I75
g952
S'nw_x = x.type()'
p9218
tp9219
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9220
tp9221
asbsg55
g7352
sg20
Nsbag14
(g28
g16
Ntp9222
Rp9223
(dp9224
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9225
(dp9226
g37
(lp9227
(g893
I1420
g894
S'self.outputs)'
p9228
tp9229
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p9230
tp9231
a(g593
I75
g952
S'nw_x = x.type()'
p9232
tp9233
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9234
tp9235
asbsg55
g6616
sg20
Nsbag14
(g28
g16
Ntp9236
Rp9237
(dp9238
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9239
(dp9240
g37
(lp9241
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9242
tp9243
a(g893
I1525
g894
S'dC_dXt = safe_new(dC_douts[idx][0])'
p9244
tp9245
a(g593
I75
g952
S'nw_x = x.type()'
p9246
tp9247
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9248
tp9249
asbsg55
g14
(g56
g16
Ntp9250
Rp9251
(dp9252
g60
(I00
tp9253
sg62
g8290
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9254
Rp9255
(dp9256
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9257
(dp9258
g37
(lp9259
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9260
tp9261
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p9262
tp9263
a(g593
I75
g952
S'nw_x = x.type()'
p9264
tp9265
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9266
tp9267
asbsg55
g7532
sg20
Nsbag14
(g28
g16
Ntp9268
Rp9269
(dp9270
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9271
(dp9272
g37
(lp9273
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9274
tp9275
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p9276
tp9277
a(g593
I75
g952
S'nw_x = x.type()'
p9278
tp9279
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9280
tp9281
asbsg55
g7557
sg20
Nsbag14
(g28
g16
Ntp9282
Rp9283
(dp9284
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9285
(dp9286
g37
(lp9287
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9288
tp9289
a(g893
I1521
g894
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p9290
tp9291
a(g593
I75
g952
S'nw_x = x.type()'
p9292
tp9293
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9294
tp9295
asbsg55
g7532
sg20
Nsbag14
(g28
g16
Ntp9296
Rp9297
(dp9298
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9299
(dp9300
g37
(lp9301
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9302
tp9303
a(g893
I1553
g894
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p9304
tp9305
a(g593
I75
g952
S'nw_x = x.type()'
p9306
tp9307
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9308
tp9309
asbsg55
g7532
sg20
Nsbag14
(g28
g16
Ntp9310
Rp9311
(dp9312
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9313
(dp9314
g37
(lp9315
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9316
tp9317
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p9318
tp9319
a(g593
I75
g952
S'nw_x = x.type()'
p9320
tp9321
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9322
tp9323
asbsg55
g14
(g56
g16
Ntp9324
Rp9325
(dp9326
g60
(I00
I00
tp9327
sg62
S'float64'
p9328
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9329
Rp9330
(dp9331
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9332
(dp9333
g37
(lp9334
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9335
tp9336
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p9337
tp9338
a(g593
I75
g952
S'nw_x = x.type()'
p9339
tp9340
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9341
tp9342
asbsg55
g14
(g56
g16
Ntp9343
Rp9344
(dp9345
g60
(I00
I00
tp9346
sg62
S'float64'
p9347
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9348
Rp9349
(dp9350
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9351
(dp9352
g37
(lp9353
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9354
tp9355
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p9356
tp9357
a(g593
I75
g952
S'nw_x = x.type()'
p9358
tp9359
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9360
tp9361
asbsg55
g14
(g56
g16
Ntp9362
Rp9363
(dp9364
g60
(I00
I00
tp9365
sg62
S'float64'
p9366
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9367
Rp9368
(dp9369
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9370
(dp9371
g37
(lp9372
(g893
I1420
g894
S'self.outputs)'
p9373
tp9374
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p9375
tp9376
a(g593
I75
g952
S'nw_x = x.type()'
p9377
tp9378
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9379
tp9380
asbsg55
g6705
sg20
Nsbag14
(g28
g16
Ntp9381
Rp9382
(dp9383
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9384
(dp9385
g37
(lp9386
(g893
I1420
g894
S'self.outputs)'
p9387
tp9388
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p9389
tp9390
a(g593
I75
g952
S'nw_x = x.type()'
p9391
tp9392
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9393
tp9394
asbsg55
g7276
sg20
Nsbag14
(g28
g16
Ntp9395
Rp9396
(dp9397
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p9398
(dp9399
g37
(lp9400
(g893
I1420
g894
S'self.outputs)'
p9401
tp9402
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p9403
tp9404
a(g593
I75
g952
S'nw_x = x.type()'
p9405
tp9406
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9407
tp9408
asbsg55
g7296
sg20
Nsbasg999
(lp9409
(lp9410
I0
aI1
aa(lp9411
I-1
aa(lp9412
I-1
aa(lp9413
I-1
aasg1003
I-1282353987
sg211
(lp9414
g14
(g28
g16
Ntp9415
Rp9416
(dp9417
g32
g14
(g148
g16
Ntp9418
Rp9419
(dp9420
g12
(lp9421
g14
(g28
g16
Ntp9422
Rp9423
(dp9424
g32
g14
(g148
g16
Ntp9425
Rp9426
(dp9427
g12
(lp9428
g14
(g28
g16
Ntp9429
Rp9430
(dp9431
g32
g14
(g148
g16
Ntp9432
Rp9433
(dp9434
g12
(lp9435
g14
(g28
g16
Ntp9436
Rp9437
(dp9438
g32
g14
(g148
g16
Ntp9439
Rp9440
(dp9441
g12
(lp9442
g9283
ag14
(g28
g16
Ntp9443
Rp9444
(dp9445
g32
g14
(g148
g16
Ntp9446
Rp9447
(dp9448
g12
(lp9449
g14
(g28
g16
Ntp9450
Rp9451
(dp9452
g32
g14
(g148
g16
Ntp9453
Rp9454
(dp9455
g12
(lp9456
g1926
asg34
(itheano.gof.utils
scratchpad
p9457
(dp9458
g37
(lp9459
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9460
tp9461
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9462
tp9463
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p9464
tp9465
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9466
tp9467
asbsg211
(lp9468
g9451
asg213
g14
(g214
g16
Ntp9469
Rp9470
(dp9471
g218
(lp9472
sg220
(lp9473
sg222
(lp9474
I0
asg224
(tsg225
I00
sg226
(g227
tp9475
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9476
(dp9477
bsg55
g14
(g56
g16
Ntp9478
Rp9479
(dp9480
g60
(I01
tp9481
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9482
Rp9483
(dp9484
g32
g14
(g148
g16
Ntp9485
Rp9486
(dp9487
g12
(lp9488
g9255
asg34
(itheano.gof.utils
scratchpad
p9489
(dp9490
g37
(lp9491
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9492
tp9493
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9494
tp9495
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9496
tp9497
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9498
tp9499
asbsg211
(lp9500
g9483
asg213
g14
(g650
g16
Ntp9501
Rp9502
(dp9503
g20
Nsg656
g3280
sg665
(dp9504
sg667
Nsg669
(dp9505
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9506
(dp9507
g37
(lp9508
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9509
tp9510
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9511
tp9512
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9513
tp9514
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9515
tp9516
asbsg55
g14
(g56
g16
Ntp9517
Rp9518
(dp9519
g60
(I00
tp9520
sg62
S'float64'
p9521
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9522
(dp9523
g37
(lp9524
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p9525
tp9526
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9527
tp9528
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9529
tp9530
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9531
tp9532
asbsg211
(lp9533
g9444
asg213
g14
(g650
g16
Ntp9534
Rp9535
(dp9536
g20
Nsg656
g1575
sg665
(dp9537
sg667
Nsg669
(dp9538
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9539
(dp9540
g37
(lp9541
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9542
tp9543
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9544
tp9545
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9546
tp9547
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9548
tp9549
asbsg55
g14
(g56
g16
Ntp9550
Rp9551
(dp9552
g60
(I00
tp9553
sg62
S'float64'
p9554
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9555
(dp9556
g37
(lp9557
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p9558
tp9559
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p9560
tp9561
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9562
tp9563
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9564
tp9565
asbsg211
(lp9566
g9437
asg213
g14
(g650
g16
Ntp9567
Rp9568
(dp9569
g20
Nsg656
g1883
sg665
(dp9570
sg667
Nsg669
(dp9571
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9572
(dp9573
g37
(lp9574
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9575
tp9576
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9577
tp9578
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9579
tp9580
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9581
tp9582
asbsg55
g14
(g56
g16
Ntp9583
Rp9584
(dp9585
g60
(I00
tp9586
sg62
S'float64'
p9587
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9588
Rp9589
(dp9590
g32
g14
(g148
g16
Ntp9591
Rp9592
(dp9593
g12
(lp9594
g9382
asg34
(itheano.gof.utils
scratchpad
p9595
(dp9596
g37
(lp9597
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9598
tp9599
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p9600
tp9601
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p9602
tp9603
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9604
tp9605
asbsg211
(lp9606
g9589
asg213
g14
(g214
g16
Ntp9607
Rp9608
(dp9609
g218
(lp9610
sg220
(lp9611
I1
aI0
asg222
(lp9612
sg224
g7278
sg225
I00
sg226
(I1
I0
tp9613
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9614
(dp9615
bsg55
g14
(g56
g16
Ntp9616
Rp9617
(dp9618
g60
(I00
I00
tp9619
sg62
g7279
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9620
(dp9621
g37
(lp9622
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9623
tp9624
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9625
tp9626
a(g47
I4732
g1035
S'return _dot(a, b)'
p9627
tp9628
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9629
tp9630
asbsg211
(lp9631
g9430
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9632
(dp9633
bsg55
g14
(g56
g16
Ntp9634
Rp9635
(dp9636
g60
(I00
tp9637
sg62
S'float64'
p9638
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9639
Rp9640
(dp9641
g32
g14
(g148
g16
Ntp9642
Rp9643
(dp9644
g12
(lp9645
g14
(g28
g16
Ntp9646
Rp9647
(dp9648
g32
g14
(g148
g16
Ntp9649
Rp9650
(dp9651
g12
(lp9652
g14
(g28
g16
Ntp9653
Rp9654
(dp9655
g32
g14
(g148
g16
Ntp9656
Rp9657
(dp9658
g12
(lp9659
g9237
ag14
(g28
g16
Ntp9660
Rp9661
(dp9662
g32
g14
(g148
g16
Ntp9663
Rp9664
(dp9665
g12
(lp9666
g9396
asg34
(itheano.gof.utils
scratchpad
p9667
(dp9668
g37
(lp9669
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9670
tp9671
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p9672
tp9673
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p9674
tp9675
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9676
tp9677
asbsg211
(lp9678
g9661
asg213
g14
(g214
g16
Ntp9679
Rp9680
(dp9681
g218
(lp9682
sg220
(lp9683
I1
aI0
asg222
(lp9684
sg224
g7298
sg225
I00
sg226
(I1
I0
tp9685
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9686
(dp9687
bsg55
g14
(g56
g16
Ntp9688
Rp9689
(dp9690
g60
(I00
I00
tp9691
sg62
g7299
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9692
(dp9693
g37
(lp9694
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9695
tp9696
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9697
tp9698
a(g47
I4732
g1035
S'return _dot(a, b)'
p9699
tp9700
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9701
tp9702
asbsg211
(lp9703
g9654
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9704
(dp9705
bsg55
g14
(g56
g16
Ntp9706
Rp9707
(dp9708
g60
(I00
tp9709
sg62
S'float64'
p9710
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9711
Rp9712
(dp9713
g32
g14
(g148
g16
Ntp9714
Rp9715
(dp9716
g12
(lp9717
g14
(g28
g16
Ntp9718
Rp9719
(dp9720
g32
g14
(g148
g16
Ntp9721
Rp9722
(dp9723
g12
(lp9724
g1926
asg34
(itheano.gof.utils
scratchpad
p9725
(dp9726
g37
(lp9727
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9728
tp9729
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9730
tp9731
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p9732
tp9733
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9734
tp9735
asbsg211
(lp9736
g9719
asg213
g14
(g214
g16
Ntp9737
Rp9738
(dp9739
g218
(lp9740
sg220
(lp9741
sg222
(lp9742
I0
asg224
(tsg225
I00
sg226
(g227
tp9743
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9744
(dp9745
bsg55
g14
(g56
g16
Ntp9746
Rp9747
(dp9748
g60
(I01
tp9749
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9750
Rp9751
(dp9752
g32
g14
(g148
g16
Ntp9753
Rp9754
(dp9755
g12
(lp9756
g9255
asg34
(itheano.gof.utils
scratchpad
p9757
(dp9758
g37
(lp9759
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9760
tp9761
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9762
tp9763
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9764
tp9765
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9766
tp9767
asbsg211
(lp9768
g9751
asg213
g14
(g650
g16
Ntp9769
Rp9770
(dp9771
g20
Nsg656
g3280
sg665
(dp9772
sg667
Nsg669
(dp9773
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9774
(dp9775
g37
(lp9776
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9777
tp9778
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9779
tp9780
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9781
tp9782
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9783
tp9784
asbsg55
g14
(g56
g16
Ntp9785
Rp9786
(dp9787
g60
(I00
tp9788
sg62
S'float64'
p9789
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9790
(dp9791
g37
(lp9792
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p9793
tp9794
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9795
tp9796
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9797
tp9798
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9799
tp9800
asbsg211
(lp9801
g9712
asg213
g14
(g650
g16
Ntp9802
Rp9803
(dp9804
g20
Nsg656
g1575
sg665
(dp9805
sg667
Nsg669
(dp9806
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9807
(dp9808
g37
(lp9809
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9810
tp9811
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9812
tp9813
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9814
tp9815
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9816
tp9817
asbsg55
g14
(g56
g16
Ntp9818
Rp9819
(dp9820
g60
(I00
tp9821
sg62
S'float64'
p9822
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9823
(dp9824
g37
(lp9825
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p9826
tp9827
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p9828
tp9829
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9830
tp9831
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9832
tp9833
asbsg211
(lp9834
g9647
asg213
g14
(g650
g16
Ntp9835
Rp9836
(dp9837
g20
Nsg656
g1883
sg665
(dp9838
sg667
Nsg669
(dp9839
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9840
(dp9841
g37
(lp9842
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p9843
tp9844
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9845
tp9846
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9847
tp9848
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9849
tp9850
asbsg55
g14
(g56
g16
Ntp9851
Rp9852
(dp9853
g60
(I00
tp9854
sg62
S'float64'
p9855
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9856
Rp9857
(dp9858
g32
g14
(g148
g16
Ntp9859
Rp9860
(dp9861
g12
(lp9862
g9382
asg34
(itheano.gof.utils
scratchpad
p9863
(dp9864
g37
(lp9865
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9866
tp9867
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p9868
tp9869
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p9870
tp9871
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9872
tp9873
asbsg211
(lp9874
g9857
asg213
g14
(g214
g16
Ntp9875
Rp9876
(dp9877
g218
(lp9878
sg220
(lp9879
I1
aI0
asg222
(lp9880
sg224
g7278
sg225
I00
sg226
(I1
I0
tp9881
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9882
(dp9883
bsg55
g14
(g56
g16
Ntp9884
Rp9885
(dp9886
g60
(I00
I00
tp9887
sg62
g7279
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9888
(dp9889
g37
(lp9890
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9891
tp9892
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p9893
tp9894
a(g47
I4732
g1035
S'return _dot(a, b)'
p9895
tp9896
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9897
tp9898
asbsg211
(lp9899
g9640
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9900
(dp9901
bsg55
g14
(g56
g16
Ntp9902
Rp9903
(dp9904
g60
(I00
tp9905
sg62
S'float64'
p9906
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p9907
(dp9908
g37
(lp9909
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9910
tp9911
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p9912
tp9913
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p9914
tp9915
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9916
tp9917
asbsg211
(lp9918
g9423
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9919
(dp9920
g37
(lp9921
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p9922
tp9923
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9924
tp9925
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9926
tp9927
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9928
tp9929
asbsg55
g14
(g56
g16
Ntp9930
Rp9931
(dp9932
g60
(I00
tp9933
sg62
S'float64'
p9934
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag9297
asg34
(itheano.gof.utils
scratchpad
p9935
(dp9936
g37
(lp9937
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p9938
tp9939
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p9940
tp9941
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p9942
tp9943
a(g202
I401
g52
S'self.add_tag_trace(node)'
p9944
tp9945
asbsg211
(lp9946
g9416
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p9947
(dp9948
g37
(lp9949
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p9950
tp9951
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p9952
tp9953
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p9954
tp9955
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p9956
tp9957
asbsg55
g14
(g56
g16
Ntp9958
Rp9959
(dp9960
g60
(I00
tp9961
sg62
g9146
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp9962
Rp9963
(dp9964
g32
g14
(g148
g16
Ntp9965
Rp9966
(dp9967
g12
(lp9968
g14
(g28
g16
Ntp9969
Rp9970
(dp9971
g32
g14
(g148
g16
Ntp9972
Rp9973
(dp9974
g12
(lp9975
g14
(g28
g16
Ntp9976
Rp9977
(dp9978
g32
g14
(g148
g16
Ntp9979
Rp9980
(dp9981
g12
(lp9982
g14
(g28
g16
Ntp9983
Rp9984
(dp9985
g32
g14
(g148
g16
Ntp9986
Rp9987
(dp9988
g12
(lp9989
g14
(g28
g16
Ntp9990
Rp9991
(dp9992
g32
g14
(g148
g16
Ntp9993
Rp9994
(dp9995
g12
(lp9996
g9209
asg34
(itheano.gof.utils
scratchpad
p9997
(dp9998
g37
(lp9999
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10000
tp10001
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p10002
tp10003
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p10004
tp10005
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10006
tp10007
asbsg211
(lp10008
g9991
asg213
g14
(g214
g16
Ntp10009
Rp10010
(dp10011
g218
(lp10012
sg220
(lp10013
I0
asg222
(lp10014
sg224
g7354
sg225
I00
sg226
(I0
tp10015
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10016
(dp10017
bsg55
g14
(g56
g16
Ntp10018
Rp10019
(dp10020
g60
(I00
tp10021
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10022
(dp10023
g37
(lp10024
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10025
tp10026
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p10027
tp10028
a(g198
I324
g3811
S'return op(self)'
p10029
tp10030
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10031
tp10032
asbsg211
(lp10033
g9984
asg213
g14
(g214
g16
Ntp10034
Rp10035
(dp10036
g218
(lp10037
sg220
(lp10038
I0
asg222
(lp10039
I1
asg224
(I00
tp10040
sg225
I00
sg226
(I0
g227
tp10041
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10042
(dp10043
bsg55
g14
(g56
g16
Ntp10044
Rp10045
(dp10046
g60
(I00
I01
tp10047
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10048
Rp10049
(dp10050
g32
g14
(g148
g16
Ntp10051
Rp10052
(dp10053
g12
(lp10054
g14
(g28
g16
Ntp10055
Rp10056
(dp10057
g32
g14
(g148
g16
Ntp10058
Rp10059
(dp10060
g12
(lp10061
g9283
ag14
(g28
g16
Ntp10062
Rp10063
(dp10064
g32
g14
(g148
g16
Ntp10065
Rp10066
(dp10067
g12
(lp10068
g14
(g28
g16
Ntp10069
Rp10070
(dp10071
g32
g14
(g148
g16
Ntp10072
Rp10073
(dp10074
g12
(lp10075
g1926
asg34
(itheano.gof.utils
scratchpad
p10076
(dp10077
g37
g9459
sbsg211
(lp10078
g10070
asg213
g9470
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10079
(dp10080
bsg55
g9479
sg20
Nsbag14
(g28
g16
Ntp10081
Rp10082
(dp10083
g32
g14
(g148
g16
Ntp10084
Rp10085
(dp10086
g12
(lp10087
g9255
asg34
(itheano.gof.utils
scratchpad
p10088
(dp10089
g37
g9491
sbsg211
(lp10090
g10082
asg213
g9502
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10091
(dp10092
g37
g9508
sbsg55
g9518
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10093
(dp10094
g37
g9524
sbsg211
(lp10095
g10063
asg213
g9535
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10096
(dp10097
g37
g9541
sbsg55
g9551
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10098
(dp10099
g37
g9557
sbsg211
(lp10100
g10056
asg213
g9568
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10101
(dp10102
g37
g9574
sbsg55
g9584
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10103
(dp10104
g37
(lp10105
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10106
tp10107
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10108
tp10109
a(g198
I324
g3811
S'return op(self)'
p10110
tp10111
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10112
tp10113
asbsg211
(lp10114
g10049
asg213
g14
(g214
g16
Ntp10115
Rp10116
(dp10117
g218
(lp10118
sg220
(lp10119
I0
asg222
(lp10120
I0
asg224
(I00
tp10121
sg225
I00
sg226
(g227
I0
tp10122
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10123
(dp10124
bsg55
g14
(g56
g16
Ntp10125
Rp10126
(dp10127
g60
(I01
I00
tp10128
sg62
g9587
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10129
(dp10130
g37
(lp10131
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10132
tp10133
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10134
tp10135
a(g47
I4732
g1035
S'return _dot(a, b)'
p10136
tp10137
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10138
tp10139
asbsg211
(lp10140
g9977
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10141
(dp10142
bsg55
g14
(g56
g16
Ntp10143
Rp10144
(dp10145
g60
(I00
I00
tp10146
sg62
S'float64'
p10147
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10148
Rp10149
(dp10150
g32
g14
(g148
g16
Ntp10151
Rp10152
(dp10153
g12
(lp10154
g14
(g28
g16
Ntp10155
Rp10156
(dp10157
g32
g14
(g148
g16
Ntp10158
Rp10159
(dp10160
g12
(lp10161
g14
(g28
g16
Ntp10162
Rp10163
(dp10164
g32
g14
(g148
g16
Ntp10165
Rp10166
(dp10167
g12
(lp10168
g9209
asg34
(itheano.gof.utils
scratchpad
p10169
(dp10170
g37
(lp10171
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10172
tp10173
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p10174
tp10175
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p10176
tp10177
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10178
tp10179
asbsg211
(lp10180
g10163
asg213
g14
(g214
g16
Ntp10181
Rp10182
(dp10183
g218
(lp10184
sg220
(lp10185
I0
asg222
(lp10186
sg224
g7354
sg225
I00
sg226
(I0
tp10187
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10188
(dp10189
bsg55
g14
(g56
g16
Ntp10190
Rp10191
(dp10192
g60
(I00
tp10193
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10194
(dp10195
g37
(lp10196
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10197
tp10198
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p10199
tp10200
a(g198
I324
g3811
S'return op(self)'
p10201
tp10202
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10203
tp10204
asbsg211
(lp10205
g10156
asg213
g14
(g214
g16
Ntp10206
Rp10207
(dp10208
g218
(lp10209
sg220
(lp10210
I0
asg222
(lp10211
I1
asg224
(I00
tp10212
sg225
I00
sg226
(I0
g227
tp10213
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10214
(dp10215
bsg55
g14
(g56
g16
Ntp10216
Rp10217
(dp10218
g60
(I00
I01
tp10219
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10220
Rp10221
(dp10222
g32
g14
(g148
g16
Ntp10223
Rp10224
(dp10225
g12
(lp10226
g14
(g28
g16
Ntp10227
Rp10228
(dp10229
g32
g14
(g148
g16
Ntp10230
Rp10231
(dp10232
g12
(lp10233
g14
(g28
g16
Ntp10234
Rp10235
(dp10236
g32
g14
(g148
g16
Ntp10237
Rp10238
(dp10239
g12
(lp10240
g9237
ag14
(g28
g16
Ntp10241
Rp10242
(dp10243
g32
g14
(g148
g16
Ntp10244
Rp10245
(dp10246
g12
(lp10247
g9396
asg34
(itheano.gof.utils
scratchpad
p10248
(dp10249
g37
g9669
sbsg211
(lp10250
g10242
asg213
g9680
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10251
(dp10252
bsg55
g9689
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10253
(dp10254
g37
g9694
sbsg211
(lp10255
g10235
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10256
(dp10257
bsg55
g9707
sg20
Nsbag14
(g28
g16
Ntp10258
Rp10259
(dp10260
g32
g14
(g148
g16
Ntp10261
Rp10262
(dp10263
g12
(lp10264
g14
(g28
g16
Ntp10265
Rp10266
(dp10267
g32
g14
(g148
g16
Ntp10268
Rp10269
(dp10270
g12
(lp10271
g1926
asg34
(itheano.gof.utils
scratchpad
p10272
(dp10273
g37
g9727
sbsg211
(lp10274
g10266
asg213
g9738
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10275
(dp10276
bsg55
g9747
sg20
Nsbag14
(g28
g16
Ntp10277
Rp10278
(dp10279
g32
g14
(g148
g16
Ntp10280
Rp10281
(dp10282
g12
(lp10283
g9255
asg34
(itheano.gof.utils
scratchpad
p10284
(dp10285
g37
g9759
sbsg211
(lp10286
g10278
asg213
g9770
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10287
(dp10288
g37
g9776
sbsg55
g9786
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10289
(dp10290
g37
g9792
sbsg211
(lp10291
g10259
asg213
g9803
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10292
(dp10293
g37
g9809
sbsg55
g9819
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10294
(dp10295
g37
g9825
sbsg211
(lp10296
g10228
asg213
g9836
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10297
(dp10298
g37
g9842
sbsg55
g9852
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10299
(dp10300
g37
(lp10301
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10302
tp10303
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10304
tp10305
a(g198
I324
g3811
S'return op(self)'
p10306
tp10307
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10308
tp10309
asbsg211
(lp10310
g10221
asg213
g14
(g214
g16
Ntp10311
Rp10312
(dp10313
g218
(lp10314
sg220
(lp10315
I0
asg222
(lp10316
I0
asg224
(I00
tp10317
sg225
I00
sg226
(g227
I0
tp10318
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10319
(dp10320
bsg55
g14
(g56
g16
Ntp10321
Rp10322
(dp10323
g60
(I01
I00
tp10324
sg62
g9855
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10325
(dp10326
g37
(lp10327
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10328
tp10329
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10330
tp10331
a(g47
I4732
g1035
S'return _dot(a, b)'
p10332
tp10333
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10334
tp10335
asbsg211
(lp10336
g10149
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10337
(dp10338
bsg55
g14
(g56
g16
Ntp10339
Rp10340
(dp10341
g60
(I00
I00
tp10342
sg62
S'float64'
p10343
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10344
(dp10345
g37
(lp10346
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p10347
tp10348
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p10349
tp10350
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10351
tp10352
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10353
tp10354
asbsg211
(lp10355
g9970
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10356
(dp10357
g37
(lp10358
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10359
tp10360
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p10361
tp10362
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10363
tp10364
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p10365
tp10366
asbsg55
g9325
sg20
Nsbag9311
asg34
(itheano.gof.utils
scratchpad
p10367
(dp10368
g37
(lp10369
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p10370
tp10371
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p10372
tp10373
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10374
tp10375
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10376
tp10377
asbsg211
(lp10378
g9963
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10379
(dp10380
g37
(lp10381
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10382
tp10383
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p10384
tp10385
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10386
tp10387
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p10388
tp10389
asbsg55
g14
(g56
g16
Ntp10390
Rp10391
(dp10392
g60
(I00
I00
tp10393
sg62
S'float64'
p10394
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10395
Rp10396
(dp10397
g32
g14
(g148
g16
Ntp10398
Rp10399
(dp10400
g12
(lp10401
g14
(g28
g16
Ntp10402
Rp10403
(dp10404
g32
g14
(g148
g16
Ntp10405
Rp10406
(dp10407
g12
(lp10408
g14
(g28
g16
Ntp10409
Rp10410
(dp10411
g32
g14
(g148
g16
Ntp10412
Rp10413
(dp10414
g12
(lp10415
g14
(g28
g16
Ntp10416
Rp10417
(dp10418
g32
g14
(g148
g16
Ntp10419
Rp10420
(dp10421
g12
(lp10422
g14
(g28
g16
Ntp10423
Rp10424
(dp10425
g32
g14
(g148
g16
Ntp10426
Rp10427
(dp10428
g12
(lp10429
g9223
asg34
(itheano.gof.utils
scratchpad
p10430
(dp10431
g37
(lp10432
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10433
tp10434
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p10435
tp10436
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p10437
tp10438
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10439
tp10440
asbsg211
(lp10441
g10424
asg213
g14
(g214
g16
Ntp10442
Rp10443
(dp10444
g218
(lp10445
sg220
(lp10446
I0
asg222
(lp10447
sg224
g6618
sg225
I00
sg226
(I0
tp10448
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10449
(dp10450
bsg55
g14
(g56
g16
Ntp10451
Rp10452
(dp10453
g60
(I00
tp10454
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10455
(dp10456
g37
(lp10457
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10458
tp10459
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p10460
tp10461
a(g198
I324
g3811
S'return op(self)'
p10462
tp10463
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10464
tp10465
asbsg211
(lp10466
g10417
asg213
g14
(g214
g16
Ntp10467
Rp10468
(dp10469
g218
(lp10470
sg220
(lp10471
I0
asg222
(lp10472
I1
asg224
(I00
tp10473
sg225
I00
sg226
(I0
g227
tp10474
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10475
(dp10476
bsg55
g14
(g56
g16
Ntp10477
Rp10478
(dp10479
g60
(I00
I01
tp10480
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10481
Rp10482
(dp10483
g32
g14
(g148
g16
Ntp10484
Rp10485
(dp10486
g12
(lp10487
g14
(g28
g16
Ntp10488
Rp10489
(dp10490
g32
g14
(g148
g16
Ntp10491
Rp10492
(dp10493
g12
(lp10494
g9283
ag14
(g28
g16
Ntp10495
Rp10496
(dp10497
g32
g14
(g148
g16
Ntp10498
Rp10499
(dp10500
g12
(lp10501
g14
(g28
g16
Ntp10502
Rp10503
(dp10504
g32
g14
(g148
g16
Ntp10505
Rp10506
(dp10507
g12
(lp10508
g1926
asg34
(itheano.gof.utils
scratchpad
p10509
(dp10510
g37
g9459
sbsg211
(lp10511
g10503
asg213
g9470
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10512
(dp10513
bsg55
g9479
sg20
Nsbag14
(g28
g16
Ntp10514
Rp10515
(dp10516
g32
g14
(g148
g16
Ntp10517
Rp10518
(dp10519
g12
(lp10520
g9255
asg34
(itheano.gof.utils
scratchpad
p10521
(dp10522
g37
g9491
sbsg211
(lp10523
g10515
asg213
g9502
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10524
(dp10525
g37
g9508
sbsg55
g9518
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10526
(dp10527
g37
g9524
sbsg211
(lp10528
g10496
asg213
g9535
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10529
(dp10530
g37
g9541
sbsg55
g9551
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10531
(dp10532
g37
g9557
sbsg211
(lp10533
g10489
asg213
g9568
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10534
(dp10535
g37
g9574
sbsg55
g9584
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10536
(dp10537
g37
(lp10538
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10539
tp10540
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10541
tp10542
a(g198
I324
g3811
S'return op(self)'
p10543
tp10544
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10545
tp10546
asbsg211
(lp10547
g10482
asg213
g14
(g214
g16
Ntp10548
Rp10549
(dp10550
g218
(lp10551
sg220
(lp10552
I0
asg222
(lp10553
I0
asg224
(I00
tp10554
sg225
I00
sg226
(g227
I0
tp10555
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10556
(dp10557
bsg55
g14
(g56
g16
Ntp10558
Rp10559
(dp10560
g60
(I01
I00
tp10561
sg62
g9587
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10562
(dp10563
g37
(lp10564
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10565
tp10566
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10567
tp10568
a(g47
I4732
g1035
S'return _dot(a, b)'
p10569
tp10570
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10571
tp10572
asbsg211
(lp10573
g10410
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10574
(dp10575
bsg55
g14
(g56
g16
Ntp10576
Rp10577
(dp10578
g60
(I00
I00
tp10579
sg62
S'float64'
p10580
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10581
Rp10582
(dp10583
g32
g14
(g148
g16
Ntp10584
Rp10585
(dp10586
g12
(lp10587
g14
(g28
g16
Ntp10588
Rp10589
(dp10590
g32
g14
(g148
g16
Ntp10591
Rp10592
(dp10593
g12
(lp10594
g14
(g28
g16
Ntp10595
Rp10596
(dp10597
g32
g14
(g148
g16
Ntp10598
Rp10599
(dp10600
g12
(lp10601
g9223
asg34
(itheano.gof.utils
scratchpad
p10602
(dp10603
g37
(lp10604
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10605
tp10606
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p10607
tp10608
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p10609
tp10610
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10611
tp10612
asbsg211
(lp10613
g10596
asg213
g14
(g214
g16
Ntp10614
Rp10615
(dp10616
g218
(lp10617
sg220
(lp10618
I0
asg222
(lp10619
sg224
g6618
sg225
I00
sg226
(I0
tp10620
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10621
(dp10622
bsg55
g14
(g56
g16
Ntp10623
Rp10624
(dp10625
g60
(I00
tp10626
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10627
(dp10628
g37
(lp10629
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10630
tp10631
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p10632
tp10633
a(g198
I324
g3811
S'return op(self)'
p10634
tp10635
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10636
tp10637
asbsg211
(lp10638
g10589
asg213
g14
(g214
g16
Ntp10639
Rp10640
(dp10641
g218
(lp10642
sg220
(lp10643
I0
asg222
(lp10644
I1
asg224
(I00
tp10645
sg225
I00
sg226
(I0
g227
tp10646
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10647
(dp10648
bsg55
g14
(g56
g16
Ntp10649
Rp10650
(dp10651
g60
(I00
I01
tp10652
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10653
Rp10654
(dp10655
g32
g14
(g148
g16
Ntp10656
Rp10657
(dp10658
g12
(lp10659
g14
(g28
g16
Ntp10660
Rp10661
(dp10662
g32
g14
(g148
g16
Ntp10663
Rp10664
(dp10665
g12
(lp10666
g14
(g28
g16
Ntp10667
Rp10668
(dp10669
g32
g14
(g148
g16
Ntp10670
Rp10671
(dp10672
g12
(lp10673
g9237
ag14
(g28
g16
Ntp10674
Rp10675
(dp10676
g32
g14
(g148
g16
Ntp10677
Rp10678
(dp10679
g12
(lp10680
g9396
asg34
(itheano.gof.utils
scratchpad
p10681
(dp10682
g37
g9669
sbsg211
(lp10683
g10675
asg213
g9680
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10684
(dp10685
bsg55
g9689
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10686
(dp10687
g37
g9694
sbsg211
(lp10688
g10668
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10689
(dp10690
bsg55
g9707
sg20
Nsbag14
(g28
g16
Ntp10691
Rp10692
(dp10693
g32
g14
(g148
g16
Ntp10694
Rp10695
(dp10696
g12
(lp10697
g14
(g28
g16
Ntp10698
Rp10699
(dp10700
g32
g14
(g148
g16
Ntp10701
Rp10702
(dp10703
g12
(lp10704
g1926
asg34
(itheano.gof.utils
scratchpad
p10705
(dp10706
g37
g9727
sbsg211
(lp10707
g10699
asg213
g9738
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10708
(dp10709
bsg55
g9747
sg20
Nsbag14
(g28
g16
Ntp10710
Rp10711
(dp10712
g32
g14
(g148
g16
Ntp10713
Rp10714
(dp10715
g12
(lp10716
g9255
asg34
(itheano.gof.utils
scratchpad
p10717
(dp10718
g37
g9759
sbsg211
(lp10719
g10711
asg213
g9770
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10720
(dp10721
g37
g9776
sbsg55
g9786
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10722
(dp10723
g37
g9792
sbsg211
(lp10724
g10692
asg213
g9803
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10725
(dp10726
g37
g9809
sbsg55
g9819
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10727
(dp10728
g37
g9825
sbsg211
(lp10729
g10661
asg213
g9836
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10730
(dp10731
g37
g9842
sbsg55
g9852
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10732
(dp10733
g37
(lp10734
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10735
tp10736
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10737
tp10738
a(g198
I324
g3811
S'return op(self)'
p10739
tp10740
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10741
tp10742
asbsg211
(lp10743
g10654
asg213
g14
(g214
g16
Ntp10744
Rp10745
(dp10746
g218
(lp10747
sg220
(lp10748
I0
asg222
(lp10749
I0
asg224
(I00
tp10750
sg225
I00
sg226
(g227
I0
tp10751
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10752
(dp10753
bsg55
g14
(g56
g16
Ntp10754
Rp10755
(dp10756
g60
(I01
I00
tp10757
sg62
g9855
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10758
(dp10759
g37
(lp10760
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10761
tp10762
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10763
tp10764
a(g47
I4732
g1035
S'return _dot(a, b)'
p10765
tp10766
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10767
tp10768
asbsg211
(lp10769
g10582
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10770
(dp10771
bsg55
g14
(g56
g16
Ntp10772
Rp10773
(dp10774
g60
(I00
I00
tp10775
sg62
S'float64'
p10776
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10777
(dp10778
g37
(lp10779
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p10780
tp10781
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p10782
tp10783
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10784
tp10785
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10786
tp10787
asbsg211
(lp10788
g10403
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10789
(dp10790
g37
(lp10791
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10792
tp10793
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p10794
tp10795
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10796
tp10797
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p10798
tp10799
asbsg55
g9344
sg20
Nsbag9330
asg34
(itheano.gof.utils
scratchpad
p10800
(dp10801
g37
(lp10802
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p10803
tp10804
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p10805
tp10806
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10807
tp10808
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10809
tp10810
asbsg211
(lp10811
g10396
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10812
(dp10813
g37
(lp10814
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10815
tp10816
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p10817
tp10818
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10819
tp10820
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p10821
tp10822
asbsg55
g14
(g56
g16
Ntp10823
Rp10824
(dp10825
g60
(I00
I00
tp10826
sg62
g9165
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10827
Rp10828
(dp10829
g32
g14
(g148
g16
Ntp10830
Rp10831
(dp10832
g12
(lp10833
g14
(g28
g16
Ntp10834
Rp10835
(dp10836
g32
g14
(g148
g16
Ntp10837
Rp10838
(dp10839
g12
(lp10840
g14
(g28
g16
Ntp10841
Rp10842
(dp10843
g32
g14
(g148
g16
Ntp10844
Rp10845
(dp10846
g12
(lp10847
g14
(g28
g16
Ntp10848
Rp10849
(dp10850
g32
g14
(g148
g16
Ntp10851
Rp10852
(dp10853
g12
(lp10854
g9255
asg34
(itheano.gof.utils
scratchpad
p10855
(dp10856
g37
(lp10857
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10858
tp10859
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p10860
tp10861
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p10862
tp10863
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10864
tp10865
asbsg211
(lp10866
g10849
asg213
g14
(g214
g16
Ntp10867
Rp10868
(dp10869
g218
(lp10870
sg220
(lp10871
I0
asg222
(lp10872
sg224
g7534
sg225
I00
sg226
(I0
tp10873
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10874
(dp10875
bsg55
g14
(g56
g16
Ntp10876
Rp10877
(dp10878
g60
(I00
tp10879
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10880
(dp10881
g37
(lp10882
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10883
tp10884
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p10885
tp10886
a(g198
I324
g3811
S'return op(self)'
p10887
tp10888
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10889
tp10890
asbsg211
(lp10891
g10842
asg213
g14
(g214
g16
Ntp10892
Rp10893
(dp10894
g218
(lp10895
sg220
(lp10896
I0
asg222
(lp10897
I1
asg224
(I00
tp10898
sg225
I00
sg226
(I0
g227
tp10899
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10900
(dp10901
bsg55
g14
(g56
g16
Ntp10902
Rp10903
(dp10904
g60
(I00
I01
tp10905
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10906
Rp10907
(dp10908
g32
g14
(g148
g16
Ntp10909
Rp10910
(dp10911
g12
(lp10912
g9237
asg34
(itheano.gof.utils
scratchpad
p10913
(dp10914
g37
(lp10915
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10916
tp10917
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10918
tp10919
a(g198
I324
g3811
S'return op(self)'
p10920
tp10921
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10922
tp10923
asbsg211
(lp10924
g10907
asg213
g14
(g214
g16
Ntp10925
Rp10926
(dp10927
g218
(lp10928
sg220
(lp10929
I0
asg222
(lp10930
I0
asg224
(I00
tp10931
sg225
I00
sg226
(g227
I0
tp10932
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10933
(dp10934
bsg55
g14
(g56
g16
Ntp10935
Rp10936
(dp10937
g60
(I01
I00
tp10938
sg62
g8290
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p10939
(dp10940
g37
(lp10941
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p10942
tp10943
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p10944
tp10945
a(g47
I4732
g1035
S'return _dot(a, b)'
p10946
tp10947
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10948
tp10949
asbsg211
(lp10950
g10835
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10951
(dp10952
bsg55
g9363
sg20
Nsbag9349
asg34
(itheano.gof.utils
scratchpad
p10953
(dp10954
g37
(lp10955
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p10956
tp10957
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p10958
tp10959
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10960
tp10961
a(g202
I401
g52
S'self.add_tag_trace(node)'
p10962
tp10963
asbsg211
(lp10964
g10828
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p10965
(dp10966
g37
(lp10967
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p10968
tp10969
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p10970
tp10971
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p10972
tp10973
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p10974
tp10975
asbsg55
g14
(g56
g16
Ntp10976
Rp10977
(dp10978
g60
(I00
I00
tp10979
sg62
g9184
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp10980
Rp10981
(dp10982
g32
g14
(g148
g16
Ntp10983
Rp10984
(dp10985
g12
(lp10986
g14
(g28
g16
Ntp10987
Rp10988
(dp10989
g32
g14
(g148
g16
Ntp10990
Rp10991
(dp10992
g12
(lp10993
g14
(g28
g16
Ntp10994
Rp10995
(dp10996
g32
g14
(g148
g16
Ntp10997
Rp10998
(dp10999
g12
(lp11000
g9283
ag14
(g28
g16
Ntp11001
Rp11002
(dp11003
g32
g14
(g148
g16
Ntp11004
Rp11005
(dp11006
g12
(lp11007
g14
(g28
g16
Ntp11008
Rp11009
(dp11010
g32
g14
(g148
g16
Ntp11011
Rp11012
(dp11013
g12
(lp11014
g1926
asg34
(itheano.gof.utils
scratchpad
p11015
(dp11016
g37
g9459
sbsg211
(lp11017
g11009
asg213
g9470
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11018
(dp11019
bsg55
g9479
sg20
Nsbag14
(g28
g16
Ntp11020
Rp11021
(dp11022
g32
g14
(g148
g16
Ntp11023
Rp11024
(dp11025
g12
(lp11026
g9255
asg34
(itheano.gof.utils
scratchpad
p11027
(dp11028
g37
g9491
sbsg211
(lp11029
g11021
asg213
g9502
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11030
(dp11031
g37
g9508
sbsg55
g9518
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11032
(dp11033
g37
g9524
sbsg211
(lp11034
g11002
asg213
g9535
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11035
(dp11036
g37
g9541
sbsg55
g9551
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11037
(dp11038
g37
g9557
sbsg211
(lp11039
g10995
asg213
g9568
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11040
(dp11041
g37
g9574
sbsg55
g9584
sg20
Nsbag14
(g28
g16
Ntp11042
Rp11043
(dp11044
g32
g14
(g148
g16
Ntp11045
Rp11046
(dp11047
g12
(lp11048
g9368
asg34
(itheano.gof.utils
scratchpad
p11049
(dp11050
g37
(lp11051
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p11052
tp11053
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p11054
tp11055
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p11056
tp11057
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11058
tp11059
asbsg211
(lp11060
g11043
asg213
g14
(g214
g16
Ntp11061
Rp11062
(dp11063
g218
(lp11064
sg220
(lp11065
I1
aI0
asg222
(lp11066
sg224
g6707
sg225
I00
sg226
(I1
I0
tp11067
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11068
(dp11069
bsg55
g14
(g56
g16
Ntp11070
Rp11071
(dp11072
g60
(I00
I00
tp11073
sg62
g6708
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11074
(dp11075
g37
(lp11076
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11077
tp11078
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p11079
tp11080
a(g47
I4732
g1035
S'return _dot(a, b)'
p11081
tp11082
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11083
tp11084
asbsg211
(lp11085
g10988
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11086
(dp11087
bsg55
g14
(g56
g16
Ntp11088
Rp11089
(dp11090
g60
(I00
tp11091
sg62
S'float64'
p11092
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp11093
Rp11094
(dp11095
g32
g14
(g148
g16
Ntp11096
Rp11097
(dp11098
g12
(lp11099
g14
(g28
g16
Ntp11100
Rp11101
(dp11102
g32
g14
(g148
g16
Ntp11103
Rp11104
(dp11105
g12
(lp11106
g14
(g28
g16
Ntp11107
Rp11108
(dp11109
g32
g14
(g148
g16
Ntp11110
Rp11111
(dp11112
g12
(lp11113
g9237
ag14
(g28
g16
Ntp11114
Rp11115
(dp11116
g32
g14
(g148
g16
Ntp11117
Rp11118
(dp11119
g12
(lp11120
g9396
asg34
(itheano.gof.utils
scratchpad
p11121
(dp11122
g37
g9669
sbsg211
(lp11123
g11115
asg213
g9680
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11124
(dp11125
bsg55
g9689
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11126
(dp11127
g37
g9694
sbsg211
(lp11128
g11108
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11129
(dp11130
bsg55
g9707
sg20
Nsbag14
(g28
g16
Ntp11131
Rp11132
(dp11133
g32
g14
(g148
g16
Ntp11134
Rp11135
(dp11136
g12
(lp11137
g14
(g28
g16
Ntp11138
Rp11139
(dp11140
g32
g14
(g148
g16
Ntp11141
Rp11142
(dp11143
g12
(lp11144
g1926
asg34
(itheano.gof.utils
scratchpad
p11145
(dp11146
g37
g9727
sbsg211
(lp11147
g11139
asg213
g9738
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11148
(dp11149
bsg55
g9747
sg20
Nsbag14
(g28
g16
Ntp11150
Rp11151
(dp11152
g32
g14
(g148
g16
Ntp11153
Rp11154
(dp11155
g12
(lp11156
g9255
asg34
(itheano.gof.utils
scratchpad
p11157
(dp11158
g37
g9759
sbsg211
(lp11159
g11151
asg213
g9770
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11160
(dp11161
g37
g9776
sbsg55
g9786
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11162
(dp11163
g37
g9792
sbsg211
(lp11164
g11132
asg213
g9803
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11165
(dp11166
g37
g9809
sbsg55
g9819
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11167
(dp11168
g37
g9825
sbsg211
(lp11169
g11101
asg213
g9836
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11170
(dp11171
g37
g9842
sbsg55
g9852
sg20
Nsbag14
(g28
g16
Ntp11172
Rp11173
(dp11174
g32
g14
(g148
g16
Ntp11175
Rp11176
(dp11177
g12
(lp11178
g9368
asg34
(itheano.gof.utils
scratchpad
p11179
(dp11180
g37
(lp11181
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p11182
tp11183
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p11184
tp11185
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p11186
tp11187
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11188
tp11189
asbsg211
(lp11190
g11173
asg213
g14
(g214
g16
Ntp11191
Rp11192
(dp11193
g218
(lp11194
sg220
(lp11195
I1
aI0
asg222
(lp11196
sg224
g6707
sg225
I00
sg226
(I1
I0
tp11197
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11198
(dp11199
bsg55
g14
(g56
g16
Ntp11200
Rp11201
(dp11202
g60
(I00
I00
tp11203
sg62
g6708
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11204
(dp11205
g37
(lp11206
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11207
tp11208
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p11209
tp11210
a(g47
I4732
g1035
S'return _dot(a, b)'
p11211
tp11212
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11213
tp11214
asbsg211
(lp11215
g11094
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11216
(dp11217
bsg55
g14
(g56
g16
Ntp11218
Rp11219
(dp11220
g60
(I00
tp11221
sg62
S'float64'
p11222
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11223
(dp11224
g37
(lp11225
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11226
tp11227
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p11228
tp11229
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p11230
tp11231
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11232
tp11233
asbsg211
(lp11234
g10981
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11235
(dp11236
g37
(lp11237
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p11238
tp11239
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p11240
tp11241
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11242
tp11243
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p11244
tp11245
asbsg55
g14
(g56
g16
Ntp11246
Rp11247
(dp11248
g60
(I00
tp11249
sg62
g9203
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I6
sg1174
(lp11250
I00
aI00
aI00
aI00
aI00
asg1243
I00
sg665
g1176
((lp11251
tp11252
Rp11253
sg1180
I1
sg1181
I4
sg1182
(lp11254
g314
(g317
S'\x00\x00\x00\x00'
p11255
tp11256
Rp11257
ag314
(g317
S'\xff\xff\xff\xff'
p11258
tp11259
Rp11260
ag314
(g317
S'\xff\xff\xff\xff'
p11261
tp11262
Rp11263
ag314
(g317
S'\xff\xff\xff\xff'
p11264
tp11265
Rp11266
aI0
asg1002
I1
sg1188
I10
sg1189
I00
sg1190
I-1
sg1191
I5
sg20
S'grad_of_scan_fn'
p11267
sg1193
g1196
sg1221
g1176
((lp11268
(lp11269
g1191
aI5
aa(lp11270
g1232
aI0
aa(lp11271
g999
ag9409
aa(lp11272
g1243
aI00
aa(lp11273
g1002
aI1
aa(lp11274
g1227
aI1
aa(lp11275
g1229
a(lp11276
(lp11277
I1
aaaa(lp11278
g1190
aI-1
aa(lp11279
g1187
aI3
aa(lp11280
g1235
aI0
aa(lp11281
g1180
aI1
aa(lp11282
g1189
aI00
aa(lp11283
g8
aI00
aa(lp11284
g665
ag11253
aa(lp11285
g20
ag11267
aa(lp11286
g1240
aNaatp11287
Rp11288
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p11289
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p11290
(g11192
((g6705
((I-1
I10
tp11291
I00
tp11292
tp11293
tp11294
(I1
(I00
tp11295
tp11296
tp11297
(g11062
((g6705
(g11291
I00
tp11298
tp11299
tp11300
(I1
(I00
tp11301
tp11302
tp11303
(g9770
((g7532
((I-1
I3
tp11304
I00
tp11305
tp11306
tp11307
(I1
(I00
tp11308
tp11309
tp11310
(g9502
((g7532
(g11304
I00
tp11311
tp11312
tp11313
(I1
(I00
tp11314
tp11315
tp11316
(g10868
((g7532
(g11304
I00
tp11317
tp11318
tp11319
(I1
(I00
tp11320
tp11321
tp11322
(g9770
((g7532
(g11304
I00
tp11323
tp11324
tp11325
(I1
(I00
tp11326
tp11327
tp11328
(g9502
((g7532
(g11304
I00
tp11329
tp11330
tp11331
(I1
(I00
tp11332
tp11333
tp11334
(g9770
((g7532
(g11304
I00
tp11335
tp11336
tp11337
(I1
(I00
tp11338
tp11339
tp11340
(g9502
((g7532
(g11304
I00
tp11341
tp11342
tp11343
(I1
(I00
tp11344
tp11345
tp11346
(g9770
((g7532
(g11304
I00
tp11347
tp11348
tp11349
(I1
(I00
tp11350
tp11351
tp11352
(g9502
((g7532
(g11304
I00
tp11353
tp11354
tp11355
(I1
(I00
tp11356
tp11357
tp11358
(g9738
((g1936
((S'a173b056c810f5c9ee305c38ce680f38'
p11359
I11
I0
tp11360
I00
tp11361
tp11362
tp11363
(I1
(I00
tp11364
tp11365
tp11366
(g9470
((g1936
(g11360
I00
tp11367
tp11368
tp11369
(I1
(I00
tp11370
tp11371
tp11372
(g9738
((g1936
(g11360
I00
tp11373
tp11374
tp11375
(I1
(I00
tp11376
tp11377
tp11378
(g9470
((g1936
(g11360
I00
tp11379
tp11380
tp11381
(I1
(I00
tp11382
tp11383
tp11384
(g9738
((g1936
(g11360
I00
tp11385
tp11386
tp11387
(I1
(I00
tp11388
tp11389
tp11390
(g9470
((g1936
(g11360
I00
tp11391
tp11392
tp11393
(I1
(I00
tp11394
tp11395
tp11396
(g9738
((g1936
(g11360
I00
tp11397
tp11398
tp11399
(I1
(I00
tp11400
tp11401
tp11402
(g9470
((g1936
(g11360
I00
tp11403
tp11404
tp11405
(I1
(I00
tp11406
tp11407
tp11408
(g9680
((g7296
((I-1
I12
tp11409
I00
tp11410
tp11411
tp11412
(I1
(I00
tp11413
tp11414
tp11415
(g9680
((g7296
(g11409
I00
tp11416
tp11417
tp11418
(I1
(I00
tp11419
tp11420
tp11421
(g9680
((g7296
(g11409
I00
tp11422
tp11423
tp11424
(I1
(I00
tp11425
tp11426
tp11427
(g9680
((g7296
(g11409
I00
tp11428
tp11429
tp11430
(I1
(I00
tp11431
tp11432
tp11433
(g10926
((g9251
((I-1
I2
tp11434
I00
tp11435
tp11436
tp11437
(I1
(I00
tp11438
tp11439
tp11440
(g10615
((g6616
((I-1
I1
tp11441
I00
tp11442
tp11443
tp11444
(I1
(I00
tp11445
tp11446
tp11447
(g10443
((g6616
(g11441
I00
tp11448
tp11449
tp11450
(I1
(I00
tp11451
tp11452
tp11453
(g10182
((g7352
((I-1
I0
tp11454
I00
tp11455
tp11456
tp11457
(I1
(I00
tp11458
tp11459
tp11460
(g10010
((g7352
(g11454
I00
tp11461
tp11462
tp11463
(I1
(I00
tp11464
tp11465
tp11466
(g9876
((g7276
((I-1
I11
tp11467
I00
tp11468
tp11469
tp11470
(I1
(I00
tp11471
tp11472
tp11473
(g9608
((g7276
(g11467
I00
tp11474
tp11475
tp11476
(I1
(I00
tp11477
tp11478
tp11479
(g10893
((g10877
((I4
I0
tp11480
I00
tp11481
tp11482
tp11483
(I1
(I00
tp11484
tp11485
tp11486
(g9803
((g9747
((I11
I0
tp11487
I00
tp11488
tp11489
(g9786
((I2
I0
tp11490
I00
tp11491
tp11492
tp11493
(I1
(I00
tp11494
tp11495
tp11496
(g9535
((g9479
((I12
I0
tp11497
I00
tp11498
tp11499
(g9518
((I3
I0
tp11500
I00
tp11501
tp11502
tp11503
(I1
(I00
tp11504
tp11505
tp11506
(g9803
((g9747
((I13
I0
tp11507
I00
tp11508
tp11509
(g9786
((I5
I0
tp11510
I00
tp11511
tp11512
tp11513
(I1
(I00
tp11514
tp11515
tp11516
(g9535
((g9479
((I14
I0
tp11517
I00
tp11518
tp11519
(g9518
((I6
I0
tp11520
I00
tp11521
tp11522
tp11523
(I1
(I00
tp11524
tp11525
tp11526
(g9803
((g9747
((I15
I0
tp11527
I00
tp11528
tp11529
(g9786
((I7
I0
tp11530
I00
tp11531
tp11532
tp11533
(I1
(I00
tp11534
tp11535
tp11536
(g9535
((g9479
((I16
I0
tp11537
I00
tp11538
tp11539
(g9518
((I8
I0
tp11540
I00
tp11541
tp11542
tp11543
(I1
(I00
tp11544
tp11545
tp11546
(g9803
((g9747
((I17
I0
tp11547
I00
tp11548
tp11549
(g9786
((I9
I0
tp11550
I00
tp11551
tp11552
tp11553
(I1
(I00
tp11554
tp11555
tp11556
(g9535
((g9479
((I18
I0
tp11557
I00
tp11558
tp11559
(g9518
((I10
I0
tp11560
I00
tp11561
tp11562
tp11563
(I1
(I00
tp11564
tp11565
tp11566
(g1043
((g9251
(g11434
I00
tp11567
tp11568
(g9689
((I19
I0
tp11569
I00
tp11570
tp11571
tp11572
(I1
(I00
tp11573
tp11574
tp11575
(g1043
((g9251
(g11434
I00
tp11576
tp11577
(g9689
((I20
I0
tp11578
I00
tp11579
tp11580
tp11581
(I1
(I00
tp11582
tp11583
tp11584
(g1043
((g9251
(g11434
I00
tp11585
tp11586
(g9689
((I21
I0
tp11587
I00
tp11588
tp11589
tp11590
(I1
(I00
tp11591
tp11592
tp11593
(g1043
((g9251
(g11434
I00
tp11594
tp11595
(g9689
((I22
I0
tp11596
I00
tp11597
tp11598
tp11599
(I1
(I00
tp11600
tp11601
tp11602
(g10640
((g10624
((I24
I0
tp11603
I00
tp11604
tp11605
tp11606
(I1
(I00
tp11607
tp11608
tp11609
(g10468
((g10452
((I25
I0
tp11610
I00
tp11611
tp11612
tp11613
(I1
(I00
tp11614
tp11615
tp11616
(g10207
((g10191
((I26
I0
tp11617
I00
tp11618
tp11619
tp11620
(I1
(I00
tp11621
tp11622
tp11623
(g10035
((g10019
((I27
I0
tp11624
I00
tp11625
tp11626
tp11627
(I1
(I00
tp11628
tp11629
tp11630
(g1043
((g10903
((I30
I0
tp11631
I00
tp11632
tp11633
(g10936
((I23
I0
tp11634
I00
tp11635
tp11636
tp11637
(I1
(I00
tp11638
tp11639
tp11640
(g9568
((g7532
((I-1
I5
tp11641
I00
tp11642
tp11643
(g9551
((I32
I0
tp11644
I00
tp11645
tp11646
tp11647
(I1
(I00
tp11648
tp11649
tp11650
(g9568
((g7532
(g11641
I00
tp11651
tp11652
(g9551
((I34
I0
tp11653
I00
tp11654
tp11655
tp11656
(I1
(I00
tp11657
tp11658
tp11659
(g9568
((g7532
(g11641
I00
tp11660
tp11661
(g9551
((I36
I0
tp11662
I00
tp11663
tp11664
tp11665
(I1
(I00
tp11666
tp11667
tp11668
(g9568
((g7532
(g11641
I00
tp11669
tp11670
(g9551
((I38
I0
tp11671
I00
tp11672
tp11673
tp11674
(I1
(I00
tp11675
tp11676
tp11677
(g9836
((g9707
((I39
I0
tp11678
I00
tp11679
tp11680
(g9819
((I31
I0
tp11681
I00
tp11682
tp11683
tp11684
(I1
(I00
tp11685
tp11686
tp11687
(g9836
((g9707
((I40
I0
tp11688
I00
tp11689
tp11690
(g9819
((I33
I0
tp11691
I00
tp11692
tp11693
tp11694
(I1
(I00
tp11695
tp11696
tp11697
(g9836
((g9707
((I41
I0
tp11698
I00
tp11699
tp11700
(g9819
((I35
I0
tp11701
I00
tp11702
tp11703
tp11704
(I1
(I00
tp11705
tp11706
tp11707
(g9836
((g9707
((I42
I0
tp11708
I00
tp11709
tp11710
(g9819
((I37
I0
tp11711
I00
tp11712
tp11713
tp11714
(I1
(I00
tp11715
tp11716
tp11717
(g652
((g9363
((I47
I0
tp11718
I00
tp11719
tp11720
(g9363
((I-1
I9
tp11721
I00
tp11722
tp11723
tp11724
(I1
(I00
tp11725
tp11726
tp11727
(g1043
((g9584
((I48
I0
tp11728
I00
tp11729
tp11730
(g11071
((I1
I0
tp11731
I00
tp11732
tp11733
tp11734
(I1
(I00
tp11735
tp11736
tp11737
(g10549
((g9584
((I49
I0
tp11738
I00
tp11739
tp11740
tp11741
(I1
(I00
tp11742
tp11743
tp11744
(g10116
((g9584
((I50
I0
tp11745
I00
tp11746
tp11747
tp11748
(I1
(I00
tp11749
tp11750
tp11751
(g1043
((g9584
((I51
I0
tp11752
I00
tp11753
tp11754
(g9617
((I29
I0
tp11755
I00
tp11756
tp11757
tp11758
(I1
(I00
tp11759
tp11760
tp11761
(g1043
((g9852
((I52
I0
tp11762
I00
tp11763
tp11764
(g11201
((I0
I0
tp11765
I00
tp11766
tp11767
tp11768
(I1
(I00
tp11769
tp11770
tp11771
(g10745
((g9852
((I53
I0
tp11772
I00
tp11773
tp11774
tp11775
(I1
(I00
tp11776
tp11777
tp11778
(g10312
((g9852
((I54
I0
tp11779
I00
tp11780
tp11781
tp11782
(I1
(I00
tp11783
tp11784
tp11785
(g1043
((g9852
((I55
I0
tp11786
I00
tp11787
tp11788
(g9885
((I28
I0
tp11789
I00
tp11790
tp11791
tp11792
(I1
(I00
tp11793
tp11794
tp11795
(g1043
((g10478
((I44
I0
tp11796
I00
tp11797
tp11798
(g10559
((I58
I0
tp11799
I00
tp11800
tp11801
tp11802
(I1
(I00
tp11803
tp11804
tp11805
(g1043
((g10045
((I46
I0
tp11806
I00
tp11807
tp11808
(g10126
((I59
I0
tp11809
I00
tp11810
tp11811
tp11812
(I1
(I00
tp11813
tp11814
tp11815
(g652
((g11089
((I57
I0
tp11816
I00
tp11817
tp11818
(g11219
((I61
I0
tp11819
I00
tp11820
tp11821
tp11822
(I1
(I00
tp11823
tp11824
tp11825
(g1043
((g10650
((I43
I0
tp11826
I00
tp11827
tp11828
(g10755
((I62
I0
tp11829
I00
tp11830
tp11831
tp11832
(I1
(I00
tp11833
tp11834
tp11835
(g1043
((g10217
((I45
I0
tp11836
I00
tp11837
tp11838
(g10322
((I63
I0
tp11839
I00
tp11840
tp11841
tp11842
(I1
(I00
tp11843
tp11844
tp11845
(g652
((g9635
((I60
I0
tp11846
I00
tp11847
tp11848
(g9903
((I64
I0
tp11849
I00
tp11850
tp11851
tp11852
(I1
(I00
tp11853
tp11854
tp11855
(g652
((g10577
((I65
I0
tp11856
I00
tp11857
tp11858
(g10773
((I68
I0
tp11859
I00
tp11860
tp11861
tp11862
(I1
(I00
tp11863
tp11864
tp11865
(g652
((g10144
((I66
I0
tp11866
I00
tp11867
tp11868
(g10340
((I69
I0
tp11869
I00
tp11870
tp11871
tp11872
(I1
(I00
tp11873
tp11874
tp11875
(g652
((g9931
((I70
I0
tp11876
I00
tp11877
tp11878
(g7532
((I-1
I6
tp11879
I00
tp11880
tp11881
tp11882
(I1
(I00
tp11883
tp11884
tp11885
(g652
((g9344
((I71
I0
tp11886
I00
tp11887
tp11888
(g9344
((I-1
I8
tp11889
I00
tp11890
tp11891
tp11892
(I1
(I00
tp11893
tp11894
tp11895
(g652
((g9325
((I72
I0
tp11896
I00
tp11897
tp11898
(g9325
((I-1
I7
tp11899
I00
tp11900
tp11901
tp11902
(I1
(I00
tp11903
tp11904
tp11905
tp11906
tp11907
sg1232
I0
sg1301
(lp11908
I00
aI00
aI00
aI00
aI00
asg1303
I1
sg1235
I0
sg1240
Nsg1304
(lp11909
g9143
ag14
(g56
g16
Ntp11910
Rp11911
(dp11912
g60
(I00
I00
I00
tp11913
sg62
g10394
sg64
g68
sg71
I00
sg20
Nsbag9162
ag9181
ag9200
asg1187
I3
sg1227
I1
sg1310
I10
sg1229
g11276
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p11914
(dp11915
g37
(lp11916
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p11917
tp11918
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p11919
tp11920
a(g893
I440
g206
S'[t() for t in self.output_types])'
p11921
tp11922
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p11923
tp11924
asbsg55
g11911
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11925
(dp11926
g37
(lp11927
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p11928
tp11929
a(g893
I1880
g894
S'gradients.append(x[-1])'
p11930
tp11931
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p11932
tp11933
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11934
tp11935
asbsg211
(lp11936
g6751
asg213
g14
(g308
g16
Ntp11937
Rp11938
(dp11939
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p11940
tp11941
Rp11942
tp11943
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11944
(dp11945
bsg55
g14
(g56
g16
Ntp11946
Rp11947
(dp11948
g60
(I00
I00
tp11949
sg62
g10394
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11950
(dp11951
g37
(lp11952
(g105
I76
g106
S'self.initTraining()'
p11953
tp11954
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p11955
tp11956
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p11957
tp11958
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11959
tp11960
asbsg211
(lp11961
g6712
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11962
(dp11963
g37
(lp11964
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p11965
tp11966
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p11967
tp11968
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11969
tp11970
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p11971
tp11972
asbsg55
g14
(g56
g16
Ntp11973
Rp11974
(dp11975
g60
(I00
I00
tp11976
sg62
S'float64'
p11977
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p11978
(dp11979
g37
(lp11980
(g105
I76
g106
S'self.initTraining()'
p11981
tp11982
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p11983
tp11984
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p11985
tp11986
a(g202
I401
g52
S'self.add_tag_trace(node)'
p11987
tp11988
asbsg211
(lp11989
g6685
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p11990
(dp11991
g37
(lp11992
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p11993
tp11994
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p11995
tp11996
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p11997
tp11998
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p11999
tp12000
asbsg55
g14
(g56
g16
Ntp12001
Rp12002
(dp12003
g60
(I00
I00
tp12004
sg62
S'float64'
p12005
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g6695
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g6692
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp12006
Rp12007
(dp12008
g20
Nsg21
g14
(g28
g16
Ntp12009
Rp12010
(dp12011
g32
g14
(g148
g16
Ntp12012
Rp12013
(dp12014
g12
(lp12015
g7263
ag14
(g28
g16
Ntp12016
Rp12017
(dp12018
g32
g14
(g148
g16
Ntp12019
Rp12020
(dp12021
g12
(lp12022
g14
(g28
g16
Ntp12023
Rp12024
(dp12025
g32
g14
(g148
g16
Ntp12026
Rp12027
(dp12028
g12
(lp12029
g6665
asg34
(itheano.gof.utils
scratchpad
p12030
(dp12031
g37
(lp12032
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12033
tp12034
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12035
tp12036
a(g205
I533
g206
S'inplace=False)(input))'
p12037
tp12038
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12039
tp12040
asbsg211
(lp12041
g12024
asg213
g14
(g214
g16
Ntp12042
Rp12043
(dp12044
g218
(lp12045
sg220
(lp12046
sg222
(lp12047
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp12048
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12049
(dp12050
bsg55
g14
(g56
g16
Ntp12051
Rp12052
(dp12053
g60
(I01
I01
tp12054
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp12055
Rp12056
(dp12057
g32
g14
(g148
g16
Ntp12058
Rp12059
(dp12060
g12
(lp12061
g9148
asg34
(itheano.gof.utils
scratchpad
p12062
(dp12063
g37
(lp12064
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12065
tp12066
a(g893
I1880
g894
S'gradients.append(x[-1])'
p12067
tp12068
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p12069
tp12070
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12071
tp12072
asbsg211
(lp12073
g12056
asg213
g14
(g308
g16
Ntp12074
Rp12075
(dp12076
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p12077
tp12078
Rp12079
tp12080
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12081
(dp12082
bsg55
g14
(g56
g16
Ntp12083
Rp12084
(dp12085
g60
(I00
I00
tp12086
sg62
g9165
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12087
(dp12088
g37
(lp12089
(g105
I76
g106
S'self.initTraining()'
p12090
tp12091
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p12092
tp12093
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12094
tp12095
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12096
tp12097
asbsg211
(lp12098
g12017
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12099
(dp12100
g37
(lp12101
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12102
tp12103
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12104
tp12105
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12106
tp12107
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12108
tp12109
asbsg55
g14
(g56
g16
Ntp12110
Rp12111
(dp12112
g60
(I00
I00
tp12113
sg62
S'float64'
p12114
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12115
(dp12116
g37
(lp12117
(g105
I76
g106
S'self.initTraining()'
p12118
tp12119
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p12120
tp12121
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p12122
tp12123
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12124
tp12125
asbsg211
(lp12126
g12010
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12127
(dp12128
g37
(lp12129
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p12130
tp12131
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12132
tp12133
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12134
tp12135
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12136
tp12137
asbsg55
g14
(g56
g16
Ntp12138
Rp12139
(dp12140
g60
(I00
I00
tp12141
sg62
S'float64'
p12142
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g7266
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g7263
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp12143
Rp12144
(dp12145
g20
Nsg21
g14
(g28
g16
Ntp12146
Rp12147
(dp12148
g32
g14
(g148
g16
Ntp12149
Rp12150
(dp12151
g12
(lp12152
g7283
ag14
(g28
g16
Ntp12153
Rp12154
(dp12155
g32
g14
(g148
g16
Ntp12156
Rp12157
(dp12158
g12
(lp12159
g14
(g28
g16
Ntp12160
Rp12161
(dp12162
g32
g14
(g148
g16
Ntp12163
Rp12164
(dp12165
g12
(lp12166
g6665
asg34
(itheano.gof.utils
scratchpad
p12167
(dp12168
g37
(lp12169
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12170
tp12171
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12172
tp12173
a(g205
I533
g206
S'inplace=False)(input))'
p12174
tp12175
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12176
tp12177
asbsg211
(lp12178
g12161
asg213
g14
(g214
g16
Ntp12179
Rp12180
(dp12181
g218
(lp12182
sg220
(lp12183
sg222
(lp12184
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp12185
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12186
(dp12187
bsg55
g14
(g56
g16
Ntp12188
Rp12189
(dp12190
g60
(I01
I01
tp12191
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp12192
Rp12193
(dp12194
g32
g14
(g148
g16
Ntp12195
Rp12196
(dp12197
g12
(lp12198
g9167
asg34
(itheano.gof.utils
scratchpad
p12199
(dp12200
g37
(lp12201
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p12202
tp12203
a(g893
I1880
g894
S'gradients.append(x[-1])'
p12204
tp12205
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p12206
tp12207
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12208
tp12209
asbsg211
(lp12210
g12193
asg213
g14
(g308
g16
Ntp12211
Rp12212
(dp12213
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p12214
tp12215
Rp12216
tp12217
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12218
(dp12219
bsg55
g14
(g56
g16
Ntp12220
Rp12221
(dp12222
g60
(I00
I00
tp12223
sg62
g9184
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12224
(dp12225
g37
(lp12226
(g105
I76
g106
S'self.initTraining()'
p12227
tp12228
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p12229
tp12230
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12231
tp12232
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12233
tp12234
asbsg211
(lp12235
g12154
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12236
(dp12237
g37
(lp12238
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12239
tp12240
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12241
tp12242
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12243
tp12244
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12245
tp12246
asbsg55
g14
(g56
g16
Ntp12247
Rp12248
(dp12249
g60
(I00
I00
tp12250
sg62
S'float64'
p12251
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12252
(dp12253
g37
(lp12254
(g105
I76
g106
S'self.initTraining()'
p12255
tp12256
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p12257
tp12258
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p12259
tp12260
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12261
tp12262
asbsg211
(lp12263
g12147
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12264
(dp12265
g37
(lp12266
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p12267
tp12268
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12269
tp12270
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p12271
tp12272
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12273
tp12274
asbsg55
g14
(g56
g16
Ntp12275
Rp12276
(dp12277
g60
(I00
I00
tp12278
sg62
S'float64'
p12279
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g7286
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g7283
sg72
I01
sg73
Nsbasg211
g14
(g6072
g16
Ntp12280
Rp12281
(dp12282
g27
g7995
sg23
I00
sbsg1240
g1196
stp12283
Rp12284
(lp12285
g14
(g158
g16
Ntp12286
Rp12287
(dp12288
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12289
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6616
sg73
Nsbag14
(g158
g16
Ntp12290
Rp12291
(dp12292
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12293
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6637
sg73
Nsbag14
(g158
g16
Ntp12294
Rp12295
(dp12296
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12297
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6658
sg73
Nsbag14
(g158
g16
Ntp12298
Rp12299
(dp12300
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12301
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6679
sg73
Nsbag14
(g158
g16
Ntp12302
Rp12303
(dp12304
g6082
I0
sg20
Nsg6083
I00
sg162
g6697
sg25
I01
sg24
I00
sg173
I00
sg55
g6705
sg73
Nsbag14
(g158
g16
Ntp12305
Rp12306
(dp12307
g6082
I0
sg20
Nsg6083
I00
sg162
g7268
sg25
I01
sg24
I00
sg173
I00
sg55
g7276
sg73
Nsbag14
(g158
g16
Ntp12308
Rp12309
(dp12310
g6082
I0
sg20
Nsg6083
I00
sg162
g7288
sg25
I01
sg24
I00
sg173
I00
sg55
g7296
sg73
Nsba(lp12311
NaNaNaNag6700
ag7271
ag7291
atp12312
Rp12313
sg6109
I2
sg6110
g6623
sg6111
g7283
sg6112
g5
(g6
((dp12314
g8
Nsg9
g10
sg11
I00
sg12
(lp12315
g14
(g15
g16
Ntp12316
Rp12317
(dp12318
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g6623
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp12319
Rp12320
(dp12321
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g6602
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp12322
Rp12323
(dp12324
g20
Nsg21
Nsg22
g6695
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g6692
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp12325
Rp12326
(dp12327
g20
Nsg21
Nsg22
g7266
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g7263
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp12328
Rp12329
(dp12330
g20
Nsg21
Nsg22
g7286
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g7283
sg72
I01
sg73
Nsbasg211
(lp12331
g14
(g6072
g16
Ntp12332
Rp12333
(dp12334
g27
g14
(g28
g16
Ntp12335
Rp12336
(dp12337
g32
g14
(g148
g16
Ntp12338
Rp12339
(dp12340
g12
(lp12341
g14
(g28
g16
Ntp12342
Rp12343
(dp12344
g32
g14
(g148
g16
Ntp12345
Rp12346
(dp12347
g12
(lp12348
g14
(g28
g16
Ntp12349
Rp12350
(dp12351
g32
g14
(g148
g16
Ntp12352
Rp12353
(dp12354
g12
(lp12355
g14
(g28
g16
Ntp12356
Rp12357
(dp12358
g32
g14
(g148
g16
Ntp12359
Rp12360
(dp12361
g12
(lp12362
g14
(g28
g16
Ntp12363
Rp12364
(dp12365
g32
g14
(g148
g16
Ntp12366
Rp12367
(dp12368
g12
(lp12369
g6623
asg34
(itheano.gof.utils
scratchpad
p12370
(dp12371
g37
g6808
sbsg211
(lp12372
g12364
asg213
g6819
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12373
(dp12374
bsg55
g6830
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12375
(dp12376
g37
g6835
sbsg211
(lp12377
g12357
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12378
(dp12379
g37
g6847
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12380
(dp12381
g37
g6858
sbsg211
(lp12382
g12350
asg213
g6869
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12383
(dp12384
bsg55
g6878
sg20
Nsbag14
(g28
g16
Ntp12385
Rp12386
(dp12387
g32
g14
(g148
g16
Ntp12388
Rp12389
(dp12390
g12
(lp12391
g12364
ag14
(g401
g16
Ntp12392
Rp12393
(dp12394
g32
g14
(g148
g16
Ntp12395
Rp12396
(dp12397
g12
(lp12398
g12350
asg34
(itheano.gof.utils
scratchpad
p12399
(dp12400
g37
g6896
sbsg211
(lp12401
g12393
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12402
(dp12403
bsg55
g6909
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12404
(dp12405
g37
g6913
sbsg211
(lp12406
g12386
asg213
g6924
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12407
(dp12408
bsg55
g6935
sg20
Nsbag14
(g28
g16
Ntp12409
Rp12410
(dp12411
g32
g14
(g148
g16
Ntp12412
Rp12413
(dp12414
g12
(lp12415
g14
(g28
g16
Ntp12416
Rp12417
(dp12418
g32
g14
(g148
g16
Ntp12419
Rp12420
(dp12421
g12
(lp12422
g477
ag14
(g28
g16
Ntp12423
Rp12424
(dp12425
g32
g14
(g148
g16
Ntp12426
Rp12427
(dp12428
g12
(lp12429
g12350
ag14
(g28
g16
Ntp12430
Rp12431
(dp12432
g32
g14
(g148
g16
Ntp12433
Rp12434
(dp12435
g12
(lp12436
g14
(g28
g16
Ntp12437
Rp12438
(dp12439
g32
g14
(g148
g16
Ntp12440
Rp12441
(dp12442
g12
(lp12443
g14
(g28
g16
Ntp12444
Rp12445
(dp12446
g32
g14
(g148
g16
Ntp12447
Rp12448
(dp12449
g12
(lp12450
g14
(g28
g16
Ntp12451
Rp12452
(dp12453
g32
g14
(g148
g16
Ntp12454
Rp12455
(dp12456
g12
(lp12457
g6602
asg34
(itheano.gof.utils
scratchpad
p12458
(dp12459
g37
g6989
sbsg211
(lp12460
g12452
asg213
g7000
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12461
(dp12462
bsg55
g7009
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12463
(dp12464
g37
g7014
sbsg211
(lp12465
g12445
asg213
g7025
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12466
(dp12467
g37
g7030
sbsg55
g7040
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12468
(dp12469
g37
g7045
sbsg211
(lp12470
g12438
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12471
(dp12472
g37
g7057
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12473
(dp12474
g37
g7068
sbsg211
(lp12475
g12431
asg213
g7079
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12476
(dp12477
bsg55
g7088
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12478
(dp12479
g37
g7092
sbsg211
(lp12480
g12424
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12481
(dp12482
g37
g7104
sbsg55
g7114
sg20
Nsbag14
(g28
g16
Ntp12483
Rp12484
(dp12485
g32
g14
(g148
g16
Ntp12486
Rp12487
(dp12488
g12
(lp12489
g14
(g28
g16
Ntp12490
Rp12491
(dp12492
g32
g14
(g148
g16
Ntp12493
Rp12494
(dp12495
g12
(lp12496
g12445
asg34
(itheano.gof.utils
scratchpad
p12497
(dp12498
g37
g7133
sbsg211
(lp12499
g12491
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12500
(dp12501
g37
g7145
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12502
(dp12503
g37
g7156
sbsg211
(lp12504
g12484
asg213
g7167
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12505
(dp12506
bsg55
g7176
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12507
(dp12508
g37
g7180
sbsg211
(lp12509
g12417
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12510
(dp12511
g37
g7192
sbsg55
g7202
sg20
Nsbag12445
ag14
(g401
g16
Ntp12512
Rp12513
(dp12514
g32
g14
(g148
g16
Ntp12515
Rp12516
(dp12517
g12
(lp12518
g12431
asg34
(itheano.gof.utils
scratchpad
p12519
(dp12520
g37
g7214
sbsg211
(lp12521
g12513
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12522
(dp12523
bsg55
g7227
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12524
(dp12525
g37
g7231
sbsg211
(lp12526
g12410
asg213
g7242
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12527
(dp12528
g37
g7253
sbsg55
g7202
sg20
Nsbag12350
ag6692
ag7263
ag7283
asg34
(itheano.gof.utils
scratchpad
p12529
(dp12530
g37
g7857
sbsg211
(lp12531
g12343
ag14
(g28
g16
Ntp12532
Rp12533
(dp12534
g32
g12346
sg33
I1
sg34
(itheano.gof.utils
scratchpad
p12535
(dp12536
g37
g7883
sbsg55
g7643
sg20
Nsbasg213
g7334
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12537
(dp12538
g37
g7872
sbsg55
g7329
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12539
(dp12540
g37
(lp12541
(g298
I1044
g299
S'offsets)'
p12542
tp12543
a(g298
I1029
g6343
S'out_ls.append(out[offsets[idx]:])'
p12544
tp12545
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p12546
tp12547
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12548
tp12549
asbsg211
(lp12550
g12336
asg213
g14
(g308
g16
Ntp12551
Rp12552
(dp12553
g312
(g313
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p12554
tp12555
Rp12556
NNtp12557
Rp12558
tp12559
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12560
(dp12561
bsg55
g14
(g56
g16
Ntp12562
Rp12563
(dp12564
g60
(I00
I00
tp12565
sg62
g7332
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg23
I00
sbag14
(g6072
g16
Ntp12566
Rp12567
(dp12568
g27
g12533
sg23
I00
sbasg1240
g1196
stp12569
Rp12570
(lp12571
g14
(g158
g16
Ntp12572
Rp12573
(dp12574
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12575
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6637
sg73
Nsbag14
(g158
g16
Ntp12576
Rp12577
(dp12578
g6082
I1
sg20
Nsg6083
I01
sg162
(lp12579
Nasg25
I00
sg24
I00
sg173
I00
sg55
g6616
sg73
Nsbag14
(g158
g16
Ntp12580
Rp12581
(dp12582
g6082
I0
sg20
Nsg6083
I00
sg162
g6697
sg25
I01
sg24
I00
sg173
I00
sg55
g6705
sg73
Nsbag14
(g158
g16
Ntp12583
Rp12584
(dp12585
g6082
I0
sg20
Nsg6083
I00
sg162
g7268
sg25
I01
sg24
I00
sg173
I00
sg55
g7276
sg73
Nsbag14
(g158
g16
Ntp12586
Rp12587
(dp12588
g6082
I0
sg20
Nsg6083
I00
sg162
g7288
sg25
I01
sg24
I00
sg173
I00
sg55
g7296
sg73
Nsba(lp12589
NaNag6700
ag7271
ag7291
atp12590
Rp12591
sg6392
g7263
sg6393
g6602
sg6394
g14
(g28
g16
Ntp12592
Rp12593
(dp12594
g32
g14
(g148
g16
Ntp12595
Rp12596
(dp12597
g12
(lp12598
g14
(g28
g16
Ntp12599
Rp12600
(dp12601
g32
g14
(g148
g16
Ntp12602
Rp12603
(dp12604
g12
(lp12605
g14
(g28
g16
Ntp12606
Rp12607
(dp12608
g32
g14
(g148
g16
Ntp12609
Rp12610
(dp12611
g12
(lp12612
g14
(g28
g16
Ntp12613
Rp12614
(dp12615
g32
g14
(g148
g16
Ntp12616
Rp12617
(dp12618
g12
(lp12619
g6623
asg34
(itheano.gof.utils
scratchpad
p12620
(dp12621
g37
g6808
sbsg211
(lp12622
g12614
asg213
g6819
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12623
(dp12624
bsg55
g6830
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12625
(dp12626
g37
g6835
sbsg211
(lp12627
g12607
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12628
(dp12629
g37
g6847
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12630
(dp12631
g37
g6858
sbsg211
(lp12632
g12600
asg213
g6869
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12633
(dp12634
bsg55
g6878
sg20
Nsbag14
(g28
g16
Ntp12635
Rp12636
(dp12637
g32
g14
(g148
g16
Ntp12638
Rp12639
(dp12640
g12
(lp12641
g12614
ag14
(g401
g16
Ntp12642
Rp12643
(dp12644
g32
g14
(g148
g16
Ntp12645
Rp12646
(dp12647
g12
(lp12648
g12600
asg34
(itheano.gof.utils
scratchpad
p12649
(dp12650
g37
g6896
sbsg211
(lp12651
g12643
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12652
(dp12653
bsg55
g6909
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12654
(dp12655
g37
g6913
sbsg211
(lp12656
g12636
asg213
g6924
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12657
(dp12658
bsg55
g6935
sg20
Nsbag14
(g28
g16
Ntp12659
Rp12660
(dp12661
g32
g14
(g148
g16
Ntp12662
Rp12663
(dp12664
g12
(lp12665
g14
(g28
g16
Ntp12666
Rp12667
(dp12668
g32
g14
(g148
g16
Ntp12669
Rp12670
(dp12671
g12
(lp12672
g477
ag14
(g28
g16
Ntp12673
Rp12674
(dp12675
g32
g14
(g148
g16
Ntp12676
Rp12677
(dp12678
g12
(lp12679
g12600
ag14
(g28
g16
Ntp12680
Rp12681
(dp12682
g32
g14
(g148
g16
Ntp12683
Rp12684
(dp12685
g12
(lp12686
g14
(g28
g16
Ntp12687
Rp12688
(dp12689
g32
g14
(g148
g16
Ntp12690
Rp12691
(dp12692
g12
(lp12693
g14
(g28
g16
Ntp12694
Rp12695
(dp12696
g32
g14
(g148
g16
Ntp12697
Rp12698
(dp12699
g12
(lp12700
g14
(g28
g16
Ntp12701
Rp12702
(dp12703
g32
g14
(g148
g16
Ntp12704
Rp12705
(dp12706
g12
(lp12707
g6602
asg34
(itheano.gof.utils
scratchpad
p12708
(dp12709
g37
g6989
sbsg211
(lp12710
g12702
asg213
g7000
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12711
(dp12712
bsg55
g7009
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12713
(dp12714
g37
g7014
sbsg211
(lp12715
g12695
asg213
g7025
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12716
(dp12717
g37
g7030
sbsg55
g7040
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12718
(dp12719
g37
g7045
sbsg211
(lp12720
g12688
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12721
(dp12722
g37
g7057
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12723
(dp12724
g37
g7068
sbsg211
(lp12725
g12681
asg213
g7079
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12726
(dp12727
bsg55
g7088
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12728
(dp12729
g37
g7092
sbsg211
(lp12730
g12674
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12731
(dp12732
g37
g7104
sbsg55
g7114
sg20
Nsbag14
(g28
g16
Ntp12733
Rp12734
(dp12735
g32
g14
(g148
g16
Ntp12736
Rp12737
(dp12738
g12
(lp12739
g14
(g28
g16
Ntp12740
Rp12741
(dp12742
g32
g14
(g148
g16
Ntp12743
Rp12744
(dp12745
g12
(lp12746
g12695
asg34
(itheano.gof.utils
scratchpad
p12747
(dp12748
g37
g7133
sbsg211
(lp12749
g12741
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12750
(dp12751
g37
g7145
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12752
(dp12753
g37
g7156
sbsg211
(lp12754
g12734
asg213
g7167
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12755
(dp12756
bsg55
g7176
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12757
(dp12758
g37
g7180
sbsg211
(lp12759
g12667
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12760
(dp12761
g37
g7192
sbsg55
g7202
sg20
Nsbag12695
ag14
(g401
g16
Ntp12762
Rp12763
(dp12764
g32
g14
(g148
g16
Ntp12765
Rp12766
(dp12767
g12
(lp12768
g12681
asg34
(itheano.gof.utils
scratchpad
p12769
(dp12770
g37
g7214
sbsg211
(lp12771
g12763
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12772
(dp12773
bsg55
g7227
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p12774
(dp12775
g37
g7231
sbsg211
(lp12776
g12660
asg213
g7242
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12777
(dp12778
g37
g7253
sbsg55
g7202
sg20
Nsbag12600
ag6692
ag7263
ag7283
asg34
(itheano.gof.utils
scratchpad
p12779
(dp12780
g37
g7857
sbsg211
(lp12781
g14
(g28
g16
Ntp12782
Rp12783
(dp12784
g32
g12596
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p12785
(dp12786
g37
g7872
sbsg55
g7329
sg20
Nsbag12593
asg213
g7334
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p12787
(dp12788
g37
g7883
sbsg55
g7643
sg20
Nsbsg6592
I1
sg6593
g6692
sba(irnn
RNN
p12789
(dp12790
g3
I1
sg4
g5
(g6
((dp12791
g8
Nsg9
g10
sg11
I00
sg12
(lp12792
g14
(g15
g16
Ntp12793
Rp12794
(dp12795
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp12796
Rp12797
(dp12798
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p12799
(dp12800
g37
(lp12801
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p12802
tp12803
a(g43
I34
g44
S'h0 = self.__h0 = TT.vector()'
p12804
tp12805
a(g47
I744
g48
S'return type(name)'
p12806
tp12807
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12808
tp12809
asbsg55
g14
(g56
g16
Ntp12810
Rp12811
(dp12812
g60
(I00
tp12813
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp12814
Rp12815
(dp12816
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp12817
Rp12818
(dp12819
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p12820
(dp12821
g37
(lp12822
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p12823
tp12824
a(g43
I32
g44
S'u = self.__u = TT.matrix()'
p12825
tp12826
a(g47
I771
g87
S'return type(name)'
p12827
tp12828
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12829
tp12830
asbsg55
g14
(g56
g16
Ntp12831
Rp12832
(dp12833
g60
(I00
I00
tp12834
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp12835
Rp12836
(dp12837
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp12838
Rp12839
(dp12840
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p12841
(dp12842
g37
(lp12843
(g105
I76
g106
S'self.initTraining()'
p12844
tp12845
a(g109
I88
g110
S't = TT.matrix()'
p12846
tp12847
a(g47
I771
g87
S'return type(name)'
p12848
tp12849
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12850
tp12851
asbsg55
g14
(g56
g16
Ntp12852
Rp12853
(dp12854
g60
(I00
I00
tp12855
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp12856
Rp12857
(dp12858
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp12859
Rp12860
(dp12861
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p12862
(dp12863
g37
(lp12864
(g105
I76
g106
S'self.initTraining()'
p12865
tp12866
a(g109
I90
g110
S'lr = TT.scalar()'
p12867
tp12868
a(g47
I714
g134
S'return type(name)'
p12869
tp12870
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p12871
tp12872
asbsg55
g14
(g56
g16
Ntp12873
Rp12874
(dp12875
g60
(tsg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp12876
Rp12877
(dp12878
g20
Nsg21
g14
(g28
g16
Ntp12879
Rp12880
(dp12881
g32
g14
(g148
g16
Ntp12882
Rp12883
(dp12884
g12
(lp12885
g14
(g153
g16
Ntp12886
Rp12887
(dp12888
g33
Nsg157
g14
(g158
g16
Ntp12889
Rp12890
(dp12891
g20
Nsg162
(lp12892
g164
(g165
(I0
tp12893
g167
tp12894
Rp12895
(I1
(I1
I2
tp12896
g68
I00
S'\xf2\xd2u4\xae\x96\xed\xbf@\x83,\x94t=\xc0?'
p12897
tp12898
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp12899
Rp12900
(dp12901
g60
(I00
I00
tp12902
sg62
S'float64'
p12903
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p12904
(dp12905
bsg32
Nsg55
g12900
sbag14
(g28
g16
Ntp12906
Rp12907
(dp12908
g32
g14
(g148
g16
Ntp12909
Rp12910
(dp12911
g12
(lp12912
g14
(g28
g16
Ntp12913
Rp12914
(dp12915
g32
g14
(g148
g16
Ntp12916
Rp12917
(dp12918
g12
(lp12919
g12860
asg34
(itheano.gof.utils
scratchpad
p12920
(dp12921
g37
(lp12922
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p12923
tp12924
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p12925
tp12926
a(g205
I533
g206
S'inplace=False)(input))'
p12927
tp12928
a(g202
I401
g52
S'self.add_tag_trace(node)'
p12929
tp12930
asbsg211
(lp12931
g12914
asg213
g14
(g214
g16
Ntp12932
Rp12933
(dp12934
g218
(lp12935
sg220
(lp12936
sg222
(lp12937
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp12938
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p12939
(dp12940
bsg55
g14
(g56
g16
Ntp12941
Rp12942
(dp12943
g60
(I01
I01
tp12944
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp12945
Rp12946
(dp12947
g32
g14
(g148
g16
Ntp12948
Rp12949
(dp12950
g12
(lp12951
g14
(g28
g16
Ntp12952
Rp12953
(dp12954
g32
g14
(g148
g16
Ntp12955
Rp12956
(dp12957
g12
(lp12958
g14
(g28
g16
Ntp12959
Rp12960
(dp12961
g32
g14
(g148
g16
Ntp12962
Rp12963
(dp12964
g12
(lp12965
g14
(g28
g16
Ntp12966
Rp12967
(dp12968
g32
g14
(g148
g16
Ntp12969
Rp12970
(dp12971
g12
(lp12972
g14
(g28
g16
Ntp12973
Rp12974
(dp12975
g32
g14
(g148
g16
Ntp12976
Rp12977
(dp12978
g12
(lp12979
g14
(g28
g16
Ntp12980
Rp12981
(dp12982
g32
g14
(g148
g16
Ntp12983
Rp12984
(dp12985
g12
(lp12986
g14
(g28
g16
Ntp12987
Rp12988
(dp12989
g32
g14
(g148
g16
Ntp12990
Rp12991
(dp12992
g12
(lp12993
g14
(g28
g16
Ntp12994
Rp12995
(dp12996
g32
g14
(g148
g16
Ntp12997
Rp12998
(dp12999
g12
(lp13000
g12818
asg34
(itheano.gof.utils
scratchpad
p13001
(dp13002
g37
(lp13003
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13004
tp13005
a(g298
I505
g299
S"nw_seq = seq['input'][offset + k - mintap:]"
p13006
tp13007
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13008
tp13009
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13010
tp13011
asbsg211
(lp13012
g12995
asg213
g14
(g308
g16
Ntp13013
Rp13014
(dp13015
g312
(g313
(g314
(g317
S'\x00\x00\x00\x00'
p13016
tp13017
Rp13018
NNtp13019
Rp13020
tp13021
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13022
(dp13023
bsg55
g14
(g56
g16
Ntp13024
Rp13025
(dp13026
g60
(I00
I00
tp13027
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13028
(dp13029
g37
(lp13030
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13031
tp13032
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p13033
tp13034
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13035
tp13036
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13037
tp13038
asbsg211
(lp13039
g12988
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13040
(dp13041
g37
(lp13042
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13043
tp13044
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13045
tp13046
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p13047
tp13048
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13049
tp13050
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13051
(dp13052
g37
(lp13053
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13054
tp13055
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p13056
tp13057
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13058
tp13059
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13060
tp13061
asbsg211
(lp13062
g12981
asg213
g14
(g308
g16
Ntp13063
Rp13064
(dp13065
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p13066
tp13067
Rp13068
tp13069
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13070
(dp13071
bsg55
g14
(g56
g16
Ntp13072
Rp13073
(dp13074
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13075
Rp13076
(dp13077
g32
g14
(g148
g16
Ntp13078
Rp13079
(dp13080
g12
(lp13081
g12995
ag14
(g401
g16
Ntp13082
Rp13083
(dp13084
g32
g14
(g148
g16
Ntp13085
Rp13086
(dp13087
g12
(lp13088
g12981
asg34
(itheano.gof.utils
scratchpad
p13089
(dp13090
g37
(lp13091
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p13092
tp13093
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p13094
tp13095
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p13096
tp13097
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13098
tp13099
asbsg211
(lp13100
g13083
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13101
(dp13102
bsg55
g14
(g430
g16
Ntp13103
Rp13104
(dp13105
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13106
(dp13107
g37
(lp13108
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13109
tp13110
a(g298
I546
g299
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p13111
tp13112
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13113
tp13114
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13115
tp13116
asbsg211
(lp13117
g13076
asg213
g14
(g308
g16
Ntp13118
Rp13119
(dp13120
g312
(g313
(Ng14
(g430
g16
Ntp13121
Rp13122
(dp13123
g62
g364
sbNtp13124
Rp13125
tp13126
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13127
(dp13128
bsg55
g14
(g56
g16
Ntp13129
Rp13130
(dp13131
g60
(I00
I00
tp13132
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13133
Rp13134
(dp13135
g32
g14
(g148
g16
Ntp13136
Rp13137
(dp13138
g12
(lp13139
g14
(g28
g16
Ntp13140
Rp13141
(dp13142
g32
g14
(g148
g16
Ntp13143
Rp13144
(dp13145
g12
(lp13146
g477
ag14
(g28
g16
Ntp13147
Rp13148
(dp13149
g32
g14
(g148
g16
Ntp13150
Rp13151
(dp13152
g12
(lp13153
g12981
ag14
(g28
g16
Ntp13154
Rp13155
(dp13156
g32
g14
(g148
g16
Ntp13157
Rp13158
(dp13159
g12
(lp13160
g14
(g28
g16
Ntp13161
Rp13162
(dp13163
g32
g14
(g148
g16
Ntp13164
Rp13165
(dp13166
g12
(lp13167
g14
(g28
g16
Ntp13168
Rp13169
(dp13170
g32
g14
(g148
g16
Ntp13171
Rp13172
(dp13173
g12
(lp13174
g14
(g28
g16
Ntp13175
Rp13176
(dp13177
g32
g14
(g148
g16
Ntp13178
Rp13179
(dp13180
g12
(lp13181
g12797
asg34
(itheano.gof.utils
scratchpad
p13182
(dp13183
g37
(lp13184
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13185
tp13186
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p13187
tp13188
a(g47
I3636
g535
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p13189
tp13190
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13191
tp13192
asbsg211
(lp13193
g13176
asg213
g14
(g214
g16
Ntp13194
Rp13195
(dp13196
g218
(lp13197
sg220
(lp13198
I0
asg222
(lp13199
I0
asg224
g12813
sg225
I00
sg226
(g227
I0
tp13200
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13201
(dp13202
bsg55
g14
(g56
g16
Ntp13203
Rp13204
(dp13205
g60
(I01
I00
tp13206
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13207
(dp13208
g37
(lp13209
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13210
tp13211
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p13212
tp13213
a(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p13214
tp13215
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13216
tp13217
asbsg211
(lp13218
g13169
asg213
g14
(g567
g16
Ntp13219
Rp13220
(dp13221
g229
g230
sg571
(dp13222
I0
I00
ssbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13223
(dp13224
g37
(lp13225
(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p13226
tp13227
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13228
tp13229
a(g47
I3284
g206
S'return Apply(self, [x], [t()])'
p13230
tp13231
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13232
tp13233
asbsg55
g14
(g56
g16
Ntp13234
Rp13235
(dp13236
g60
(I00
I00
tp13237
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13238
(dp13239
g37
(lp13240
(g298
I620
g299
S'actual_n_steps'
p13241
tp13242
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p13243
tp13244
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13245
tp13246
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13247
tp13248
asbsg211
(lp13249
g13162
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13250
(dp13251
g37
(lp13252
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13253
tp13254
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13255
tp13256
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p13257
tp13258
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13259
tp13260
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13261
(dp13262
g37
(lp13263
(g298
I620
g299
S'actual_n_steps'
p13264
tp13265
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p13266
tp13267
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13268
tp13269
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13270
tp13271
asbsg211
(lp13272
g13155
asg213
g14
(g308
g16
Ntp13273
Rp13274
(dp13275
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p13276
tp13277
Rp13278
tp13279
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13280
(dp13281
bsg55
g14
(g56
g16
Ntp13282
Rp13283
(dp13284
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13285
(dp13286
g37
(lp13287
(g298
I620
g299
S'actual_n_steps'
p13288
tp13289
a(g593
I364
g594
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p13290
tp13291
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p13292
tp13293
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13294
tp13295
asbsg211
(lp13296
g13148
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13297
(dp13298
g37
(lp13299
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p13300
tp13301
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13302
tp13303
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13304
tp13305
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13306
tp13307
asbsg55
g14
(g56
g16
Ntp13308
Rp13309
(dp13310
g60
(tsg62
S'int64'
p13311
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13312
Rp13313
(dp13314
g32
g14
(g148
g16
Ntp13315
Rp13316
(dp13317
g12
(lp13318
g14
(g28
g16
Ntp13319
Rp13320
(dp13321
g32
g14
(g148
g16
Ntp13322
Rp13323
(dp13324
g12
(lp13325
g13169
asg34
(itheano.gof.utils
scratchpad
p13326
(dp13327
g37
(lp13328
(g298
I620
g299
S'actual_n_steps'
p13329
tp13330
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p13331
tp13332
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13333
tp13334
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13335
tp13336
asbsg211
(lp13337
g13320
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13338
(dp13339
g37
(lp13340
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13341
tp13342
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13343
tp13344
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p13345
tp13346
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13347
tp13348
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13349
(dp13350
g37
(lp13351
(g298
I620
g299
S'actual_n_steps'
p13352
tp13353
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p13354
tp13355
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13356
tp13357
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13358
tp13359
asbsg211
(lp13360
g13313
asg213
g14
(g308
g16
Ntp13361
Rp13362
(dp13363
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p13364
tp13365
Rp13366
tp13367
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13368
(dp13369
bsg55
g14
(g56
g16
Ntp13370
Rp13371
(dp13372
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13373
(dp13374
g37
(lp13375
(g593
I366
g594
S'dtype=tensor_var.dtype)'
p13376
tp13377
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p13378
tp13379
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p13380
tp13381
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13382
tp13383
asbsg211
(lp13384
g13141
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13385
(dp13386
g37
(lp13387
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p13388
tp13389
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13390
tp13391
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p13392
tp13393
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13394
tp13395
asbsg55
g14
(g56
g16
Ntp13396
Rp13397
(dp13398
g60
(I00
I00
tp13399
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag13169
ag14
(g401
g16
Ntp13400
Rp13401
(dp13402
g32
g14
(g148
g16
Ntp13403
Rp13404
(dp13405
g12
(lp13406
g13155
asg34
(itheano.gof.utils
scratchpad
p13407
(dp13408
g37
(lp13409
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p13410
tp13411
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p13412
tp13413
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p13414
tp13415
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13416
tp13417
asbsg211
(lp13418
g13401
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13419
(dp13420
bsg55
g14
(g430
g16
Ntp13421
Rp13422
(dp13423
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13424
(dp13425
g37
(lp13426
(g593
I367
g594
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p13427
tp13428
a(g412
I904
g810
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p13429
tp13430
a(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p13431
tp13432
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13433
tp13434
asbsg211
(lp13435
g13134
asg213
g14
(g819
g16
Ntp13436
Rp13437
(dp13438
g312
(lp13439
g313
(Ng14
(g430
g16
Ntp13440
Rp13441
(dp13442
g62
g364
sbNtp13443
Rp13444
asg829
(lp13445
sg229
g230
sg831
I01
sg225
I00
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13446
(dp13447
g37
(lp13448
(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p13449
tp13450
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13451
tp13452
a(g412
I1109
g206
S'[x.type()])'
p13453
tp13454
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13455
tp13456
asbsg55
g13397
sg20
Nsbag12981
ag12887
ag14
(g153
g16
Ntp13457
Rp13458
(dp13459
g33
Nsg157
g14
(g158
g16
Ntp13460
Rp13461
(dp13462
g20
Nsg162
(lp13463
g164
(g165
(I0
tp13464
g167
tp13465
Rp13466
(I1
(I2
I2
tp13467
g68
I00
S'\xc0\x95\xf4w![\xad\xbf\xd6Cr\x177\xf5\xef?`F\xffP\xfe\x02\xae?\x9c\xf6\xee#]{\xea?'
p13468
tp13469
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp13470
Rp13471
(dp13472
g60
(I00
I00
tp13473
sg62
S'float64'
p13474
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p13475
(dp13476
bsg32
Nsg55
g13471
sbag14
(g153
g16
Ntp13477
Rp13478
(dp13479
g33
Nsg157
g14
(g158
g16
Ntp13480
Rp13481
(dp13482
g20
Nsg162
(lp13483
g164
(g165
(I0
tp13484
g167
tp13485
Rp13486
(I1
(I2
I1
tp13487
g68
I00
S'\xaa#\x14\xff\x87\xa1\xea\xbfv\x0bG(\x02T\xe8?'
p13488
tp13489
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp13490
Rp13491
(dp13492
g60
(I00
I00
tp13493
sg62
S'float64'
p13494
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p13495
(dp13496
bsg32
Nsg55
g13491
sbasg34
(itheano.gof.utils
scratchpad
p13497
(dp13498
g37
(lp13499
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p13500
tp13501
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13502
tp13503
a(g893
I1400
g894
S'outs = self(*inputs)'
p13504
tp13505
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13506
tp13507
asbsg211
(lp13508
g14
(g28
g16
Ntp13509
Rp13510
(dp13511
g32
g12977
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p13512
(dp13513
g37
(lp13514
(g893
I1400
g894
S'outs = self(*inputs)'
p13515
tp13516
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13517
tp13518
a(g893
I440
g206
S'[t() for t in self.output_types])'
p13519
tp13520
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13521
tp13522
asbsg55
g14
(g56
g16
Ntp13523
Rp13524
(dp13525
g60
(I00
I00
tp13526
sg62
S'float64'
p13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag12974
asg213
g14
(g919
g16
Ntp13528
Rp13529
(dp13530
g8
I00
sg12
(lp13531
g14
(g28
g16
Ntp13532
Rp13533
(dp13534
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p13535
(dp13536
g37
(lp13537
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p13538
tp13539
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13540
tp13541
a(g298
I465
g299
S'nw_slice = _seq_val_slice.type()'
p13542
tp13543
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13544
tp13545
asbsg55
g14
(g56
g16
Ntp13546
Rp13547
(dp13548
g60
(I00
tp13549
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13550
Rp13551
(dp13552
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p13553
(dp13554
g37
(lp13555
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13556
tp13557
a(g298
I592
g299
S"arg = safe_new(init_out['initial'])"
p13558
tp13559
a(g593
I75
g952
S'nw_x = x.type()'
p13560
tp13561
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13562
tp13563
asbsg55
g12811
sg20
Nsbag14
(g28
g16
Ntp13564
Rp13565
(dp13566
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p13567
(dp13568
g37
(lp13569
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13570
tp13571
a(g298
I913
g299
S'not arg.update)]'
p13572
tp13573
a(g593
I75
g952
S'nw_x = x.type()'
p13574
tp13575
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13576
tp13577
asbsg55
g12900
sg20
Nsbag14
(g28
g16
Ntp13578
Rp13579
(dp13580
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p13581
(dp13582
g37
(lp13583
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13584
tp13585
a(g298
I913
g299
S'not arg.update)]'
p13586
tp13587
a(g593
I75
g952
S'nw_x = x.type()'
p13588
tp13589
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13590
tp13591
asbsg55
g13471
sg20
Nsbag14
(g28
g16
Ntp13592
Rp13593
(dp13594
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p13595
(dp13596
g37
(lp13597
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13598
tp13599
a(g298
I913
g299
S'not arg.update)]'
p13600
tp13601
a(g593
I75
g952
S'nw_x = x.type()'
p13602
tp13603
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13604
tp13605
asbsg55
g13491
sg20
Nsbasg999
(lp13606
(lp13607
I-1
aasg1002
I0
sg1003
I-1001547823
sg211
(lp13608
g14
(g28
g16
Ntp13609
Rp13610
(dp13611
g32
g14
(g148
g16
Ntp13612
Rp13613
(dp13614
g12
(lp13615
g14
(g28
g16
Ntp13616
Rp13617
(dp13618
g32
g14
(g148
g16
Ntp13619
Rp13620
(dp13621
g12
(lp13622
g14
(g28
g16
Ntp13623
Rp13624
(dp13625
g32
g14
(g148
g16
Ntp13626
Rp13627
(dp13628
g12
(lp13629
g13533
ag13565
asg34
(itheano.gof.utils
scratchpad
p13630
(dp13631
g37
(lp13632
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p13633
tp13634
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p13635
tp13636
a(g47
I4732
g1035
S'return _dot(a, b)'
p13637
tp13638
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13639
tp13640
asbsg211
(lp13641
g13624
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13642
(dp13643
bsg55
g14
(g56
g16
Ntp13644
Rp13645
(dp13646
g60
(I00
tp13647
sg62
S'float64'
p13648
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13649
Rp13650
(dp13651
g32
g14
(g148
g16
Ntp13652
Rp13653
(dp13654
g12
(lp13655
g13551
ag13579
asg34
(itheano.gof.utils
scratchpad
p13656
(dp13657
g37
(lp13658
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p13659
tp13660
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p13661
tp13662
a(g47
I4732
g1035
S'return _dot(a, b)'
p13663
tp13664
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13665
tp13666
asbsg211
(lp13667
g13650
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13668
(dp13669
bsg55
g14
(g56
g16
Ntp13670
Rp13671
(dp13672
g60
(I00
tp13673
sg62
S'float64'
p13674
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13675
(dp13676
g37
(lp13677
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p13678
tp13679
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p13680
tp13681
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p13682
tp13683
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13684
tp13685
asbsg211
(lp13686
g13617
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13687
(dp13688
g37
(lp13689
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p13690
tp13691
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13692
tp13693
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13694
tp13695
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13696
tp13697
asbsg55
g14
(g56
g16
Ntp13698
Rp13699
(dp13700
g60
(I00
tp13701
sg62
S'float64'
p13702
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13703
(dp13704
g37
(lp13705
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p13706
tp13707
a(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p13708
tp13709
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p13710
tp13711
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13712
tp13713
asbsg211
(lp13714
g13610
asg213
g1119
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13715
(dp13716
g37
(lp13717
(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p13718
tp13719
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13720
tp13721
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p13722
tp13723
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13724
tp13725
asbsg55
g14
(g56
g16
Ntp13726
Rp13727
(dp13728
g60
(I00
tp13729
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13730
Rp13731
(dp13732
g32
g14
(g148
g16
Ntp13733
Rp13734
(dp13735
g12
(lp13736
g13610
ag13593
asg34
(itheano.gof.utils
scratchpad
p13737
(dp13738
g37
(lp13739
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p13740
tp13741
a(g1031
I28
g1032
S'y_t = TT.dot(h_t, W_out)'
p13742
tp13743
a(g47
I4732
g1035
S'return _dot(a, b)'
p13744
tp13745
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13746
tp13747
asbsg211
(lp13748
g13731
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13749
(dp13750
bsg55
g14
(g56
g16
Ntp13751
Rp13752
(dp13753
g60
(I00
tp13754
sg62
S'float64'
p13755
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I2
sg1174
(lp13756
I00
asg665
g1176
((lp13757
tp13758
Rp13759
sg1180
I1
sg1181
I1
sg1182
(lp13760
g314
(g317
S'\xff\xff\xff\xff'
p13761
tp13762
Rp13763
aI0
asg1187
I1
sg1188
I3
sg1189
I00
sg1190
I-1
sg1191
I1
sg20
g1192
sg1193
g1196
sg1221
g1176
((lp13764
(lp13765
g999
ag13606
aa(lp13766
g1191
aI1
aa(lp13767
g1002
aI0
aa(lp13768
g1227
aI0
aa(lp13769
g1229
a(lp13770
aa(lp13771
g1232
aI0
aa(lp13772
g1187
aI1
aa(lp13773
g1235
aI0
aa(lp13774
g1180
aI1
aa(lp13775
g1190
aI-1
aa(lp13776
g20
ag1192
aa(lp13777
g1240
aNaa(lp13778
g665
ag13759
aa(lp13779
g1243
aI00
aa(lp13780
g1189
aI00
aa(lp13781
g8
aI00
aatp13782
Rp13783
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p13784
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p13785
(g1043
((g12811
((I-1
I1
tp13786
I00
tp13787
tp13788
(g13471
((I-1
I3
tp13789
I00
tp13790
tp13791
tp13792
(I1
(I00
tp13793
tp13794
tp13795
(g1043
((g13547
((I-1
I0
tp13796
I00
tp13797
tp13798
(g12900
((I-1
I2
tp13799
I00
tp13800
tp13801
tp13802
(I1
(I00
tp13803
tp13804
tp13805
(g652
((g13645
((I1
I0
tp13806
I00
tp13807
tp13808
(g13671
((I0
I0
tp13809
I00
tp13810
tp13811
tp13812
(I1
(I00
tp13813
tp13814
tp13815
(g1119
((g13699
((I2
I0
tp13816
I00
tp13817
tp13818
tp13819
(I1
(I00
tp13820
tp13821
tp13822
(g1043
((g13727
((I3
I0
I0
tp13823
I00
tp13824
tp13825
(g13491
((I-1
I4
tp13826
I00
tp13827
tp13828
tp13829
(I1
(I00
tp13830
tp13831
tp13832
tp13833
tp13834
sg1232
I0
sg1301
(lp13835
I00
aI00
asg1303
I0
sg1235
I0
sg1240
Nsg1304
(lp13836
g13524
ag14
(g56
g16
Ntp13837
Rp13838
(dp13839
g60
(I00
I00
tp13840
sg62
g13755
sg64
g68
sg71
I00
sg20
Nsbasg1243
I00
sg1227
I0
sg1310
I3
sg1229
g13770
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p13841
(dp13842
g37
(lp13843
(g893
I1400
g894
S'outs = self(*inputs)'
p13844
tp13845
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13846
tp13847
a(g893
I440
g206
S'[t() for t in self.output_types])'
p13848
tp13849
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13850
tp13851
asbsg55
g13838
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13852
(dp13853
g37
(lp13854
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13855
tp13856
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p13857
tp13858
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13859
tp13860
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13861
tp13862
asbsg211
(lp13863
g12967
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13864
(dp13865
g37
(lp13866
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p13867
tp13868
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p13869
tp13870
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p13871
tp13872
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p13873
tp13874
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13875
(dp13876
g37
(lp13877
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13878
tp13879
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p13880
tp13881
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13882
tp13883
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13884
tp13885
asbsg211
(lp13886
g12960
asg213
g14
(g308
g16
Ntp13887
Rp13888
(dp13889
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p13890
tp13891
Rp13892
tp13893
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13894
(dp13895
bsg55
g14
(g56
g16
Ntp13896
Rp13897
(dp13898
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13899
Rp13900
(dp13901
g32
g14
(g148
g16
Ntp13902
Rp13903
(dp13904
g12
(lp13905
g13076
asg34
(itheano.gof.utils
scratchpad
p13906
(dp13907
g37
(lp13908
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13909
tp13910
a(g893
I1563
g894
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p13911
tp13912
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13913
tp13914
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13915
tp13916
asbsg211
(lp13917
g13900
asg213
g14
(g308
g16
Ntp13918
Rp13919
(dp13920
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13921
tp13922
Rp13923
tp13924
Rp13925
tp13926
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13927
(dp13928
bsg55
g14
(g56
g16
Ntp13929
Rp13930
(dp13931
g60
(I00
I00
tp13932
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp13933
Rp13934
(dp13935
g32
g14
(g148
g16
Ntp13936
Rp13937
(dp13938
g12
(lp13939
g14
(g28
g16
Ntp13940
Rp13941
(dp13942
g32
g14
(g148
g16
Ntp13943
Rp13944
(dp13945
g12
(lp13946
g13510
asg34
(itheano.gof.utils
scratchpad
p13947
(dp13948
g37
(lp13949
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13950
tp13951
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p13952
tp13953
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13954
tp13955
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13956
tp13957
asbsg211
(lp13958
g13941
asg213
g14
(g308
g16
Ntp13959
Rp13960
(dp13961
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13962
tp13963
Rp13964
Ntp13965
Rp13966
tp13967
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13968
(dp13969
bsg55
g14
(g56
g16
Ntp13970
Rp13971
(dp13972
g60
(I00
I00
tp13973
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p13974
(dp13975
g37
(lp13976
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p13977
tp13978
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p13979
tp13980
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p13981
tp13982
a(g202
I401
g52
S'self.add_tag_trace(node)'
p13983
tp13984
asbsg211
(lp13985
g13934
asg213
g14
(g308
g16
Ntp13986
Rp13987
(dp13988
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p13989
tp13990
Rp13991
tp13992
Rp13993
tp13994
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p13995
(dp13996
bsg55
g14
(g56
g16
Ntp13997
Rp13998
(dp13999
g60
(I00
I00
tp14000
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14001
Rp14002
(dp14003
g32
g14
(g148
g16
Ntp14004
Rp14005
(dp14006
g12
(lp14007
g14
(g28
g16
Ntp14008
Rp14009
(dp14010
g32
g14
(g148
g16
Ntp14011
Rp14012
(dp14013
g12
(lp14014
g14
(g28
g16
Ntp14015
Rp14016
(dp14017
g32
g14
(g148
g16
Ntp14018
Rp14019
(dp14020
g12
(lp14021
g14
(g28
g16
Ntp14022
Rp14023
(dp14024
g32
g14
(g148
g16
Ntp14025
Rp14026
(dp14027
g12
(lp14028
g14
(g28
g16
Ntp14029
Rp14030
(dp14031
g32
g14
(g148
g16
Ntp14032
Rp14033
(dp14034
g12
(lp14035
g14
(g28
g16
Ntp14036
Rp14037
(dp14038
g32
g14
(g148
g16
Ntp14039
Rp14040
(dp14041
g12
(lp14042
g14
(g28
g16
Ntp14043
Rp14044
(dp14045
g32
g14
(g148
g16
Ntp14046
Rp14047
(dp14048
g12
(lp14049
g12981
ag13076
ag13134
ag12981
ag12887
ag13458
ag13478
asg34
(itheano.gof.utils
scratchpad
p14050
(dp14051
g37
(lp14052
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p14053
tp14054
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p14055
tp14056
a(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p14057
tp14058
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14059
tp14060
asbsg211
(lp14061
g14
(g28
g16
Ntp14062
Rp14063
(dp14064
g32
g14047
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p14065
(dp14066
g37
(lp14067
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p14068
tp14069
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14070
tp14071
a(g893
I440
g206
S'[t() for t in self.output_types])'
p14072
tp14073
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14074
tp14075
asbsg55
g13524
sg20
Nsbag14044
asg213
g13529
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p14076
(dp14077
g37
(lp14078
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p14079
tp14080
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14081
tp14082
a(g893
I440
g206
S'[t() for t in self.output_types])'
p14083
tp14084
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14085
tp14086
asbsg55
g13838
sg20
Nsbag12839
asg34
(itheano.gof.utils
scratchpad
p14087
(dp14088
g37
(lp14089
(g105
I76
g106
S'self.initTraining()'
p14090
tp14091
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p14092
tp14093
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p14094
tp14095
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14096
tp14097
asbsg211
(lp14098
g14037
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14099
(dp14100
g37
(lp14101
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p14102
tp14103
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14104
tp14105
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14106
tp14107
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14108
tp14109
asbsg55
g14
(g56
g16
Ntp14110
Rp14111
(dp14112
g60
(I00
I00
tp14113
sg62
S'float64'
p14114
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14115
Rp14116
(dp14117
g32
g14
(g148
g16
Ntp14118
Rp14119
(dp14120
g12
(lp14121
g1608
asg34
(itheano.gof.utils
scratchpad
p14122
(dp14123
g37
(lp14124
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p14125
tp14126
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14127
tp14128
a(g205
I533
g206
S'inplace=False)(input))'
p14129
tp14130
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14131
tp14132
asbsg211
(lp14133
g14116
asg213
g14
(g214
g16
Ntp14134
Rp14135
(dp14136
g218
(lp14137
sg220
(lp14138
sg222
(lp14139
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp14140
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14141
(dp14142
bsg55
g14
(g56
g16
Ntp14143
Rp14144
(dp14145
g60
(I01
I01
tp14146
sg62
g1625
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14147
(dp14148
g37
(lp14149
(g105
I76
g106
S'self.initTraining()'
p14150
tp14151
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p14152
tp14153
a(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p14154
tp14155
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14156
tp14157
asbsg211
(lp14158
g14030
asg213
g1665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14159
(dp14160
g37
(lp14161
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p14162
tp14163
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14164
tp14165
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14166
tp14167
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14168
tp14169
asbsg55
g14
(g56
g16
Ntp14170
Rp14171
(dp14172
g60
(I00
I00
tp14173
sg62
S'float64'
p14174
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14175
Rp14176
(dp14177
g32
g14
(g148
g16
Ntp14178
Rp14179
(dp14180
g12
(lp14181
g14
(g28
g16
Ntp14182
Rp14183
(dp14184
g32
g14
(g148
g16
Ntp14185
Rp14186
(dp14187
g12
(lp14188
g14
(g28
g16
Ntp14189
Rp14190
(dp14191
g32
g14
(g148
g16
Ntp14192
Rp14193
(dp14194
g12
(lp14195
g14030
asg34
(itheano.gof.utils
scratchpad
p14196
(dp14197
g37
(lp14198
(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p14199
tp14200
a(g198
I452
g1720
S'acc_dtype=acc_dtype)'
p14201
tp14202
a(g47
I2670
g1720
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p14203
tp14204
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14205
tp14206
asbsg211
(lp14207
g14190
asg213
g14
(g1728
g16
Ntp14208
Rp14209
(dp14210
g1732
g14174
sg62
g14174
sg229
g230
sg656
g659
sg571
Nsbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14211
(dp14212
g37
(lp14213
(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14214
tp14215
a(g205
I1797
g206
S'return CAReduce.make_node(op, input)'
p14216
tp14217
a(g205
I1299
g206
S'broadcastable=broadcastable)()'
p14218
tp14219
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14220
tp14221
asbsg55
g14
(g56
g16
Ntp14222
Rp14223
(dp14224
g60
(tsg62
g14174
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag1748
asg34
(itheano.gof.utils
scratchpad
p14225
(dp14226
g37
(lp14227
(g886
I450
g894
S'g_cost = _float_ones_like(cost)'
p14228
tp14229
a(g886
I1124
g1766
S'rval = tensor.ones_like(x)'
p14230
tp14231
a(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p14232
tp14233
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14234
tp14235
asbsg211
(lp14236
g14183
asg213
g1776
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14237
(dp14238
g37
(lp14239
(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p14240
tp14241
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14242
tp14243
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14244
tp14245
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14246
tp14247
asbsg55
g14
(g56
g16
Ntp14248
Rp14249
(dp14250
g60
(tsg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14251
(dp14252
g37
(lp14253
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p14254
tp14255
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14256
tp14257
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14258
tp14259
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14260
tp14261
asbsg211
(lp14262
g14176
asg213
g14
(g214
g16
Ntp14263
Rp14264
(dp14265
g218
(lp14266
sg220
(lp14267
sg222
(lp14268
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp14269
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14270
(dp14271
bsg55
g14
(g56
g16
Ntp14272
Rp14273
(dp14274
g60
(I01
I01
tp14275
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14276
(dp14277
g37
(lp14278
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p14279
tp14280
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14281
tp14282
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14283
tp14284
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14285
tp14286
asbsg211
(lp14287
g14023
asg213
g14
(g650
g16
Ntp14288
Rp14289
(dp14290
g20
Nsg656
g1780
sg665
(dp14291
sg667
Nsg669
(dp14292
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14293
(dp14294
g37
(lp14295
(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p14296
tp14297
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14298
tp14299
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14300
tp14301
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14302
tp14303
asbsg55
g14
(g56
g16
Ntp14304
Rp14305
(dp14306
g60
(I00
I00
tp14307
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14116
asg34
(itheano.gof.utils
scratchpad
p14308
(dp14309
g37
(lp14310
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p14311
tp14312
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14313
tp14314
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14315
tp14316
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14317
tp14318
asbsg211
(lp14319
g14016
asg213
g14
(g650
g16
Ntp14320
Rp14321
(dp14322
g20
Nsg656
g1883
sg665
(dp14323
sg667
Nsg669
(dp14324
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14325
(dp14326
g37
(lp14327
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14328
tp14329
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14330
tp14331
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14332
tp14333
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14334
tp14335
asbsg55
g14
(g56
g16
Ntp14336
Rp14337
(dp14338
g60
(I00
I00
tp14339
sg62
S'float64'
p14340
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14341
Rp14342
(dp14343
g32
g14
(g148
g16
Ntp14344
Rp14345
(dp14346
g12
(lp14347
g14037
ag14
(g28
g16
Ntp14348
Rp14349
(dp14350
g32
g14
(g148
g16
Ntp14351
Rp14352
(dp14353
g12
(lp14354
g14116
ag14
(g28
g16
Ntp14355
Rp14356
(dp14357
g32
g14
(g148
g16
Ntp14358
Rp14359
(dp14360
g12
(lp14361
g1926
asg34
(itheano.gof.utils
scratchpad
p14362
(dp14363
g37
(lp14364
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14365
tp14366
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14367
tp14368
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p14369
tp14370
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14371
tp14372
asbsg211
(lp14373
g14356
asg213
g14
(g214
g16
Ntp14374
Rp14375
(dp14376
g218
(lp14377
sg220
(lp14378
sg222
(lp14379
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp14380
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14381
(dp14382
bsg55
g14
(g56
g16
Ntp14383
Rp14384
(dp14385
g60
(I01
I01
tp14386
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14387
(dp14388
g37
(lp14389
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14390
tp14391
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14392
tp14393
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14394
tp14395
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14396
tp14397
asbsg211
(lp14398
g14349
asg213
g14
(g650
g16
Ntp14399
Rp14400
(dp14401
g20
Nsg656
g1575
sg665
(dp14402
sg667
Nsg669
(dp14403
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14404
(dp14405
g37
(lp14406
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14407
tp14408
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14409
tp14410
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14411
tp14412
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14413
tp14414
asbsg55
g14
(g56
g16
Ntp14415
Rp14416
(dp14417
g60
(I01
I01
tp14418
sg62
S'int8'
p14419
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14420
(dp14421
g37
(lp14422
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p14423
tp14424
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14425
tp14426
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14427
tp14428
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14429
tp14430
asbsg211
(lp14431
g14342
asg213
g14
(g650
g16
Ntp14432
Rp14433
(dp14434
g20
Nsg656
g1669
sg665
(dp14435
sg667
Nsg669
(dp14436
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14437
(dp14438
g37
(lp14439
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14440
tp14441
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14442
tp14443
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14444
tp14445
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14446
tp14447
asbsg55
g14
(g56
g16
Ntp14448
Rp14449
(dp14450
g60
(I00
I00
tp14451
sg62
S'float64'
p14452
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14453
(dp14454
g37
(lp14455
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p14456
tp14457
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p14458
tp14459
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14460
tp14461
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14462
tp14463
asbsg211
(lp14464
g14009
asg213
g14
(g650
g16
Ntp14465
Rp14466
(dp14467
g20
Nsg656
g1883
sg665
(dp14468
sg667
Nsg669
(dp14469
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14470
(dp14471
g37
(lp14472
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p14473
tp14474
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14475
tp14476
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14477
tp14478
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14479
tp14480
asbsg55
g14
(g56
g16
Ntp14481
Rp14482
(dp14483
g60
(I00
I00
tp14484
sg62
S'float64'
p14485
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14486
(dp14487
g37
(lp14488
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14489
tp14490
a(g893
I1582
g894
S'outer_inp_seqs.append(x[::-1])'
p14491
tp14492
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14493
tp14494
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14495
tp14496
asbsg211
(lp14497
g14002
asg213
g14
(g308
g16
Ntp14498
Rp14499
(dp14500
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p14501
tp14502
Rp14503
tp14504
Rp14505
tp14506
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14507
(dp14508
bsg55
g14
(g56
g16
Ntp14509
Rp14510
(dp14511
g60
(I00
I00
tp14512
sg62
g14485
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14513
Rp14514
(dp14515
g32
g14
(g148
g16
Ntp14516
Rp14517
(dp14518
g12
(lp14519
g14
(g28
g16
Ntp14520
Rp14521
(dp14522
g32
g14
(g148
g16
Ntp14523
Rp14524
(dp14525
g12
(lp14526
g13510
asg34
(itheano.gof.utils
scratchpad
p14527
(dp14528
g37
(lp14529
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14530
tp14531
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p14532
tp14533
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14534
tp14535
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14536
tp14537
asbsg211
(lp14538
g14521
asg213
g14
(g308
g16
Ntp14539
Rp14540
(dp14541
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p14542
tp14543
Rp14544
tp14545
Rp14546
tp14547
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14548
(dp14549
bsg55
g14
(g56
g16
Ntp14550
Rp14551
(dp14552
g60
(I00
I00
tp14553
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14554
(dp14555
g37
(lp14556
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14557
tp14558
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p14559
tp14560
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14561
tp14562
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14563
tp14564
asbsg211
(lp14565
g14514
asg213
g14
(g308
g16
Ntp14566
Rp14567
(dp14568
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p14569
tp14570
Rp14571
Ntp14572
Rp14573
tp14574
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14575
(dp14576
bsg55
g14
(g56
g16
Ntp14577
Rp14578
(dp14579
g60
(I00
I00
tp14580
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14581
Rp14582
(dp14583
g32
g14
(g148
g16
Ntp14584
Rp14585
(dp14586
g12
(lp14587
g12974
asg34
(itheano.gof.utils
scratchpad
p14588
(dp14589
g37
(lp14590
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14591
tp14592
a(g893
I1608
g894
S'outer_inp_seqs += [x[::-1] for x in self.outer_nitsot_outs(outs)]'
p14593
tp14594
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14595
tp14596
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14597
tp14598
asbsg211
(lp14599
g14582
asg213
g14
(g308
g16
Ntp14600
Rp14601
(dp14602
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p14603
tp14604
Rp14605
tp14606
Rp14607
tp14608
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14609
(dp14610
bsg55
g14
(g56
g16
Ntp14611
Rp14612
(dp14613
g60
(I00
I00
tp14614
sg62
g13755
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14615
Rp14616
(dp14617
g32
g14
(g148
g16
Ntp14618
Rp14619
(dp14620
g12
(lp14621
g477
ag14
(g28
g16
Ntp14622
Rp14623
(dp14624
g32
g14
(g148
g16
Ntp14625
Rp14626
(dp14627
g12
(lp14628
g14
(g28
g16
Ntp14629
Rp14630
(dp14631
g32
g14
(g148
g16
Ntp14632
Rp14633
(dp14634
g12
(lp14635
g13510
asg34
(itheano.gof.utils
scratchpad
p14636
(dp14637
g37
(lp14638
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14639
tp14640
a(g893
I1710
g894
S'tensor.zeros(outs[idx + offset].shape,'
p14641
tp14642
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14643
tp14644
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14645
tp14646
asbsg211
(lp14647
g14630
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14648
(dp14649
g37
(lp14650
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14651
tp14652
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14653
tp14654
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p14655
tp14656
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14657
tp14658
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14659
(dp14660
g37
(lp14661
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p14662
tp14663
a(g198
I419
g2241
S'yield self[i]'
p14664
tp14665
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14666
tp14667
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14668
tp14669
asbsg211
(lp14670
g14623
asg213
g14
(g308
g16
Ntp14671
Rp14672
(dp14673
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p14674
tp14675
Rp14676
tp14677
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14678
(dp14679
bsg55
g14
(g56
g16
Ntp14680
Rp14681
(dp14682
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14683
Rp14684
(dp14685
g32
g14
(g148
g16
Ntp14686
Rp14687
(dp14688
g12
(lp14689
g14630
asg34
(itheano.gof.utils
scratchpad
p14690
(dp14691
g37
(lp14692
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p14693
tp14694
a(g198
I419
g2241
S'yield self[i]'
p14695
tp14696
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14697
tp14698
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14699
tp14700
asbsg211
(lp14701
g14684
asg213
g14
(g308
g16
Ntp14702
Rp14703
(dp14704
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p14705
tp14706
Rp14707
tp14708
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14709
(dp14710
bsg55
g14
(g56
g16
Ntp14711
Rp14712
(dp14713
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14714
(dp14715
g37
(lp14716
(g893
I1711
g894
S'dtype=dC_dinps_t[ins_pos].dtype))'
p14717
tp14718
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p14719
tp14720
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p14721
tp14722
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14723
tp14724
asbsg211
(lp14725
g14616
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14726
(dp14727
g37
(lp14728
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p14729
tp14730
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14731
tp14732
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p14733
tp14734
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14735
tp14736
asbsg55
g14
(g56
g16
Ntp14737
Rp14738
(dp14739
g60
(I00
I00
tp14740
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14741
Rp14742
(dp14743
g32
g14
(g148
g16
Ntp14744
Rp14745
(dp14746
g12
(lp14747
g477
ag14
(g28
g16
Ntp14748
Rp14749
(dp14750
g32
g14
(g148
g16
Ntp14751
Rp14752
(dp14753
g12
(lp14754
g12960
ag1926
asg34
(itheano.gof.utils
scratchpad
p14755
(dp14756
g37
(lp14757
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14758
tp14759
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14760
tp14761
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p14762
tp14763
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14764
tp14765
asbsg211
(lp14766
g14749
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14767
(dp14768
g37
(lp14769
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p14770
tp14771
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14772
tp14773
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14774
tp14775
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14776
tp14777
asbsg55
g14
(g56
g16
Ntp14778
Rp14779
(dp14780
g60
(tsg62
S'int64'
p14781
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14782
Rp14783
(dp14784
g32
g14
(g148
g16
Ntp14785
Rp14786
(dp14787
g12
(lp14788
g14
(g28
g16
Ntp14789
Rp14790
(dp14791
g32
g14
(g148
g16
Ntp14792
Rp14793
(dp14794
g12
(lp14795
g12887
asg34
(itheano.gof.utils
scratchpad
p14796
(dp14797
g37
(lp14798
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14799
tp14800
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14801
tp14802
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14803
tp14804
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14805
tp14806
asbsg211
(lp14807
g14790
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14808
(dp14809
g37
(lp14810
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14811
tp14812
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14813
tp14814
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p14815
tp14816
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14817
tp14818
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14819
(dp14820
g37
(lp14821
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14822
tp14823
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14824
tp14825
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14826
tp14827
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14828
tp14829
asbsg211
(lp14830
g14783
asg213
g14
(g308
g16
Ntp14831
Rp14832
(dp14833
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p14834
tp14835
Rp14836
tp14837
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14838
(dp14839
bsg55
g14
(g56
g16
Ntp14840
Rp14841
(dp14842
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14843
Rp14844
(dp14845
g32
g14
(g148
g16
Ntp14846
Rp14847
(dp14848
g12
(lp14849
g14
(g28
g16
Ntp14850
Rp14851
(dp14852
g32
g14
(g148
g16
Ntp14853
Rp14854
(dp14855
g12
(lp14856
g12887
asg34
(itheano.gof.utils
scratchpad
p14857
(dp14858
g37
(lp14859
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14860
tp14861
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14862
tp14863
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14864
tp14865
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14866
tp14867
asbsg211
(lp14868
g14851
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14869
(dp14870
g37
(lp14871
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14872
tp14873
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14874
tp14875
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p14876
tp14877
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14878
tp14879
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14880
(dp14881
g37
(lp14882
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14883
tp14884
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14885
tp14886
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p14887
tp14888
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14889
tp14890
asbsg211
(lp14891
g14844
asg213
g14
(g308
g16
Ntp14892
Rp14893
(dp14894
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p14895
tp14896
Rp14897
tp14898
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14899
(dp14900
bsg55
g14
(g56
g16
Ntp14901
Rp14902
(dp14903
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p14904
(dp14905
g37
(lp14906
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14907
tp14908
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p14909
tp14910
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p14911
tp14912
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14913
tp14914
asbsg211
(lp14915
g14742
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14916
(dp14917
g37
(lp14918
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p14919
tp14920
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14921
tp14922
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p14923
tp14924
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14925
tp14926
asbsg55
g14
(g56
g16
Ntp14927
Rp14928
(dp14929
g60
(I00
I00
I00
tp14930
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14931
Rp14932
(dp14933
g32
g14
(g148
g16
Ntp14934
Rp14935
(dp14936
g12
(lp14937
g477
ag14
(g28
g16
Ntp14938
Rp14939
(dp14940
g32
g14
(g148
g16
Ntp14941
Rp14942
(dp14943
g12
(lp14944
g12960
ag1926
asg34
(itheano.gof.utils
scratchpad
p14945
(dp14946
g37
(lp14947
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14948
tp14949
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14950
tp14951
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p14952
tp14953
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14954
tp14955
asbsg211
(lp14956
g14939
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14957
(dp14958
g37
(lp14959
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p14960
tp14961
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p14962
tp14963
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p14964
tp14965
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p14966
tp14967
asbsg55
g14
(g56
g16
Ntp14968
Rp14969
(dp14970
g60
(tsg62
S'int64'
p14971
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp14972
Rp14973
(dp14974
g32
g14
(g148
g16
Ntp14975
Rp14976
(dp14977
g12
(lp14978
g14
(g28
g16
Ntp14979
Rp14980
(dp14981
g32
g14
(g148
g16
Ntp14982
Rp14983
(dp14984
g12
(lp14985
g13458
asg34
(itheano.gof.utils
scratchpad
p14986
(dp14987
g37
(lp14988
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p14989
tp14990
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p14991
tp14992
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p14993
tp14994
a(g202
I401
g52
S'self.add_tag_trace(node)'
p14995
tp14996
asbsg211
(lp14997
g14980
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p14998
(dp14999
g37
(lp15000
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15001
tp15002
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15003
tp15004
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p15005
tp15006
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15007
tp15008
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15009
(dp15010
g37
(lp15011
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15012
tp15013
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15014
tp15015
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p15016
tp15017
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15018
tp15019
asbsg211
(lp15020
g14973
asg213
g14
(g308
g16
Ntp15021
Rp15022
(dp15023
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p15024
tp15025
Rp15026
tp15027
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15028
(dp15029
bsg55
g14
(g56
g16
Ntp15030
Rp15031
(dp15032
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15033
Rp15034
(dp15035
g32
g14
(g148
g16
Ntp15036
Rp15037
(dp15038
g12
(lp15039
g14
(g28
g16
Ntp15040
Rp15041
(dp15042
g32
g14
(g148
g16
Ntp15043
Rp15044
(dp15045
g12
(lp15046
g13458
asg34
(itheano.gof.utils
scratchpad
p15047
(dp15048
g37
(lp15049
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15050
tp15051
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15052
tp15053
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15054
tp15055
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15056
tp15057
asbsg211
(lp15058
g15041
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15059
(dp15060
g37
(lp15061
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15062
tp15063
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15064
tp15065
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p15066
tp15067
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15068
tp15069
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15070
(dp15071
g37
(lp15072
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15073
tp15074
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15075
tp15076
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p15077
tp15078
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15079
tp15080
asbsg211
(lp15081
g15034
asg213
g14
(g308
g16
Ntp15082
Rp15083
(dp15084
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p15085
tp15086
Rp15087
tp15088
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15089
(dp15090
bsg55
g14
(g56
g16
Ntp15091
Rp15092
(dp15093
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15094
(dp15095
g37
(lp15096
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15097
tp15098
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p15099
tp15100
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p15101
tp15102
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15103
tp15104
asbsg211
(lp15105
g14932
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15106
(dp15107
g37
(lp15108
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p15109
tp15110
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15111
tp15112
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p15113
tp15114
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15115
tp15116
asbsg55
g14
(g56
g16
Ntp15117
Rp15118
(dp15119
g60
(I00
I00
I00
tp15120
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15121
Rp15122
(dp15123
g32
g14
(g148
g16
Ntp15124
Rp15125
(dp15126
g12
(lp15127
g477
ag14
(g28
g16
Ntp15128
Rp15129
(dp15130
g32
g14
(g148
g16
Ntp15131
Rp15132
(dp15133
g12
(lp15134
g12960
ag1926
asg34
(itheano.gof.utils
scratchpad
p15135
(dp15136
g37
(lp15137
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15138
tp15139
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15140
tp15141
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p15142
tp15143
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15144
tp15145
asbsg211
(lp15146
g15129
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15147
(dp15148
g37
(lp15149
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p15150
tp15151
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15152
tp15153
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15154
tp15155
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15156
tp15157
asbsg55
g14
(g56
g16
Ntp15158
Rp15159
(dp15160
g60
(tsg62
S'int64'
p15161
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15162
Rp15163
(dp15164
g32
g14
(g148
g16
Ntp15165
Rp15166
(dp15167
g12
(lp15168
g14
(g28
g16
Ntp15169
Rp15170
(dp15171
g32
g14
(g148
g16
Ntp15172
Rp15173
(dp15174
g12
(lp15175
g13478
asg34
(itheano.gof.utils
scratchpad
p15176
(dp15177
g37
(lp15178
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15179
tp15180
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15181
tp15182
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15183
tp15184
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15185
tp15186
asbsg211
(lp15187
g15170
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15188
(dp15189
g37
(lp15190
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15191
tp15192
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15193
tp15194
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p15195
tp15196
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15197
tp15198
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15199
(dp15200
g37
(lp15201
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15202
tp15203
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15204
tp15205
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p15206
tp15207
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15208
tp15209
asbsg211
(lp15210
g15163
asg213
g14
(g308
g16
Ntp15211
Rp15212
(dp15213
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p15214
tp15215
Rp15216
tp15217
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15218
(dp15219
bsg55
g14
(g56
g16
Ntp15220
Rp15221
(dp15222
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15223
Rp15224
(dp15225
g32
g14
(g148
g16
Ntp15226
Rp15227
(dp15228
g12
(lp15229
g14
(g28
g16
Ntp15230
Rp15231
(dp15232
g32
g14
(g148
g16
Ntp15233
Rp15234
(dp15235
g12
(lp15236
g13478
asg34
(itheano.gof.utils
scratchpad
p15237
(dp15238
g37
(lp15239
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15240
tp15241
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15242
tp15243
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15244
tp15245
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15246
tp15247
asbsg211
(lp15248
g15231
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15249
(dp15250
g37
(lp15251
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p15252
tp15253
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15254
tp15255
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p15256
tp15257
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15258
tp15259
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15260
(dp15261
g37
(lp15262
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15263
tp15264
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15265
tp15266
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p15267
tp15268
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15269
tp15270
asbsg211
(lp15271
g15224
asg213
g14
(g308
g16
Ntp15272
Rp15273
(dp15274
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p15275
tp15276
Rp15277
tp15278
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15279
(dp15280
bsg55
g14
(g56
g16
Ntp15281
Rp15282
(dp15283
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15284
(dp15285
g37
(lp15286
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p15287
tp15288
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p15289
tp15290
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p15291
tp15292
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15293
tp15294
asbsg211
(lp15295
g15122
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15296
(dp15297
g37
(lp15298
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p15299
tp15300
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15301
tp15302
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p15303
tp15304
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15305
tp15306
asbsg55
g14
(g56
g16
Ntp15307
Rp15308
(dp15309
g60
(I00
I00
I00
tp15310
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag12981
ag12887
ag13458
ag13478
asg34
(itheano.gof.utils
scratchpad
p15311
(dp15312
g37
(lp15313
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p15314
tp15315
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15316
tp15317
a(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p15318
tp15319
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15320
tp15321
asbsg211
(lp15322
g14
(g28
g16
Ntp15323
Rp15324
(dp15325
g32
g12956
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p15326
(dp15327
g37
(lp15328
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p15329
tp15330
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15331
tp15332
a(g893
I440
g206
S'[t() for t in self.output_types])'
p15333
tp15334
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15335
tp15336
asbsg55
g14
(g56
g16
Ntp15337
Rp15338
(dp15339
g60
(I00
I00
tp15340
sg62
S'float64'
p15341
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag12953
ag14
(g28
g16
Ntp15342
Rp15343
(dp15344
g32
g12956
sg33
I2
sg34
(itheano.gof.utils
scratchpad
p15345
(dp15346
g37
(lp15347
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p15348
tp15349
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15350
tp15351
a(g893
I440
g206
S'[t() for t in self.output_types])'
p15352
tp15353
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15354
tp15355
asbsg55
g14
(g56
g16
Ntp15356
Rp15357
(dp15358
g60
(I00
I00
I00
tp15359
sg62
S'float64'
p15360
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15361
Rp15362
(dp15363
g32
g12956
sg33
I3
sg34
(itheano.gof.utils
scratchpad
p15364
(dp15365
g37
(lp15366
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p15367
tp15368
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15369
tp15370
a(g893
I440
g206
S'[t() for t in self.output_types])'
p15371
tp15372
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15373
tp15374
asbsg55
g14
(g56
g16
Ntp15375
Rp15376
(dp15377
g60
(I00
I00
I00
tp15378
sg62
S'float64'
p15379
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15380
Rp15381
(dp15382
g32
g12956
sg33
I4
sg34
(itheano.gof.utils
scratchpad
p15383
(dp15384
g37
(lp15385
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p15386
tp15387
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15388
tp15389
a(g893
I440
g206
S'[t() for t in self.output_types])'
p15390
tp15391
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15392
tp15393
asbsg55
g14
(g56
g16
Ntp15394
Rp15395
(dp15396
g60
(I00
I00
tp15397
sg62
S'float64'
p15398
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg213
g14
(g919
g16
Ntp15399
Rp15400
(dp15401
g8
I00
sg12
(lp15402
g14
(g28
g16
Ntp15403
Rp15404
(dp15405
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15406
(dp15407
g37
(lp15408
(g893
I1420
g894
S'self.outputs)'
p15409
tp15410
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p15411
tp15412
a(g593
I75
g952
S'nw_x = x.type()'
p15413
tp15414
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15415
tp15416
asbsg55
g13547
sg20
Nsbag14
(g28
g16
Ntp15417
Rp15418
(dp15419
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15420
(dp15421
g37
(lp15422
(g893
I1420
g894
S'self.outputs)'
p15423
tp15424
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p15425
tp15426
a(g593
I75
g952
S'nw_x = x.type()'
p15427
tp15428
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15429
tp15430
asbsg55
g12811
sg20
Nsbag14
(g28
g16
Ntp15431
Rp15432
(dp15433
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15434
(dp15435
g37
(lp15436
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15437
tp15438
a(g893
I1525
g894
S'dC_dXt = safe_new(dC_douts[idx][0])'
p15439
tp15440
a(g593
I75
g952
S'nw_x = x.type()'
p15441
tp15442
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15443
tp15444
asbsg55
g14
(g56
g16
Ntp15445
Rp15446
(dp15447
g60
(I00
tp15448
sg62
g14485
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15449
Rp15450
(dp15451
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15452
(dp15453
g37
(lp15454
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15455
tp15456
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p15457
tp15458
a(g593
I75
g952
S'nw_x = x.type()'
p15459
tp15460
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15461
tp15462
asbsg55
g13727
sg20
Nsbag14
(g28
g16
Ntp15463
Rp15464
(dp15465
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15466
(dp15467
g37
(lp15468
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15469
tp15470
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p15471
tp15472
a(g593
I75
g952
S'nw_x = x.type()'
p15473
tp15474
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15475
tp15476
asbsg55
g13752
sg20
Nsbag14
(g28
g16
Ntp15477
Rp15478
(dp15479
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15480
(dp15481
g37
(lp15482
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15483
tp15484
a(g893
I1521
g894
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p15485
tp15486
a(g593
I75
g952
S'nw_x = x.type()'
p15487
tp15488
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15489
tp15490
asbsg55
g13727
sg20
Nsbag14
(g28
g16
Ntp15491
Rp15492
(dp15493
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15494
(dp15495
g37
(lp15496
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15497
tp15498
a(g893
I1553
g894
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p15499
tp15500
a(g593
I75
g952
S'nw_x = x.type()'
p15501
tp15502
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15503
tp15504
asbsg55
g13727
sg20
Nsbag14
(g28
g16
Ntp15505
Rp15506
(dp15507
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15508
(dp15509
g37
(lp15510
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15511
tp15512
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p15513
tp15514
a(g593
I75
g952
S'nw_x = x.type()'
p15515
tp15516
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15517
tp15518
asbsg55
g14
(g56
g16
Ntp15519
Rp15520
(dp15521
g60
(I00
I00
tp15522
sg62
S'float64'
p15523
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15524
Rp15525
(dp15526
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15527
(dp15528
g37
(lp15529
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15530
tp15531
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p15532
tp15533
a(g593
I75
g952
S'nw_x = x.type()'
p15534
tp15535
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15536
tp15537
asbsg55
g14
(g56
g16
Ntp15538
Rp15539
(dp15540
g60
(I00
I00
tp15541
sg62
S'float64'
p15542
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15543
Rp15544
(dp15545
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15546
(dp15547
g37
(lp15548
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15549
tp15550
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p15551
tp15552
a(g593
I75
g952
S'nw_x = x.type()'
p15553
tp15554
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15555
tp15556
asbsg55
g14
(g56
g16
Ntp15557
Rp15558
(dp15559
g60
(I00
I00
tp15560
sg62
S'float64'
p15561
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15562
Rp15563
(dp15564
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15565
(dp15566
g37
(lp15567
(g893
I1420
g894
S'self.outputs)'
p15568
tp15569
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p15570
tp15571
a(g593
I75
g952
S'nw_x = x.type()'
p15572
tp15573
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15574
tp15575
asbsg55
g12900
sg20
Nsbag14
(g28
g16
Ntp15576
Rp15577
(dp15578
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15579
(dp15580
g37
(lp15581
(g893
I1420
g894
S'self.outputs)'
p15582
tp15583
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p15584
tp15585
a(g593
I75
g952
S'nw_x = x.type()'
p15586
tp15587
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15588
tp15589
asbsg55
g13471
sg20
Nsbag14
(g28
g16
Ntp15590
Rp15591
(dp15592
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p15593
(dp15594
g37
(lp15595
(g893
I1420
g894
S'self.outputs)'
p15596
tp15597
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p15598
tp15599
a(g593
I75
g952
S'nw_x = x.type()'
p15600
tp15601
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15602
tp15603
asbsg55
g13491
sg20
Nsbasg999
(lp15604
(lp15605
I0
aI1
aa(lp15606
I-1
aa(lp15607
I-1
aa(lp15608
I-1
aasg1003
I-1282353987
sg211
(lp15609
g14
(g28
g16
Ntp15610
Rp15611
(dp15612
g32
g14
(g148
g16
Ntp15613
Rp15614
(dp15615
g12
(lp15616
g14
(g28
g16
Ntp15617
Rp15618
(dp15619
g32
g14
(g148
g16
Ntp15620
Rp15621
(dp15622
g12
(lp15623
g14
(g28
g16
Ntp15624
Rp15625
(dp15626
g32
g14
(g148
g16
Ntp15627
Rp15628
(dp15629
g12
(lp15630
g14
(g28
g16
Ntp15631
Rp15632
(dp15633
g32
g14
(g148
g16
Ntp15634
Rp15635
(dp15636
g12
(lp15637
g15478
ag14
(g28
g16
Ntp15638
Rp15639
(dp15640
g32
g14
(g148
g16
Ntp15641
Rp15642
(dp15643
g12
(lp15644
g14
(g28
g16
Ntp15645
Rp15646
(dp15647
g32
g14
(g148
g16
Ntp15648
Rp15649
(dp15650
g12
(lp15651
g1926
asg34
(itheano.gof.utils
scratchpad
p15652
(dp15653
g37
(lp15654
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15655
tp15656
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15657
tp15658
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p15659
tp15660
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15661
tp15662
asbsg211
(lp15663
g15646
asg213
g14
(g214
g16
Ntp15664
Rp15665
(dp15666
g218
(lp15667
sg220
(lp15668
sg222
(lp15669
I0
asg224
(tsg225
I00
sg226
(g227
tp15670
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15671
(dp15672
bsg55
g14
(g56
g16
Ntp15673
Rp15674
(dp15675
g60
(I01
tp15676
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15677
Rp15678
(dp15679
g32
g14
(g148
g16
Ntp15680
Rp15681
(dp15682
g12
(lp15683
g15450
asg34
(itheano.gof.utils
scratchpad
p15684
(dp15685
g37
(lp15686
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15687
tp15688
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15689
tp15690
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15691
tp15692
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15693
tp15694
asbsg211
(lp15695
g15678
asg213
g14
(g650
g16
Ntp15696
Rp15697
(dp15698
g20
Nsg656
g3280
sg665
(dp15699
sg667
Nsg669
(dp15700
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15701
(dp15702
g37
(lp15703
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15704
tp15705
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15706
tp15707
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15708
tp15709
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15710
tp15711
asbsg55
g14
(g56
g16
Ntp15712
Rp15713
(dp15714
g60
(I00
tp15715
sg62
S'float64'
p15716
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15717
(dp15718
g37
(lp15719
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p15720
tp15721
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15722
tp15723
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15724
tp15725
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15726
tp15727
asbsg211
(lp15728
g15639
asg213
g14
(g650
g16
Ntp15729
Rp15730
(dp15731
g20
Nsg656
g1575
sg665
(dp15732
sg667
Nsg669
(dp15733
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15734
(dp15735
g37
(lp15736
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15737
tp15738
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15739
tp15740
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15741
tp15742
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15743
tp15744
asbsg55
g14
(g56
g16
Ntp15745
Rp15746
(dp15747
g60
(I00
tp15748
sg62
S'float64'
p15749
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15750
(dp15751
g37
(lp15752
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p15753
tp15754
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p15755
tp15756
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15757
tp15758
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15759
tp15760
asbsg211
(lp15761
g15632
asg213
g14
(g650
g16
Ntp15762
Rp15763
(dp15764
g20
Nsg656
g1883
sg665
(dp15765
sg667
Nsg669
(dp15766
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15767
(dp15768
g37
(lp15769
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15770
tp15771
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15772
tp15773
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15774
tp15775
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15776
tp15777
asbsg55
g14
(g56
g16
Ntp15778
Rp15779
(dp15780
g60
(I00
tp15781
sg62
S'float64'
p15782
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15783
Rp15784
(dp15785
g32
g14
(g148
g16
Ntp15786
Rp15787
(dp15788
g12
(lp15789
g15577
asg34
(itheano.gof.utils
scratchpad
p15790
(dp15791
g37
(lp15792
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p15793
tp15794
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p15795
tp15796
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p15797
tp15798
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15799
tp15800
asbsg211
(lp15801
g15784
asg213
g14
(g214
g16
Ntp15802
Rp15803
(dp15804
g218
(lp15805
sg220
(lp15806
I1
aI0
asg222
(lp15807
sg224
g13473
sg225
I00
sg226
(I1
I0
tp15808
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15809
(dp15810
bsg55
g14
(g56
g16
Ntp15811
Rp15812
(dp15813
g60
(I00
I00
tp15814
sg62
g13474
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15815
(dp15816
g37
(lp15817
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15818
tp15819
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p15820
tp15821
a(g47
I4732
g1035
S'return _dot(a, b)'
p15822
tp15823
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15824
tp15825
asbsg211
(lp15826
g15625
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15827
(dp15828
bsg55
g14
(g56
g16
Ntp15829
Rp15830
(dp15831
g60
(I00
tp15832
sg62
S'float64'
p15833
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15834
Rp15835
(dp15836
g32
g14
(g148
g16
Ntp15837
Rp15838
(dp15839
g12
(lp15840
g14
(g28
g16
Ntp15841
Rp15842
(dp15843
g32
g14
(g148
g16
Ntp15844
Rp15845
(dp15846
g12
(lp15847
g14
(g28
g16
Ntp15848
Rp15849
(dp15850
g32
g14
(g148
g16
Ntp15851
Rp15852
(dp15853
g12
(lp15854
g15432
ag14
(g28
g16
Ntp15855
Rp15856
(dp15857
g32
g14
(g148
g16
Ntp15858
Rp15859
(dp15860
g12
(lp15861
g15591
asg34
(itheano.gof.utils
scratchpad
p15862
(dp15863
g37
(lp15864
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p15865
tp15866
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p15867
tp15868
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p15869
tp15870
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15871
tp15872
asbsg211
(lp15873
g15856
asg213
g14
(g214
g16
Ntp15874
Rp15875
(dp15876
g218
(lp15877
sg220
(lp15878
I1
aI0
asg222
(lp15879
sg224
g13493
sg225
I00
sg226
(I1
I0
tp15880
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15881
(dp15882
bsg55
g14
(g56
g16
Ntp15883
Rp15884
(dp15885
g60
(I00
I00
tp15886
sg62
g13494
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15887
(dp15888
g37
(lp15889
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p15890
tp15891
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p15892
tp15893
a(g47
I4732
g1035
S'return _dot(a, b)'
p15894
tp15895
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15896
tp15897
asbsg211
(lp15898
g15849
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15899
(dp15900
bsg55
g14
(g56
g16
Ntp15901
Rp15902
(dp15903
g60
(I00
tp15904
sg62
S'float64'
p15905
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15906
Rp15907
(dp15908
g32
g14
(g148
g16
Ntp15909
Rp15910
(dp15911
g12
(lp15912
g14
(g28
g16
Ntp15913
Rp15914
(dp15915
g32
g14
(g148
g16
Ntp15916
Rp15917
(dp15918
g12
(lp15919
g1926
asg34
(itheano.gof.utils
scratchpad
p15920
(dp15921
g37
(lp15922
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15923
tp15924
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15925
tp15926
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p15927
tp15928
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15929
tp15930
asbsg211
(lp15931
g15914
asg213
g14
(g214
g16
Ntp15932
Rp15933
(dp15934
g218
(lp15935
sg220
(lp15936
sg222
(lp15937
I0
asg224
(tsg225
I00
sg226
(g227
tp15938
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15939
(dp15940
bsg55
g14
(g56
g16
Ntp15941
Rp15942
(dp15943
g60
(I01
tp15944
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp15945
Rp15946
(dp15947
g32
g14
(g148
g16
Ntp15948
Rp15949
(dp15950
g12
(lp15951
g15450
asg34
(itheano.gof.utils
scratchpad
p15952
(dp15953
g37
(lp15954
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15955
tp15956
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15957
tp15958
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15959
tp15960
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15961
tp15962
asbsg211
(lp15963
g15946
asg213
g14
(g650
g16
Ntp15964
Rp15965
(dp15966
g20
Nsg656
g3280
sg665
(dp15967
sg667
Nsg669
(dp15968
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p15969
(dp15970
g37
(lp15971
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15972
tp15973
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p15974
tp15975
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p15976
tp15977
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p15978
tp15979
asbsg55
g14
(g56
g16
Ntp15980
Rp15981
(dp15982
g60
(I00
tp15983
sg62
S'float64'
p15984
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p15985
(dp15986
g37
(lp15987
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p15988
tp15989
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15990
tp15991
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p15992
tp15993
a(g202
I401
g52
S'self.add_tag_trace(node)'
p15994
tp15995
asbsg211
(lp15996
g15907
asg213
g14
(g650
g16
Ntp15997
Rp15998
(dp15999
g20
Nsg656
g1575
sg665
(dp16000
sg667
Nsg669
(dp16001
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16002
(dp16003
g37
(lp16004
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p16005
tp16006
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16007
tp16008
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16009
tp16010
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16011
tp16012
asbsg55
g14
(g56
g16
Ntp16013
Rp16014
(dp16015
g60
(I00
tp16016
sg62
S'float64'
p16017
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16018
(dp16019
g37
(lp16020
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p16021
tp16022
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p16023
tp16024
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p16025
tp16026
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16027
tp16028
asbsg211
(lp16029
g15842
asg213
g14
(g650
g16
Ntp16030
Rp16031
(dp16032
g20
Nsg656
g1883
sg665
(dp16033
sg667
Nsg669
(dp16034
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16035
(dp16036
g37
(lp16037
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p16038
tp16039
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16040
tp16041
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16042
tp16043
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16044
tp16045
asbsg55
g14
(g56
g16
Ntp16046
Rp16047
(dp16048
g60
(I00
tp16049
sg62
S'float64'
p16050
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16051
Rp16052
(dp16053
g32
g14
(g148
g16
Ntp16054
Rp16055
(dp16056
g12
(lp16057
g15577
asg34
(itheano.gof.utils
scratchpad
p16058
(dp16059
g37
(lp16060
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p16061
tp16062
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16063
tp16064
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16065
tp16066
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16067
tp16068
asbsg211
(lp16069
g16052
asg213
g14
(g214
g16
Ntp16070
Rp16071
(dp16072
g218
(lp16073
sg220
(lp16074
I1
aI0
asg222
(lp16075
sg224
g13473
sg225
I00
sg226
(I1
I0
tp16076
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16077
(dp16078
bsg55
g14
(g56
g16
Ntp16079
Rp16080
(dp16081
g60
(I00
I00
tp16082
sg62
g13474
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16083
(dp16084
g37
(lp16085
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16086
tp16087
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p16088
tp16089
a(g47
I4732
g1035
S'return _dot(a, b)'
p16090
tp16091
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16092
tp16093
asbsg211
(lp16094
g15835
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16095
(dp16096
bsg55
g14
(g56
g16
Ntp16097
Rp16098
(dp16099
g60
(I00
tp16100
sg62
S'float64'
p16101
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16102
(dp16103
g37
(lp16104
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16105
tp16106
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p16107
tp16108
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16109
tp16110
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16111
tp16112
asbsg211
(lp16113
g15618
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16114
(dp16115
g37
(lp16116
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16117
tp16118
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16119
tp16120
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16121
tp16122
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16123
tp16124
asbsg55
g14
(g56
g16
Ntp16125
Rp16126
(dp16127
g60
(I00
tp16128
sg62
S'float64'
p16129
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag15492
asg34
(itheano.gof.utils
scratchpad
p16130
(dp16131
g37
(lp16132
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16133
tp16134
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p16135
tp16136
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16137
tp16138
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16139
tp16140
asbsg211
(lp16141
g15611
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16142
(dp16143
g37
(lp16144
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16145
tp16146
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16147
tp16148
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16149
tp16150
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16151
tp16152
asbsg55
g14
(g56
g16
Ntp16153
Rp16154
(dp16155
g60
(I00
tp16156
sg62
g15341
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16157
Rp16158
(dp16159
g32
g14
(g148
g16
Ntp16160
Rp16161
(dp16162
g12
(lp16163
g14
(g28
g16
Ntp16164
Rp16165
(dp16166
g32
g14
(g148
g16
Ntp16167
Rp16168
(dp16169
g12
(lp16170
g14
(g28
g16
Ntp16171
Rp16172
(dp16173
g32
g14
(g148
g16
Ntp16174
Rp16175
(dp16176
g12
(lp16177
g14
(g28
g16
Ntp16178
Rp16179
(dp16180
g32
g14
(g148
g16
Ntp16181
Rp16182
(dp16183
g12
(lp16184
g14
(g28
g16
Ntp16185
Rp16186
(dp16187
g32
g14
(g148
g16
Ntp16188
Rp16189
(dp16190
g12
(lp16191
g15404
asg34
(itheano.gof.utils
scratchpad
p16192
(dp16193
g37
(lp16194
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16195
tp16196
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16197
tp16198
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16199
tp16200
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16201
tp16202
asbsg211
(lp16203
g16186
asg213
g14
(g214
g16
Ntp16204
Rp16205
(dp16206
g218
(lp16207
sg220
(lp16208
I0
asg222
(lp16209
sg224
g13549
sg225
I00
sg226
(I0
tp16210
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16211
(dp16212
bsg55
g14
(g56
g16
Ntp16213
Rp16214
(dp16215
g60
(I00
tp16216
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16217
(dp16218
g37
(lp16219
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16220
tp16221
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p16222
tp16223
a(g198
I324
g3811
S'return op(self)'
p16224
tp16225
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16226
tp16227
asbsg211
(lp16228
g16179
asg213
g14
(g214
g16
Ntp16229
Rp16230
(dp16231
g218
(lp16232
sg220
(lp16233
I0
asg222
(lp16234
I1
asg224
(I00
tp16235
sg225
I00
sg226
(I0
g227
tp16236
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16237
(dp16238
bsg55
g14
(g56
g16
Ntp16239
Rp16240
(dp16241
g60
(I00
I01
tp16242
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16243
Rp16244
(dp16245
g32
g14
(g148
g16
Ntp16246
Rp16247
(dp16248
g12
(lp16249
g14
(g28
g16
Ntp16250
Rp16251
(dp16252
g32
g14
(g148
g16
Ntp16253
Rp16254
(dp16255
g12
(lp16256
g15478
ag14
(g28
g16
Ntp16257
Rp16258
(dp16259
g32
g14
(g148
g16
Ntp16260
Rp16261
(dp16262
g12
(lp16263
g14
(g28
g16
Ntp16264
Rp16265
(dp16266
g32
g14
(g148
g16
Ntp16267
Rp16268
(dp16269
g12
(lp16270
g1926
asg34
(itheano.gof.utils
scratchpad
p16271
(dp16272
g37
g15654
sbsg211
(lp16273
g16265
asg213
g15665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16274
(dp16275
bsg55
g15674
sg20
Nsbag14
(g28
g16
Ntp16276
Rp16277
(dp16278
g32
g14
(g148
g16
Ntp16279
Rp16280
(dp16281
g12
(lp16282
g15450
asg34
(itheano.gof.utils
scratchpad
p16283
(dp16284
g37
g15686
sbsg211
(lp16285
g16277
asg213
g15697
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16286
(dp16287
g37
g15703
sbsg55
g15713
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16288
(dp16289
g37
g15719
sbsg211
(lp16290
g16258
asg213
g15730
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16291
(dp16292
g37
g15736
sbsg55
g15746
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16293
(dp16294
g37
g15752
sbsg211
(lp16295
g16251
asg213
g15763
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16296
(dp16297
g37
g15769
sbsg55
g15779
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16298
(dp16299
g37
(lp16300
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16301
tp16302
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16303
tp16304
a(g198
I324
g3811
S'return op(self)'
p16305
tp16306
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16307
tp16308
asbsg211
(lp16309
g16244
asg213
g14
(g214
g16
Ntp16310
Rp16311
(dp16312
g218
(lp16313
sg220
(lp16314
I0
asg222
(lp16315
I0
asg224
(I00
tp16316
sg225
I00
sg226
(g227
I0
tp16317
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16318
(dp16319
bsg55
g14
(g56
g16
Ntp16320
Rp16321
(dp16322
g60
(I01
I00
tp16323
sg62
g15782
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16324
(dp16325
g37
(lp16326
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16327
tp16328
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16329
tp16330
a(g47
I4732
g1035
S'return _dot(a, b)'
p16331
tp16332
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16333
tp16334
asbsg211
(lp16335
g16172
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16336
(dp16337
bsg55
g14
(g56
g16
Ntp16338
Rp16339
(dp16340
g60
(I00
I00
tp16341
sg62
S'float64'
p16342
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16343
Rp16344
(dp16345
g32
g14
(g148
g16
Ntp16346
Rp16347
(dp16348
g12
(lp16349
g14
(g28
g16
Ntp16350
Rp16351
(dp16352
g32
g14
(g148
g16
Ntp16353
Rp16354
(dp16355
g12
(lp16356
g14
(g28
g16
Ntp16357
Rp16358
(dp16359
g32
g14
(g148
g16
Ntp16360
Rp16361
(dp16362
g12
(lp16363
g15404
asg34
(itheano.gof.utils
scratchpad
p16364
(dp16365
g37
(lp16366
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16367
tp16368
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16369
tp16370
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16371
tp16372
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16373
tp16374
asbsg211
(lp16375
g16358
asg213
g14
(g214
g16
Ntp16376
Rp16377
(dp16378
g218
(lp16379
sg220
(lp16380
I0
asg222
(lp16381
sg224
g13549
sg225
I00
sg226
(I0
tp16382
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16383
(dp16384
bsg55
g14
(g56
g16
Ntp16385
Rp16386
(dp16387
g60
(I00
tp16388
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16389
(dp16390
g37
(lp16391
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16392
tp16393
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p16394
tp16395
a(g198
I324
g3811
S'return op(self)'
p16396
tp16397
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16398
tp16399
asbsg211
(lp16400
g16351
asg213
g14
(g214
g16
Ntp16401
Rp16402
(dp16403
g218
(lp16404
sg220
(lp16405
I0
asg222
(lp16406
I1
asg224
(I00
tp16407
sg225
I00
sg226
(I0
g227
tp16408
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16409
(dp16410
bsg55
g14
(g56
g16
Ntp16411
Rp16412
(dp16413
g60
(I00
I01
tp16414
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16415
Rp16416
(dp16417
g32
g14
(g148
g16
Ntp16418
Rp16419
(dp16420
g12
(lp16421
g14
(g28
g16
Ntp16422
Rp16423
(dp16424
g32
g14
(g148
g16
Ntp16425
Rp16426
(dp16427
g12
(lp16428
g14
(g28
g16
Ntp16429
Rp16430
(dp16431
g32
g14
(g148
g16
Ntp16432
Rp16433
(dp16434
g12
(lp16435
g15432
ag14
(g28
g16
Ntp16436
Rp16437
(dp16438
g32
g14
(g148
g16
Ntp16439
Rp16440
(dp16441
g12
(lp16442
g15591
asg34
(itheano.gof.utils
scratchpad
p16443
(dp16444
g37
g15864
sbsg211
(lp16445
g16437
asg213
g15875
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16446
(dp16447
bsg55
g15884
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16448
(dp16449
g37
g15889
sbsg211
(lp16450
g16430
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16451
(dp16452
bsg55
g15902
sg20
Nsbag14
(g28
g16
Ntp16453
Rp16454
(dp16455
g32
g14
(g148
g16
Ntp16456
Rp16457
(dp16458
g12
(lp16459
g14
(g28
g16
Ntp16460
Rp16461
(dp16462
g32
g14
(g148
g16
Ntp16463
Rp16464
(dp16465
g12
(lp16466
g1926
asg34
(itheano.gof.utils
scratchpad
p16467
(dp16468
g37
g15922
sbsg211
(lp16469
g16461
asg213
g15933
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16470
(dp16471
bsg55
g15942
sg20
Nsbag14
(g28
g16
Ntp16472
Rp16473
(dp16474
g32
g14
(g148
g16
Ntp16475
Rp16476
(dp16477
g12
(lp16478
g15450
asg34
(itheano.gof.utils
scratchpad
p16479
(dp16480
g37
g15954
sbsg211
(lp16481
g16473
asg213
g15965
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16482
(dp16483
g37
g15971
sbsg55
g15981
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16484
(dp16485
g37
g15987
sbsg211
(lp16486
g16454
asg213
g15998
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16487
(dp16488
g37
g16004
sbsg55
g16014
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16489
(dp16490
g37
g16020
sbsg211
(lp16491
g16423
asg213
g16031
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16492
(dp16493
g37
g16037
sbsg55
g16047
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16494
(dp16495
g37
(lp16496
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16497
tp16498
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16499
tp16500
a(g198
I324
g3811
S'return op(self)'
p16501
tp16502
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16503
tp16504
asbsg211
(lp16505
g16416
asg213
g14
(g214
g16
Ntp16506
Rp16507
(dp16508
g218
(lp16509
sg220
(lp16510
I0
asg222
(lp16511
I0
asg224
(I00
tp16512
sg225
I00
sg226
(g227
I0
tp16513
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16514
(dp16515
bsg55
g14
(g56
g16
Ntp16516
Rp16517
(dp16518
g60
(I01
I00
tp16519
sg62
g16050
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16520
(dp16521
g37
(lp16522
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16523
tp16524
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16525
tp16526
a(g47
I4732
g1035
S'return _dot(a, b)'
p16527
tp16528
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16529
tp16530
asbsg211
(lp16531
g16344
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16532
(dp16533
bsg55
g14
(g56
g16
Ntp16534
Rp16535
(dp16536
g60
(I00
I00
tp16537
sg62
S'float64'
p16538
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16539
(dp16540
g37
(lp16541
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16542
tp16543
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p16544
tp16545
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16546
tp16547
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16548
tp16549
asbsg211
(lp16550
g16165
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16551
(dp16552
g37
(lp16553
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16554
tp16555
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16556
tp16557
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16558
tp16559
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16560
tp16561
asbsg55
g15520
sg20
Nsbag15506
asg34
(itheano.gof.utils
scratchpad
p16562
(dp16563
g37
(lp16564
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16565
tp16566
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p16567
tp16568
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16569
tp16570
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16571
tp16572
asbsg211
(lp16573
g16158
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16574
(dp16575
g37
(lp16576
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16577
tp16578
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16579
tp16580
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16581
tp16582
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16583
tp16584
asbsg55
g14
(g56
g16
Ntp16585
Rp16586
(dp16587
g60
(I00
I00
tp16588
sg62
S'float64'
p16589
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16590
Rp16591
(dp16592
g32
g14
(g148
g16
Ntp16593
Rp16594
(dp16595
g12
(lp16596
g14
(g28
g16
Ntp16597
Rp16598
(dp16599
g32
g14
(g148
g16
Ntp16600
Rp16601
(dp16602
g12
(lp16603
g14
(g28
g16
Ntp16604
Rp16605
(dp16606
g32
g14
(g148
g16
Ntp16607
Rp16608
(dp16609
g12
(lp16610
g14
(g28
g16
Ntp16611
Rp16612
(dp16613
g32
g14
(g148
g16
Ntp16614
Rp16615
(dp16616
g12
(lp16617
g14
(g28
g16
Ntp16618
Rp16619
(dp16620
g32
g14
(g148
g16
Ntp16621
Rp16622
(dp16623
g12
(lp16624
g15418
asg34
(itheano.gof.utils
scratchpad
p16625
(dp16626
g37
(lp16627
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16628
tp16629
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16630
tp16631
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16632
tp16633
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16634
tp16635
asbsg211
(lp16636
g16619
asg213
g14
(g214
g16
Ntp16637
Rp16638
(dp16639
g218
(lp16640
sg220
(lp16641
I0
asg222
(lp16642
sg224
g12813
sg225
I00
sg226
(I0
tp16643
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16644
(dp16645
bsg55
g14
(g56
g16
Ntp16646
Rp16647
(dp16648
g60
(I00
tp16649
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16650
(dp16651
g37
(lp16652
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16653
tp16654
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p16655
tp16656
a(g198
I324
g3811
S'return op(self)'
p16657
tp16658
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16659
tp16660
asbsg211
(lp16661
g16612
asg213
g14
(g214
g16
Ntp16662
Rp16663
(dp16664
g218
(lp16665
sg220
(lp16666
I0
asg222
(lp16667
I1
asg224
(I00
tp16668
sg225
I00
sg226
(I0
g227
tp16669
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16670
(dp16671
bsg55
g14
(g56
g16
Ntp16672
Rp16673
(dp16674
g60
(I00
I01
tp16675
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16676
Rp16677
(dp16678
g32
g14
(g148
g16
Ntp16679
Rp16680
(dp16681
g12
(lp16682
g14
(g28
g16
Ntp16683
Rp16684
(dp16685
g32
g14
(g148
g16
Ntp16686
Rp16687
(dp16688
g12
(lp16689
g15478
ag14
(g28
g16
Ntp16690
Rp16691
(dp16692
g32
g14
(g148
g16
Ntp16693
Rp16694
(dp16695
g12
(lp16696
g14
(g28
g16
Ntp16697
Rp16698
(dp16699
g32
g14
(g148
g16
Ntp16700
Rp16701
(dp16702
g12
(lp16703
g1926
asg34
(itheano.gof.utils
scratchpad
p16704
(dp16705
g37
g15654
sbsg211
(lp16706
g16698
asg213
g15665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16707
(dp16708
bsg55
g15674
sg20
Nsbag14
(g28
g16
Ntp16709
Rp16710
(dp16711
g32
g14
(g148
g16
Ntp16712
Rp16713
(dp16714
g12
(lp16715
g15450
asg34
(itheano.gof.utils
scratchpad
p16716
(dp16717
g37
g15686
sbsg211
(lp16718
g16710
asg213
g15697
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16719
(dp16720
g37
g15703
sbsg55
g15713
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16721
(dp16722
g37
g15719
sbsg211
(lp16723
g16691
asg213
g15730
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16724
(dp16725
g37
g15736
sbsg55
g15746
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16726
(dp16727
g37
g15752
sbsg211
(lp16728
g16684
asg213
g15763
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16729
(dp16730
g37
g15769
sbsg55
g15779
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16731
(dp16732
g37
(lp16733
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16734
tp16735
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16736
tp16737
a(g198
I324
g3811
S'return op(self)'
p16738
tp16739
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16740
tp16741
asbsg211
(lp16742
g16677
asg213
g14
(g214
g16
Ntp16743
Rp16744
(dp16745
g218
(lp16746
sg220
(lp16747
I0
asg222
(lp16748
I0
asg224
(I00
tp16749
sg225
I00
sg226
(g227
I0
tp16750
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16751
(dp16752
bsg55
g14
(g56
g16
Ntp16753
Rp16754
(dp16755
g60
(I01
I00
tp16756
sg62
g15782
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16757
(dp16758
g37
(lp16759
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16760
tp16761
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16762
tp16763
a(g47
I4732
g1035
S'return _dot(a, b)'
p16764
tp16765
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16766
tp16767
asbsg211
(lp16768
g16605
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16769
(dp16770
bsg55
g14
(g56
g16
Ntp16771
Rp16772
(dp16773
g60
(I00
I00
tp16774
sg62
S'float64'
p16775
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16776
Rp16777
(dp16778
g32
g14
(g148
g16
Ntp16779
Rp16780
(dp16781
g12
(lp16782
g14
(g28
g16
Ntp16783
Rp16784
(dp16785
g32
g14
(g148
g16
Ntp16786
Rp16787
(dp16788
g12
(lp16789
g14
(g28
g16
Ntp16790
Rp16791
(dp16792
g32
g14
(g148
g16
Ntp16793
Rp16794
(dp16795
g12
(lp16796
g15418
asg34
(itheano.gof.utils
scratchpad
p16797
(dp16798
g37
(lp16799
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16800
tp16801
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p16802
tp16803
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p16804
tp16805
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16806
tp16807
asbsg211
(lp16808
g16791
asg213
g14
(g214
g16
Ntp16809
Rp16810
(dp16811
g218
(lp16812
sg220
(lp16813
I0
asg222
(lp16814
sg224
g12813
sg225
I00
sg226
(I0
tp16815
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16816
(dp16817
bsg55
g14
(g56
g16
Ntp16818
Rp16819
(dp16820
g60
(I00
tp16821
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16822
(dp16823
g37
(lp16824
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16825
tp16826
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p16827
tp16828
a(g198
I324
g3811
S'return op(self)'
p16829
tp16830
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16831
tp16832
asbsg211
(lp16833
g16784
asg213
g14
(g214
g16
Ntp16834
Rp16835
(dp16836
g218
(lp16837
sg220
(lp16838
I0
asg222
(lp16839
I1
asg224
(I00
tp16840
sg225
I00
sg226
(I0
g227
tp16841
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16842
(dp16843
bsg55
g14
(g56
g16
Ntp16844
Rp16845
(dp16846
g60
(I00
I01
tp16847
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp16848
Rp16849
(dp16850
g32
g14
(g148
g16
Ntp16851
Rp16852
(dp16853
g12
(lp16854
g14
(g28
g16
Ntp16855
Rp16856
(dp16857
g32
g14
(g148
g16
Ntp16858
Rp16859
(dp16860
g12
(lp16861
g14
(g28
g16
Ntp16862
Rp16863
(dp16864
g32
g14
(g148
g16
Ntp16865
Rp16866
(dp16867
g12
(lp16868
g15432
ag14
(g28
g16
Ntp16869
Rp16870
(dp16871
g32
g14
(g148
g16
Ntp16872
Rp16873
(dp16874
g12
(lp16875
g15591
asg34
(itheano.gof.utils
scratchpad
p16876
(dp16877
g37
g15864
sbsg211
(lp16878
g16870
asg213
g15875
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16879
(dp16880
bsg55
g15884
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16881
(dp16882
g37
g15889
sbsg211
(lp16883
g16863
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16884
(dp16885
bsg55
g15902
sg20
Nsbag14
(g28
g16
Ntp16886
Rp16887
(dp16888
g32
g14
(g148
g16
Ntp16889
Rp16890
(dp16891
g12
(lp16892
g14
(g28
g16
Ntp16893
Rp16894
(dp16895
g32
g14
(g148
g16
Ntp16896
Rp16897
(dp16898
g12
(lp16899
g1926
asg34
(itheano.gof.utils
scratchpad
p16900
(dp16901
g37
g15922
sbsg211
(lp16902
g16894
asg213
g15933
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16903
(dp16904
bsg55
g15942
sg20
Nsbag14
(g28
g16
Ntp16905
Rp16906
(dp16907
g32
g14
(g148
g16
Ntp16908
Rp16909
(dp16910
g12
(lp16911
g15450
asg34
(itheano.gof.utils
scratchpad
p16912
(dp16913
g37
g15954
sbsg211
(lp16914
g16906
asg213
g15965
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16915
(dp16916
g37
g15971
sbsg55
g15981
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16917
(dp16918
g37
g15987
sbsg211
(lp16919
g16887
asg213
g15998
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16920
(dp16921
g37
g16004
sbsg55
g16014
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16922
(dp16923
g37
g16020
sbsg211
(lp16924
g16856
asg213
g16031
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16925
(dp16926
g37
g16037
sbsg55
g16047
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16927
(dp16928
g37
(lp16929
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16930
tp16931
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16932
tp16933
a(g198
I324
g3811
S'return op(self)'
p16934
tp16935
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16936
tp16937
asbsg211
(lp16938
g16849
asg213
g14
(g214
g16
Ntp16939
Rp16940
(dp16941
g218
(lp16942
sg220
(lp16943
I0
asg222
(lp16944
I0
asg224
(I00
tp16945
sg225
I00
sg226
(g227
I0
tp16946
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16947
(dp16948
bsg55
g14
(g56
g16
Ntp16949
Rp16950
(dp16951
g60
(I01
I00
tp16952
sg62
g16050
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16953
(dp16954
g37
(lp16955
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p16956
tp16957
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p16958
tp16959
a(g47
I4732
g1035
S'return _dot(a, b)'
p16960
tp16961
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16962
tp16963
asbsg211
(lp16964
g16777
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16965
(dp16966
bsg55
g14
(g56
g16
Ntp16967
Rp16968
(dp16969
g60
(I00
I00
tp16970
sg62
S'float64'
p16971
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p16972
(dp16973
g37
(lp16974
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16975
tp16976
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p16977
tp16978
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16979
tp16980
a(g202
I401
g52
S'self.add_tag_trace(node)'
p16981
tp16982
asbsg211
(lp16983
g16598
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p16984
(dp16985
g37
(lp16986
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p16987
tp16988
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p16989
tp16990
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p16991
tp16992
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p16993
tp16994
asbsg55
g15539
sg20
Nsbag15525
asg34
(itheano.gof.utils
scratchpad
p16995
(dp16996
g37
(lp16997
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p16998
tp16999
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p17000
tp17001
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17002
tp17003
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17004
tp17005
asbsg211
(lp17006
g16591
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17007
(dp17008
g37
(lp17009
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17010
tp17011
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p17012
tp17013
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17014
tp17015
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p17016
tp17017
asbsg55
g14
(g56
g16
Ntp17018
Rp17019
(dp17020
g60
(I00
I00
tp17021
sg62
g15360
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp17022
Rp17023
(dp17024
g32
g14
(g148
g16
Ntp17025
Rp17026
(dp17027
g12
(lp17028
g14
(g28
g16
Ntp17029
Rp17030
(dp17031
g32
g14
(g148
g16
Ntp17032
Rp17033
(dp17034
g12
(lp17035
g14
(g28
g16
Ntp17036
Rp17037
(dp17038
g32
g14
(g148
g16
Ntp17039
Rp17040
(dp17041
g12
(lp17042
g14
(g28
g16
Ntp17043
Rp17044
(dp17045
g32
g14
(g148
g16
Ntp17046
Rp17047
(dp17048
g12
(lp17049
g15450
asg34
(itheano.gof.utils
scratchpad
p17050
(dp17051
g37
(lp17052
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p17053
tp17054
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p17055
tp17056
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p17057
tp17058
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17059
tp17060
asbsg211
(lp17061
g17044
asg213
g14
(g214
g16
Ntp17062
Rp17063
(dp17064
g218
(lp17065
sg220
(lp17066
I0
asg222
(lp17067
sg224
g13729
sg225
I00
sg226
(I0
tp17068
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17069
(dp17070
bsg55
g14
(g56
g16
Ntp17071
Rp17072
(dp17073
g60
(I00
tp17074
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17075
(dp17076
g37
(lp17077
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p17078
tp17079
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p17080
tp17081
a(g198
I324
g3811
S'return op(self)'
p17082
tp17083
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17084
tp17085
asbsg211
(lp17086
g17037
asg213
g14
(g214
g16
Ntp17087
Rp17088
(dp17089
g218
(lp17090
sg220
(lp17091
I0
asg222
(lp17092
I1
asg224
(I00
tp17093
sg225
I00
sg226
(I0
g227
tp17094
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17095
(dp17096
bsg55
g14
(g56
g16
Ntp17097
Rp17098
(dp17099
g60
(I00
I01
tp17100
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp17101
Rp17102
(dp17103
g32
g14
(g148
g16
Ntp17104
Rp17105
(dp17106
g12
(lp17107
g15432
asg34
(itheano.gof.utils
scratchpad
p17108
(dp17109
g37
(lp17110
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p17111
tp17112
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p17113
tp17114
a(g198
I324
g3811
S'return op(self)'
p17115
tp17116
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17117
tp17118
asbsg211
(lp17119
g17102
asg213
g14
(g214
g16
Ntp17120
Rp17121
(dp17122
g218
(lp17123
sg220
(lp17124
I0
asg222
(lp17125
I0
asg224
(I00
tp17126
sg225
I00
sg226
(g227
I0
tp17127
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17128
(dp17129
bsg55
g14
(g56
g16
Ntp17130
Rp17131
(dp17132
g60
(I01
I00
tp17133
sg62
g14485
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17134
(dp17135
g37
(lp17136
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p17137
tp17138
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p17139
tp17140
a(g47
I4732
g1035
S'return _dot(a, b)'
p17141
tp17142
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17143
tp17144
asbsg211
(lp17145
g17030
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17146
(dp17147
bsg55
g15558
sg20
Nsbag15544
asg34
(itheano.gof.utils
scratchpad
p17148
(dp17149
g37
(lp17150
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17151
tp17152
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p17153
tp17154
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17155
tp17156
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17157
tp17158
asbsg211
(lp17159
g17023
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17160
(dp17161
g37
(lp17162
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17163
tp17164
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p17165
tp17166
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17167
tp17168
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p17169
tp17170
asbsg55
g14
(g56
g16
Ntp17171
Rp17172
(dp17173
g60
(I00
I00
tp17174
sg62
g15379
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp17175
Rp17176
(dp17177
g32
g14
(g148
g16
Ntp17178
Rp17179
(dp17180
g12
(lp17181
g14
(g28
g16
Ntp17182
Rp17183
(dp17184
g32
g14
(g148
g16
Ntp17185
Rp17186
(dp17187
g12
(lp17188
g14
(g28
g16
Ntp17189
Rp17190
(dp17191
g32
g14
(g148
g16
Ntp17192
Rp17193
(dp17194
g12
(lp17195
g15478
ag14
(g28
g16
Ntp17196
Rp17197
(dp17198
g32
g14
(g148
g16
Ntp17199
Rp17200
(dp17201
g12
(lp17202
g14
(g28
g16
Ntp17203
Rp17204
(dp17205
g32
g14
(g148
g16
Ntp17206
Rp17207
(dp17208
g12
(lp17209
g1926
asg34
(itheano.gof.utils
scratchpad
p17210
(dp17211
g37
g15654
sbsg211
(lp17212
g17204
asg213
g15665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17213
(dp17214
bsg55
g15674
sg20
Nsbag14
(g28
g16
Ntp17215
Rp17216
(dp17217
g32
g14
(g148
g16
Ntp17218
Rp17219
(dp17220
g12
(lp17221
g15450
asg34
(itheano.gof.utils
scratchpad
p17222
(dp17223
g37
g15686
sbsg211
(lp17224
g17216
asg213
g15697
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17225
(dp17226
g37
g15703
sbsg55
g15713
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17227
(dp17228
g37
g15719
sbsg211
(lp17229
g17197
asg213
g15730
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17230
(dp17231
g37
g15736
sbsg55
g15746
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17232
(dp17233
g37
g15752
sbsg211
(lp17234
g17190
asg213
g15763
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17235
(dp17236
g37
g15769
sbsg55
g15779
sg20
Nsbag14
(g28
g16
Ntp17237
Rp17238
(dp17239
g32
g14
(g148
g16
Ntp17240
Rp17241
(dp17242
g12
(lp17243
g15563
asg34
(itheano.gof.utils
scratchpad
p17244
(dp17245
g37
(lp17246
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p17247
tp17248
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p17249
tp17250
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p17251
tp17252
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17253
tp17254
asbsg211
(lp17255
g17238
asg213
g14
(g214
g16
Ntp17256
Rp17257
(dp17258
g218
(lp17259
sg220
(lp17260
I1
aI0
asg222
(lp17261
sg224
g12902
sg225
I00
sg226
(I1
I0
tp17262
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17263
(dp17264
bsg55
g14
(g56
g16
Ntp17265
Rp17266
(dp17267
g60
(I00
I00
tp17268
sg62
g12903
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17269
(dp17270
g37
(lp17271
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17272
tp17273
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p17274
tp17275
a(g47
I4732
g1035
S'return _dot(a, b)'
p17276
tp17277
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17278
tp17279
asbsg211
(lp17280
g17183
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17281
(dp17282
bsg55
g14
(g56
g16
Ntp17283
Rp17284
(dp17285
g60
(I00
tp17286
sg62
S'float64'
p17287
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp17288
Rp17289
(dp17290
g32
g14
(g148
g16
Ntp17291
Rp17292
(dp17293
g12
(lp17294
g14
(g28
g16
Ntp17295
Rp17296
(dp17297
g32
g14
(g148
g16
Ntp17298
Rp17299
(dp17300
g12
(lp17301
g14
(g28
g16
Ntp17302
Rp17303
(dp17304
g32
g14
(g148
g16
Ntp17305
Rp17306
(dp17307
g12
(lp17308
g15432
ag14
(g28
g16
Ntp17309
Rp17310
(dp17311
g32
g14
(g148
g16
Ntp17312
Rp17313
(dp17314
g12
(lp17315
g15591
asg34
(itheano.gof.utils
scratchpad
p17316
(dp17317
g37
g15864
sbsg211
(lp17318
g17310
asg213
g15875
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17319
(dp17320
bsg55
g15884
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17321
(dp17322
g37
g15889
sbsg211
(lp17323
g17303
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17324
(dp17325
bsg55
g15902
sg20
Nsbag14
(g28
g16
Ntp17326
Rp17327
(dp17328
g32
g14
(g148
g16
Ntp17329
Rp17330
(dp17331
g12
(lp17332
g14
(g28
g16
Ntp17333
Rp17334
(dp17335
g32
g14
(g148
g16
Ntp17336
Rp17337
(dp17338
g12
(lp17339
g1926
asg34
(itheano.gof.utils
scratchpad
p17340
(dp17341
g37
g15922
sbsg211
(lp17342
g17334
asg213
g15933
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17343
(dp17344
bsg55
g15942
sg20
Nsbag14
(g28
g16
Ntp17345
Rp17346
(dp17347
g32
g14
(g148
g16
Ntp17348
Rp17349
(dp17350
g12
(lp17351
g15450
asg34
(itheano.gof.utils
scratchpad
p17352
(dp17353
g37
g15954
sbsg211
(lp17354
g17346
asg213
g15965
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17355
(dp17356
g37
g15971
sbsg55
g15981
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17357
(dp17358
g37
g15987
sbsg211
(lp17359
g17327
asg213
g15998
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17360
(dp17361
g37
g16004
sbsg55
g16014
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17362
(dp17363
g37
g16020
sbsg211
(lp17364
g17296
asg213
g16031
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17365
(dp17366
g37
g16037
sbsg55
g16047
sg20
Nsbag14
(g28
g16
Ntp17367
Rp17368
(dp17369
g32
g14
(g148
g16
Ntp17370
Rp17371
(dp17372
g12
(lp17373
g15563
asg34
(itheano.gof.utils
scratchpad
p17374
(dp17375
g37
(lp17376
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p17377
tp17378
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p17379
tp17380
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p17381
tp17382
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17383
tp17384
asbsg211
(lp17385
g17368
asg213
g14
(g214
g16
Ntp17386
Rp17387
(dp17388
g218
(lp17389
sg220
(lp17390
I1
aI0
asg222
(lp17391
sg224
g12902
sg225
I00
sg226
(I1
I0
tp17392
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17393
(dp17394
bsg55
g14
(g56
g16
Ntp17395
Rp17396
(dp17397
g60
(I00
I00
tp17398
sg62
g12903
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17399
(dp17400
g37
(lp17401
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17402
tp17403
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p17404
tp17405
a(g47
I4732
g1035
S'return _dot(a, b)'
p17406
tp17407
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17408
tp17409
asbsg211
(lp17410
g17289
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17411
(dp17412
bsg55
g14
(g56
g16
Ntp17413
Rp17414
(dp17415
g60
(I00
tp17416
sg62
S'float64'
p17417
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p17418
(dp17419
g37
(lp17420
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p17421
tp17422
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p17423
tp17424
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17425
tp17426
a(g202
I401
g52
S'self.add_tag_trace(node)'
p17427
tp17428
asbsg211
(lp17429
g17176
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p17430
(dp17431
g37
(lp17432
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p17433
tp17434
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p17435
tp17436
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p17437
tp17438
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p17439
tp17440
asbsg55
g14
(g56
g16
Ntp17441
Rp17442
(dp17443
g60
(I00
tp17444
sg62
g15398
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I6
sg1174
(lp17445
I00
aI00
aI00
aI00
aI00
asg1243
I00
sg665
g1176
((lp17446
tp17447
Rp17448
sg1180
I1
sg1181
I4
sg1182
(lp17449
g314
(g317
S'\x00\x00\x00\x00'
p17450
tp17451
Rp17452
ag314
(g317
S'\xff\xff\xff\xff'
p17453
tp17454
Rp17455
ag314
(g317
S'\xff\xff\xff\xff'
p17456
tp17457
Rp17458
ag314
(g317
S'\xff\xff\xff\xff'
p17459
tp17460
Rp17461
aI0
asg1002
I1
sg1188
I10
sg1189
I00
sg1190
I-1
sg1191
I5
sg20
S'grad_of_scan_fn'
p17462
sg1193
g1196
sg1221
g1176
((lp17463
(lp17464
g1191
aI5
aa(lp17465
g1232
aI0
aa(lp17466
g999
ag15604
aa(lp17467
g1243
aI00
aa(lp17468
g1002
aI1
aa(lp17469
g1227
aI1
aa(lp17470
g1229
a(lp17471
(lp17472
I1
aaaa(lp17473
g1190
aI-1
aa(lp17474
g1187
aI3
aa(lp17475
g1235
aI0
aa(lp17476
g1180
aI1
aa(lp17477
g1189
aI00
aa(lp17478
g8
aI00
aa(lp17479
g665
ag17448
aa(lp17480
g20
ag17462
aa(lp17481
g1240
aNaatp17482
Rp17483
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p17484
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p17485
(g17387
((g12900
((I-1
I10
tp17486
I00
tp17487
tp17488
tp17489
(I1
(I00
tp17490
tp17491
tp17492
(g17257
((g12900
(g17486
I00
tp17493
tp17494
tp17495
(I1
(I00
tp17496
tp17497
tp17498
(g15965
((g13727
((I-1
I3
tp17499
I00
tp17500
tp17501
tp17502
(I1
(I00
tp17503
tp17504
tp17505
(g15697
((g13727
(g17499
I00
tp17506
tp17507
tp17508
(I1
(I00
tp17509
tp17510
tp17511
(g17063
((g13727
(g17499
I00
tp17512
tp17513
tp17514
(I1
(I00
tp17515
tp17516
tp17517
(g15965
((g13727
(g17499
I00
tp17518
tp17519
tp17520
(I1
(I00
tp17521
tp17522
tp17523
(g15697
((g13727
(g17499
I00
tp17524
tp17525
tp17526
(I1
(I00
tp17527
tp17528
tp17529
(g15965
((g13727
(g17499
I00
tp17530
tp17531
tp17532
(I1
(I00
tp17533
tp17534
tp17535
(g15697
((g13727
(g17499
I00
tp17536
tp17537
tp17538
(I1
(I00
tp17539
tp17540
tp17541
(g15965
((g13727
(g17499
I00
tp17542
tp17543
tp17544
(I1
(I00
tp17545
tp17546
tp17547
(g15697
((g13727
(g17499
I00
tp17548
tp17549
tp17550
(I1
(I00
tp17551
tp17552
tp17553
(g15933
((g1936
((S'a173b056c810f5c9ee305c38ce680f38'
p17554
I11
I0
tp17555
I00
tp17556
tp17557
tp17558
(I1
(I00
tp17559
tp17560
tp17561
(g15665
((g1936
(g17555
I00
tp17562
tp17563
tp17564
(I1
(I00
tp17565
tp17566
tp17567
(g15933
((g1936
(g17555
I00
tp17568
tp17569
tp17570
(I1
(I00
tp17571
tp17572
tp17573
(g15665
((g1936
(g17555
I00
tp17574
tp17575
tp17576
(I1
(I00
tp17577
tp17578
tp17579
(g15933
((g1936
(g17555
I00
tp17580
tp17581
tp17582
(I1
(I00
tp17583
tp17584
tp17585
(g15665
((g1936
(g17555
I00
tp17586
tp17587
tp17588
(I1
(I00
tp17589
tp17590
tp17591
(g15933
((g1936
(g17555
I00
tp17592
tp17593
tp17594
(I1
(I00
tp17595
tp17596
tp17597
(g15665
((g1936
(g17555
I00
tp17598
tp17599
tp17600
(I1
(I00
tp17601
tp17602
tp17603
(g15875
((g13491
((I-1
I12
tp17604
I00
tp17605
tp17606
tp17607
(I1
(I00
tp17608
tp17609
tp17610
(g15875
((g13491
(g17604
I00
tp17611
tp17612
tp17613
(I1
(I00
tp17614
tp17615
tp17616
(g15875
((g13491
(g17604
I00
tp17617
tp17618
tp17619
(I1
(I00
tp17620
tp17621
tp17622
(g15875
((g13491
(g17604
I00
tp17623
tp17624
tp17625
(I1
(I00
tp17626
tp17627
tp17628
(g17121
((g15446
((I-1
I2
tp17629
I00
tp17630
tp17631
tp17632
(I1
(I00
tp17633
tp17634
tp17635
(g16810
((g12811
((I-1
I1
tp17636
I00
tp17637
tp17638
tp17639
(I1
(I00
tp17640
tp17641
tp17642
(g16638
((g12811
(g17636
I00
tp17643
tp17644
tp17645
(I1
(I00
tp17646
tp17647
tp17648
(g16377
((g13547
((I-1
I0
tp17649
I00
tp17650
tp17651
tp17652
(I1
(I00
tp17653
tp17654
tp17655
(g16205
((g13547
(g17649
I00
tp17656
tp17657
tp17658
(I1
(I00
tp17659
tp17660
tp17661
(g16071
((g13471
((I-1
I11
tp17662
I00
tp17663
tp17664
tp17665
(I1
(I00
tp17666
tp17667
tp17668
(g15803
((g13471
(g17662
I00
tp17669
tp17670
tp17671
(I1
(I00
tp17672
tp17673
tp17674
(g17088
((g17072
((I4
I0
tp17675
I00
tp17676
tp17677
tp17678
(I1
(I00
tp17679
tp17680
tp17681
(g15998
((g15942
((I11
I0
tp17682
I00
tp17683
tp17684
(g15981
((I2
I0
tp17685
I00
tp17686
tp17687
tp17688
(I1
(I00
tp17689
tp17690
tp17691
(g15730
((g15674
((I12
I0
tp17692
I00
tp17693
tp17694
(g15713
((I3
I0
tp17695
I00
tp17696
tp17697
tp17698
(I1
(I00
tp17699
tp17700
tp17701
(g15998
((g15942
((I13
I0
tp17702
I00
tp17703
tp17704
(g15981
((I5
I0
tp17705
I00
tp17706
tp17707
tp17708
(I1
(I00
tp17709
tp17710
tp17711
(g15730
((g15674
((I14
I0
tp17712
I00
tp17713
tp17714
(g15713
((I6
I0
tp17715
I00
tp17716
tp17717
tp17718
(I1
(I00
tp17719
tp17720
tp17721
(g15998
((g15942
((I15
I0
tp17722
I00
tp17723
tp17724
(g15981
((I7
I0
tp17725
I00
tp17726
tp17727
tp17728
(I1
(I00
tp17729
tp17730
tp17731
(g15730
((g15674
((I16
I0
tp17732
I00
tp17733
tp17734
(g15713
((I8
I0
tp17735
I00
tp17736
tp17737
tp17738
(I1
(I00
tp17739
tp17740
tp17741
(g15998
((g15942
((I17
I0
tp17742
I00
tp17743
tp17744
(g15981
((I9
I0
tp17745
I00
tp17746
tp17747
tp17748
(I1
(I00
tp17749
tp17750
tp17751
(g15730
((g15674
((I18
I0
tp17752
I00
tp17753
tp17754
(g15713
((I10
I0
tp17755
I00
tp17756
tp17757
tp17758
(I1
(I00
tp17759
tp17760
tp17761
(g1043
((g15446
(g17629
I00
tp17762
tp17763
(g15884
((I19
I0
tp17764
I00
tp17765
tp17766
tp17767
(I1
(I00
tp17768
tp17769
tp17770
(g1043
((g15446
(g17629
I00
tp17771
tp17772
(g15884
((I20
I0
tp17773
I00
tp17774
tp17775
tp17776
(I1
(I00
tp17777
tp17778
tp17779
(g1043
((g15446
(g17629
I00
tp17780
tp17781
(g15884
((I21
I0
tp17782
I00
tp17783
tp17784
tp17785
(I1
(I00
tp17786
tp17787
tp17788
(g1043
((g15446
(g17629
I00
tp17789
tp17790
(g15884
((I22
I0
tp17791
I00
tp17792
tp17793
tp17794
(I1
(I00
tp17795
tp17796
tp17797
(g16835
((g16819
((I24
I0
tp17798
I00
tp17799
tp17800
tp17801
(I1
(I00
tp17802
tp17803
tp17804
(g16663
((g16647
((I25
I0
tp17805
I00
tp17806
tp17807
tp17808
(I1
(I00
tp17809
tp17810
tp17811
(g16402
((g16386
((I26
I0
tp17812
I00
tp17813
tp17814
tp17815
(I1
(I00
tp17816
tp17817
tp17818
(g16230
((g16214
((I27
I0
tp17819
I00
tp17820
tp17821
tp17822
(I1
(I00
tp17823
tp17824
tp17825
(g1043
((g17098
((I30
I0
tp17826
I00
tp17827
tp17828
(g17131
((I23
I0
tp17829
I00
tp17830
tp17831
tp17832
(I1
(I00
tp17833
tp17834
tp17835
(g15763
((g13727
((I-1
I5
tp17836
I00
tp17837
tp17838
(g15746
((I32
I0
tp17839
I00
tp17840
tp17841
tp17842
(I1
(I00
tp17843
tp17844
tp17845
(g15763
((g13727
(g17836
I00
tp17846
tp17847
(g15746
((I34
I0
tp17848
I00
tp17849
tp17850
tp17851
(I1
(I00
tp17852
tp17853
tp17854
(g15763
((g13727
(g17836
I00
tp17855
tp17856
(g15746
((I36
I0
tp17857
I00
tp17858
tp17859
tp17860
(I1
(I00
tp17861
tp17862
tp17863
(g15763
((g13727
(g17836
I00
tp17864
tp17865
(g15746
((I38
I0
tp17866
I00
tp17867
tp17868
tp17869
(I1
(I00
tp17870
tp17871
tp17872
(g16031
((g15902
((I39
I0
tp17873
I00
tp17874
tp17875
(g16014
((I31
I0
tp17876
I00
tp17877
tp17878
tp17879
(I1
(I00
tp17880
tp17881
tp17882
(g16031
((g15902
((I40
I0
tp17883
I00
tp17884
tp17885
(g16014
((I33
I0
tp17886
I00
tp17887
tp17888
tp17889
(I1
(I00
tp17890
tp17891
tp17892
(g16031
((g15902
((I41
I0
tp17893
I00
tp17894
tp17895
(g16014
((I35
I0
tp17896
I00
tp17897
tp17898
tp17899
(I1
(I00
tp17900
tp17901
tp17902
(g16031
((g15902
((I42
I0
tp17903
I00
tp17904
tp17905
(g16014
((I37
I0
tp17906
I00
tp17907
tp17908
tp17909
(I1
(I00
tp17910
tp17911
tp17912
(g652
((g15558
((I47
I0
tp17913
I00
tp17914
tp17915
(g15558
((I-1
I9
tp17916
I00
tp17917
tp17918
tp17919
(I1
(I00
tp17920
tp17921
tp17922
(g1043
((g15779
((I48
I0
tp17923
I00
tp17924
tp17925
(g17266
((I1
I0
tp17926
I00
tp17927
tp17928
tp17929
(I1
(I00
tp17930
tp17931
tp17932
(g16744
((g15779
((I49
I0
tp17933
I00
tp17934
tp17935
tp17936
(I1
(I00
tp17937
tp17938
tp17939
(g16311
((g15779
((I50
I0
tp17940
I00
tp17941
tp17942
tp17943
(I1
(I00
tp17944
tp17945
tp17946
(g1043
((g15779
((I51
I0
tp17947
I00
tp17948
tp17949
(g15812
((I29
I0
tp17950
I00
tp17951
tp17952
tp17953
(I1
(I00
tp17954
tp17955
tp17956
(g1043
((g16047
((I52
I0
tp17957
I00
tp17958
tp17959
(g17396
((I0
I0
tp17960
I00
tp17961
tp17962
tp17963
(I1
(I00
tp17964
tp17965
tp17966
(g16940
((g16047
((I53
I0
tp17967
I00
tp17968
tp17969
tp17970
(I1
(I00
tp17971
tp17972
tp17973
(g16507
((g16047
((I54
I0
tp17974
I00
tp17975
tp17976
tp17977
(I1
(I00
tp17978
tp17979
tp17980
(g1043
((g16047
((I55
I0
tp17981
I00
tp17982
tp17983
(g16080
((I28
I0
tp17984
I00
tp17985
tp17986
tp17987
(I1
(I00
tp17988
tp17989
tp17990
(g1043
((g16673
((I44
I0
tp17991
I00
tp17992
tp17993
(g16754
((I58
I0
tp17994
I00
tp17995
tp17996
tp17997
(I1
(I00
tp17998
tp17999
tp18000
(g1043
((g16240
((I46
I0
tp18001
I00
tp18002
tp18003
(g16321
((I59
I0
tp18004
I00
tp18005
tp18006
tp18007
(I1
(I00
tp18008
tp18009
tp18010
(g652
((g17284
((I57
I0
tp18011
I00
tp18012
tp18013
(g17414
((I61
I0
tp18014
I00
tp18015
tp18016
tp18017
(I1
(I00
tp18018
tp18019
tp18020
(g1043
((g16845
((I43
I0
tp18021
I00
tp18022
tp18023
(g16950
((I62
I0
tp18024
I00
tp18025
tp18026
tp18027
(I1
(I00
tp18028
tp18029
tp18030
(g1043
((g16412
((I45
I0
tp18031
I00
tp18032
tp18033
(g16517
((I63
I0
tp18034
I00
tp18035
tp18036
tp18037
(I1
(I00
tp18038
tp18039
tp18040
(g652
((g15830
((I60
I0
tp18041
I00
tp18042
tp18043
(g16098
((I64
I0
tp18044
I00
tp18045
tp18046
tp18047
(I1
(I00
tp18048
tp18049
tp18050
(g652
((g16772
((I65
I0
tp18051
I00
tp18052
tp18053
(g16968
((I68
I0
tp18054
I00
tp18055
tp18056
tp18057
(I1
(I00
tp18058
tp18059
tp18060
(g652
((g16339
((I66
I0
tp18061
I00
tp18062
tp18063
(g16535
((I69
I0
tp18064
I00
tp18065
tp18066
tp18067
(I1
(I00
tp18068
tp18069
tp18070
(g652
((g16126
((I70
I0
tp18071
I00
tp18072
tp18073
(g13727
((I-1
I6
tp18074
I00
tp18075
tp18076
tp18077
(I1
(I00
tp18078
tp18079
tp18080
(g652
((g15539
((I71
I0
tp18081
I00
tp18082
tp18083
(g15539
((I-1
I8
tp18084
I00
tp18085
tp18086
tp18087
(I1
(I00
tp18088
tp18089
tp18090
(g652
((g15520
((I72
I0
tp18091
I00
tp18092
tp18093
(g15520
((I-1
I7
tp18094
I00
tp18095
tp18096
tp18097
(I1
(I00
tp18098
tp18099
tp18100
tp18101
tp18102
sg1232
I0
sg1301
(lp18103
I00
aI00
aI00
aI00
aI00
asg1303
I1
sg1235
I0
sg1240
Nsg1304
(lp18104
g15338
ag14
(g56
g16
Ntp18105
Rp18106
(dp18107
g60
(I00
I00
I00
tp18108
sg62
g16589
sg64
g68
sg71
I00
sg20
Nsbag15357
ag15376
ag15395
asg1187
I3
sg1227
I1
sg1310
I10
sg1229
g17471
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p18109
(dp18110
g37
(lp18111
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p18112
tp18113
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18114
tp18115
a(g893
I440
g206
S'[t() for t in self.output_types])'
p18116
tp18117
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18118
tp18119
asbsg55
g18106
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18120
(dp18121
g37
(lp18122
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p18123
tp18124
a(g893
I1880
g894
S'gradients.append(x[-1])'
p18125
tp18126
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p18127
tp18128
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18129
tp18130
asbsg211
(lp18131
g12946
asg213
g14
(g308
g16
Ntp18132
Rp18133
(dp18134
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p18135
tp18136
Rp18137
tp18138
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18139
(dp18140
bsg55
g14
(g56
g16
Ntp18141
Rp18142
(dp18143
g60
(I00
I00
tp18144
sg62
g16589
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18145
(dp18146
g37
(lp18147
(g105
I76
g106
S'self.initTraining()'
p18148
tp18149
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p18150
tp18151
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18152
tp18153
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18154
tp18155
asbsg211
(lp18156
g12907
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18157
(dp18158
g37
(lp18159
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18160
tp18161
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18162
tp18163
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18164
tp18165
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18166
tp18167
asbsg55
g14
(g56
g16
Ntp18168
Rp18169
(dp18170
g60
(I00
I00
tp18171
sg62
S'float64'
p18172
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18173
(dp18174
g37
(lp18175
(g105
I76
g106
S'self.initTraining()'
p18176
tp18177
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p18178
tp18179
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18180
tp18181
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18182
tp18183
asbsg211
(lp18184
g12880
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18185
(dp18186
g37
(lp18187
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18188
tp18189
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18190
tp18191
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18192
tp18193
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18194
tp18195
asbsg55
g14
(g56
g16
Ntp18196
Rp18197
(dp18198
g60
(I00
I00
tp18199
sg62
S'float64'
p18200
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g12890
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g12887
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp18201
Rp18202
(dp18203
g20
Nsg21
g14
(g28
g16
Ntp18204
Rp18205
(dp18206
g32
g14
(g148
g16
Ntp18207
Rp18208
(dp18209
g12
(lp18210
g13458
ag14
(g28
g16
Ntp18211
Rp18212
(dp18213
g32
g14
(g148
g16
Ntp18214
Rp18215
(dp18216
g12
(lp18217
g14
(g28
g16
Ntp18218
Rp18219
(dp18220
g32
g14
(g148
g16
Ntp18221
Rp18222
(dp18223
g12
(lp18224
g12860
asg34
(itheano.gof.utils
scratchpad
p18225
(dp18226
g37
(lp18227
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18228
tp18229
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18230
tp18231
a(g205
I533
g206
S'inplace=False)(input))'
p18232
tp18233
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18234
tp18235
asbsg211
(lp18236
g18219
asg213
g14
(g214
g16
Ntp18237
Rp18238
(dp18239
g218
(lp18240
sg220
(lp18241
sg222
(lp18242
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp18243
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18244
(dp18245
bsg55
g14
(g56
g16
Ntp18246
Rp18247
(dp18248
g60
(I01
I01
tp18249
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp18250
Rp18251
(dp18252
g32
g14
(g148
g16
Ntp18253
Rp18254
(dp18255
g12
(lp18256
g15343
asg34
(itheano.gof.utils
scratchpad
p18257
(dp18258
g37
(lp18259
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p18260
tp18261
a(g893
I1880
g894
S'gradients.append(x[-1])'
p18262
tp18263
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p18264
tp18265
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18266
tp18267
asbsg211
(lp18268
g18251
asg213
g14
(g308
g16
Ntp18269
Rp18270
(dp18271
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p18272
tp18273
Rp18274
tp18275
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18276
(dp18277
bsg55
g14
(g56
g16
Ntp18278
Rp18279
(dp18280
g60
(I00
I00
tp18281
sg62
g15360
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18282
(dp18283
g37
(lp18284
(g105
I76
g106
S'self.initTraining()'
p18285
tp18286
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p18287
tp18288
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18289
tp18290
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18291
tp18292
asbsg211
(lp18293
g18212
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18294
(dp18295
g37
(lp18296
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18297
tp18298
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18299
tp18300
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18301
tp18302
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18303
tp18304
asbsg55
g14
(g56
g16
Ntp18305
Rp18306
(dp18307
g60
(I00
I00
tp18308
sg62
S'float64'
p18309
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18310
(dp18311
g37
(lp18312
(g105
I76
g106
S'self.initTraining()'
p18313
tp18314
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p18315
tp18316
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18317
tp18318
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18319
tp18320
asbsg211
(lp18321
g18205
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18322
(dp18323
g37
(lp18324
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18325
tp18326
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18327
tp18328
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18329
tp18330
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18331
tp18332
asbsg55
g14
(g56
g16
Ntp18333
Rp18334
(dp18335
g60
(I00
I00
tp18336
sg62
S'float64'
p18337
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g13461
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g13458
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp18338
Rp18339
(dp18340
g20
Nsg21
g14
(g28
g16
Ntp18341
Rp18342
(dp18343
g32
g14
(g148
g16
Ntp18344
Rp18345
(dp18346
g12
(lp18347
g13478
ag14
(g28
g16
Ntp18348
Rp18349
(dp18350
g32
g14
(g148
g16
Ntp18351
Rp18352
(dp18353
g12
(lp18354
g14
(g28
g16
Ntp18355
Rp18356
(dp18357
g32
g14
(g148
g16
Ntp18358
Rp18359
(dp18360
g12
(lp18361
g12860
asg34
(itheano.gof.utils
scratchpad
p18362
(dp18363
g37
(lp18364
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18365
tp18366
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18367
tp18368
a(g205
I533
g206
S'inplace=False)(input))'
p18369
tp18370
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18371
tp18372
asbsg211
(lp18373
g18356
asg213
g14
(g214
g16
Ntp18374
Rp18375
(dp18376
g218
(lp18377
sg220
(lp18378
sg222
(lp18379
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp18380
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18381
(dp18382
bsg55
g14
(g56
g16
Ntp18383
Rp18384
(dp18385
g60
(I01
I01
tp18386
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp18387
Rp18388
(dp18389
g32
g14
(g148
g16
Ntp18390
Rp18391
(dp18392
g12
(lp18393
g15362
asg34
(itheano.gof.utils
scratchpad
p18394
(dp18395
g37
(lp18396
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p18397
tp18398
a(g893
I1880
g894
S'gradients.append(x[-1])'
p18399
tp18400
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p18401
tp18402
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18403
tp18404
asbsg211
(lp18405
g18388
asg213
g14
(g308
g16
Ntp18406
Rp18407
(dp18408
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p18409
tp18410
Rp18411
tp18412
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18413
(dp18414
bsg55
g14
(g56
g16
Ntp18415
Rp18416
(dp18417
g60
(I00
I00
tp18418
sg62
g15379
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18419
(dp18420
g37
(lp18421
(g105
I76
g106
S'self.initTraining()'
p18422
tp18423
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p18424
tp18425
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18426
tp18427
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18428
tp18429
asbsg211
(lp18430
g18349
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18431
(dp18432
g37
(lp18433
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p18434
tp18435
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18436
tp18437
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18438
tp18439
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18440
tp18441
asbsg55
g14
(g56
g16
Ntp18442
Rp18443
(dp18444
g60
(I00
I00
tp18445
sg62
S'float64'
p18446
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18447
(dp18448
g37
(lp18449
(g105
I76
g106
S'self.initTraining()'
p18450
tp18451
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p18452
tp18453
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18454
tp18455
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18456
tp18457
asbsg211
(lp18458
g18342
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18459
(dp18460
g37
(lp18461
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p18462
tp18463
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p18464
tp18465
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p18466
tp18467
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p18468
tp18469
asbsg55
g14
(g56
g16
Ntp18470
Rp18471
(dp18472
g60
(I00
I00
tp18473
sg62
S'float64'
p18474
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g13481
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g13478
sg72
I01
sg73
Nsbasg211
g14
(g6072
g16
Ntp18475
Rp18476
(dp18477
g27
g14190
sg23
I00
sbsg1240
g1196
stp18478
Rp18479
(lp18480
g14
(g158
g16
Ntp18481
Rp18482
(dp18483
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18484
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12811
sg73
Nsbag14
(g158
g16
Ntp18485
Rp18486
(dp18487
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18488
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12832
sg73
Nsbag14
(g158
g16
Ntp18489
Rp18490
(dp18491
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18492
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12853
sg73
Nsbag14
(g158
g16
Ntp18493
Rp18494
(dp18495
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18496
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12874
sg73
Nsbag14
(g158
g16
Ntp18497
Rp18498
(dp18499
g6082
I0
sg20
Nsg6083
I00
sg162
g12892
sg25
I01
sg24
I00
sg173
I00
sg55
g12900
sg73
Nsbag14
(g158
g16
Ntp18500
Rp18501
(dp18502
g6082
I0
sg20
Nsg6083
I00
sg162
g13463
sg25
I01
sg24
I00
sg173
I00
sg55
g13471
sg73
Nsbag14
(g158
g16
Ntp18503
Rp18504
(dp18505
g6082
I0
sg20
Nsg6083
I00
sg162
g13483
sg25
I01
sg24
I00
sg173
I00
sg55
g13491
sg73
Nsba(lp18506
NaNaNaNag12895
ag13466
ag13486
atp18507
Rp18508
sg6109
I2
sg6110
g12818
sg6111
g13478
sg6112
g5
(g6
((dp18509
g8
Nsg9
g10
sg11
I00
sg12
(lp18510
g14
(g15
g16
Ntp18511
Rp18512
(dp18513
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g12818
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp18514
Rp18515
(dp18516
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g12797
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp18517
Rp18518
(dp18519
g20
Nsg21
Nsg22
g12890
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g12887
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp18520
Rp18521
(dp18522
g20
Nsg21
Nsg22
g13461
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g13458
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp18523
Rp18524
(dp18525
g20
Nsg21
Nsg22
g13481
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g13478
sg72
I01
sg73
Nsbasg211
(lp18526
g14
(g6072
g16
Ntp18527
Rp18528
(dp18529
g27
g14
(g28
g16
Ntp18530
Rp18531
(dp18532
g32
g14
(g148
g16
Ntp18533
Rp18534
(dp18535
g12
(lp18536
g14
(g28
g16
Ntp18537
Rp18538
(dp18539
g32
g14
(g148
g16
Ntp18540
Rp18541
(dp18542
g12
(lp18543
g14
(g28
g16
Ntp18544
Rp18545
(dp18546
g32
g14
(g148
g16
Ntp18547
Rp18548
(dp18549
g12
(lp18550
g14
(g28
g16
Ntp18551
Rp18552
(dp18553
g32
g14
(g148
g16
Ntp18554
Rp18555
(dp18556
g12
(lp18557
g14
(g28
g16
Ntp18558
Rp18559
(dp18560
g32
g14
(g148
g16
Ntp18561
Rp18562
(dp18563
g12
(lp18564
g12818
asg34
(itheano.gof.utils
scratchpad
p18565
(dp18566
g37
g13003
sbsg211
(lp18567
g18559
asg213
g13014
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18568
(dp18569
bsg55
g13025
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18570
(dp18571
g37
g13030
sbsg211
(lp18572
g18552
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18573
(dp18574
g37
g13042
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18575
(dp18576
g37
g13053
sbsg211
(lp18577
g18545
asg213
g13064
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18578
(dp18579
bsg55
g13073
sg20
Nsbag14
(g28
g16
Ntp18580
Rp18581
(dp18582
g32
g14
(g148
g16
Ntp18583
Rp18584
(dp18585
g12
(lp18586
g18559
ag14
(g401
g16
Ntp18587
Rp18588
(dp18589
g32
g14
(g148
g16
Ntp18590
Rp18591
(dp18592
g12
(lp18593
g18545
asg34
(itheano.gof.utils
scratchpad
p18594
(dp18595
g37
g13091
sbsg211
(lp18596
g18588
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18597
(dp18598
bsg55
g13104
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18599
(dp18600
g37
g13108
sbsg211
(lp18601
g18581
asg213
g13119
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18602
(dp18603
bsg55
g13130
sg20
Nsbag14
(g28
g16
Ntp18604
Rp18605
(dp18606
g32
g14
(g148
g16
Ntp18607
Rp18608
(dp18609
g12
(lp18610
g14
(g28
g16
Ntp18611
Rp18612
(dp18613
g32
g14
(g148
g16
Ntp18614
Rp18615
(dp18616
g12
(lp18617
g477
ag14
(g28
g16
Ntp18618
Rp18619
(dp18620
g32
g14
(g148
g16
Ntp18621
Rp18622
(dp18623
g12
(lp18624
g18545
ag14
(g28
g16
Ntp18625
Rp18626
(dp18627
g32
g14
(g148
g16
Ntp18628
Rp18629
(dp18630
g12
(lp18631
g14
(g28
g16
Ntp18632
Rp18633
(dp18634
g32
g14
(g148
g16
Ntp18635
Rp18636
(dp18637
g12
(lp18638
g14
(g28
g16
Ntp18639
Rp18640
(dp18641
g32
g14
(g148
g16
Ntp18642
Rp18643
(dp18644
g12
(lp18645
g14
(g28
g16
Ntp18646
Rp18647
(dp18648
g32
g14
(g148
g16
Ntp18649
Rp18650
(dp18651
g12
(lp18652
g12797
asg34
(itheano.gof.utils
scratchpad
p18653
(dp18654
g37
g13184
sbsg211
(lp18655
g18647
asg213
g13195
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18656
(dp18657
bsg55
g13204
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18658
(dp18659
g37
g13209
sbsg211
(lp18660
g18640
asg213
g13220
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18661
(dp18662
g37
g13225
sbsg55
g13235
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18663
(dp18664
g37
g13240
sbsg211
(lp18665
g18633
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18666
(dp18667
g37
g13252
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18668
(dp18669
g37
g13263
sbsg211
(lp18670
g18626
asg213
g13274
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18671
(dp18672
bsg55
g13283
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18673
(dp18674
g37
g13287
sbsg211
(lp18675
g18619
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18676
(dp18677
g37
g13299
sbsg55
g13309
sg20
Nsbag14
(g28
g16
Ntp18678
Rp18679
(dp18680
g32
g14
(g148
g16
Ntp18681
Rp18682
(dp18683
g12
(lp18684
g14
(g28
g16
Ntp18685
Rp18686
(dp18687
g32
g14
(g148
g16
Ntp18688
Rp18689
(dp18690
g12
(lp18691
g18640
asg34
(itheano.gof.utils
scratchpad
p18692
(dp18693
g37
g13328
sbsg211
(lp18694
g18686
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18695
(dp18696
g37
g13340
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18697
(dp18698
g37
g13351
sbsg211
(lp18699
g18679
asg213
g13362
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18700
(dp18701
bsg55
g13371
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18702
(dp18703
g37
g13375
sbsg211
(lp18704
g18612
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18705
(dp18706
g37
g13387
sbsg55
g13397
sg20
Nsbag18640
ag14
(g401
g16
Ntp18707
Rp18708
(dp18709
g32
g14
(g148
g16
Ntp18710
Rp18711
(dp18712
g12
(lp18713
g18626
asg34
(itheano.gof.utils
scratchpad
p18714
(dp18715
g37
g13409
sbsg211
(lp18716
g18708
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18717
(dp18718
bsg55
g13422
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18719
(dp18720
g37
g13426
sbsg211
(lp18721
g18605
asg213
g13437
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18722
(dp18723
g37
g13448
sbsg55
g13397
sg20
Nsbag18545
ag12887
ag13458
ag13478
asg34
(itheano.gof.utils
scratchpad
p18724
(dp18725
g37
g14052
sbsg211
(lp18726
g18538
ag14
(g28
g16
Ntp18727
Rp18728
(dp18729
g32
g18541
sg33
I1
sg34
(itheano.gof.utils
scratchpad
p18730
(dp18731
g37
g14078
sbsg55
g13838
sg20
Nsbasg213
g13529
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18732
(dp18733
g37
g14067
sbsg55
g13524
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18734
(dp18735
g37
(lp18736
(g298
I1044
g299
S'offsets)'
p18737
tp18738
a(g298
I1029
g6343
S'out_ls.append(out[offsets[idx]:])'
p18739
tp18740
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p18741
tp18742
a(g202
I401
g52
S'self.add_tag_trace(node)'
p18743
tp18744
asbsg211
(lp18745
g18531
asg213
g14
(g308
g16
Ntp18746
Rp18747
(dp18748
g312
(g313
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p18749
tp18750
Rp18751
NNtp18752
Rp18753
tp18754
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18755
(dp18756
bsg55
g14
(g56
g16
Ntp18757
Rp18758
(dp18759
g60
(I00
I00
tp18760
sg62
g13527
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg23
I00
sbag14
(g6072
g16
Ntp18761
Rp18762
(dp18763
g27
g18728
sg23
I00
sbasg1240
g1196
stp18764
Rp18765
(lp18766
g14
(g158
g16
Ntp18767
Rp18768
(dp18769
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18770
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12832
sg73
Nsbag14
(g158
g16
Ntp18771
Rp18772
(dp18773
g6082
I1
sg20
Nsg6083
I01
sg162
(lp18774
Nasg25
I00
sg24
I00
sg173
I00
sg55
g12811
sg73
Nsbag14
(g158
g16
Ntp18775
Rp18776
(dp18777
g6082
I0
sg20
Nsg6083
I00
sg162
g12892
sg25
I01
sg24
I00
sg173
I00
sg55
g12900
sg73
Nsbag14
(g158
g16
Ntp18778
Rp18779
(dp18780
g6082
I0
sg20
Nsg6083
I00
sg162
g13463
sg25
I01
sg24
I00
sg173
I00
sg55
g13471
sg73
Nsbag14
(g158
g16
Ntp18781
Rp18782
(dp18783
g6082
I0
sg20
Nsg6083
I00
sg162
g13483
sg25
I01
sg24
I00
sg173
I00
sg55
g13491
sg73
Nsba(lp18784
NaNag12895
ag13466
ag13486
atp18785
Rp18786
sg6392
g13458
sg6393
g12797
sg6394
g14
(g28
g16
Ntp18787
Rp18788
(dp18789
g32
g14
(g148
g16
Ntp18790
Rp18791
(dp18792
g12
(lp18793
g14
(g28
g16
Ntp18794
Rp18795
(dp18796
g32
g14
(g148
g16
Ntp18797
Rp18798
(dp18799
g12
(lp18800
g14
(g28
g16
Ntp18801
Rp18802
(dp18803
g32
g14
(g148
g16
Ntp18804
Rp18805
(dp18806
g12
(lp18807
g14
(g28
g16
Ntp18808
Rp18809
(dp18810
g32
g14
(g148
g16
Ntp18811
Rp18812
(dp18813
g12
(lp18814
g12818
asg34
(itheano.gof.utils
scratchpad
p18815
(dp18816
g37
g13003
sbsg211
(lp18817
g18809
asg213
g13014
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18818
(dp18819
bsg55
g13025
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18820
(dp18821
g37
g13030
sbsg211
(lp18822
g18802
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18823
(dp18824
g37
g13042
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18825
(dp18826
g37
g13053
sbsg211
(lp18827
g18795
asg213
g13064
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18828
(dp18829
bsg55
g13073
sg20
Nsbag14
(g28
g16
Ntp18830
Rp18831
(dp18832
g32
g14
(g148
g16
Ntp18833
Rp18834
(dp18835
g12
(lp18836
g18809
ag14
(g401
g16
Ntp18837
Rp18838
(dp18839
g32
g14
(g148
g16
Ntp18840
Rp18841
(dp18842
g12
(lp18843
g18795
asg34
(itheano.gof.utils
scratchpad
p18844
(dp18845
g37
g13091
sbsg211
(lp18846
g18838
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18847
(dp18848
bsg55
g13104
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18849
(dp18850
g37
g13108
sbsg211
(lp18851
g18831
asg213
g13119
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18852
(dp18853
bsg55
g13130
sg20
Nsbag14
(g28
g16
Ntp18854
Rp18855
(dp18856
g32
g14
(g148
g16
Ntp18857
Rp18858
(dp18859
g12
(lp18860
g14
(g28
g16
Ntp18861
Rp18862
(dp18863
g32
g14
(g148
g16
Ntp18864
Rp18865
(dp18866
g12
(lp18867
g477
ag14
(g28
g16
Ntp18868
Rp18869
(dp18870
g32
g14
(g148
g16
Ntp18871
Rp18872
(dp18873
g12
(lp18874
g18795
ag14
(g28
g16
Ntp18875
Rp18876
(dp18877
g32
g14
(g148
g16
Ntp18878
Rp18879
(dp18880
g12
(lp18881
g14
(g28
g16
Ntp18882
Rp18883
(dp18884
g32
g14
(g148
g16
Ntp18885
Rp18886
(dp18887
g12
(lp18888
g14
(g28
g16
Ntp18889
Rp18890
(dp18891
g32
g14
(g148
g16
Ntp18892
Rp18893
(dp18894
g12
(lp18895
g14
(g28
g16
Ntp18896
Rp18897
(dp18898
g32
g14
(g148
g16
Ntp18899
Rp18900
(dp18901
g12
(lp18902
g12797
asg34
(itheano.gof.utils
scratchpad
p18903
(dp18904
g37
g13184
sbsg211
(lp18905
g18897
asg213
g13195
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18906
(dp18907
bsg55
g13204
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18908
(dp18909
g37
g13209
sbsg211
(lp18910
g18890
asg213
g13220
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18911
(dp18912
g37
g13225
sbsg55
g13235
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18913
(dp18914
g37
g13240
sbsg211
(lp18915
g18883
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18916
(dp18917
g37
g13252
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18918
(dp18919
g37
g13263
sbsg211
(lp18920
g18876
asg213
g13274
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18921
(dp18922
bsg55
g13283
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18923
(dp18924
g37
g13287
sbsg211
(lp18925
g18869
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18926
(dp18927
g37
g13299
sbsg55
g13309
sg20
Nsbag14
(g28
g16
Ntp18928
Rp18929
(dp18930
g32
g14
(g148
g16
Ntp18931
Rp18932
(dp18933
g12
(lp18934
g14
(g28
g16
Ntp18935
Rp18936
(dp18937
g32
g14
(g148
g16
Ntp18938
Rp18939
(dp18940
g12
(lp18941
g18890
asg34
(itheano.gof.utils
scratchpad
p18942
(dp18943
g37
g13328
sbsg211
(lp18944
g18936
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18945
(dp18946
g37
g13340
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18947
(dp18948
g37
g13351
sbsg211
(lp18949
g18929
asg213
g13362
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18950
(dp18951
bsg55
g13371
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18952
(dp18953
g37
g13375
sbsg211
(lp18954
g18862
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18955
(dp18956
g37
g13387
sbsg55
g13397
sg20
Nsbag18890
ag14
(g401
g16
Ntp18957
Rp18958
(dp18959
g32
g14
(g148
g16
Ntp18960
Rp18961
(dp18962
g12
(lp18963
g18876
asg34
(itheano.gof.utils
scratchpad
p18964
(dp18965
g37
g13409
sbsg211
(lp18966
g18958
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18967
(dp18968
bsg55
g13422
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p18969
(dp18970
g37
g13426
sbsg211
(lp18971
g18855
asg213
g13437
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p18972
(dp18973
g37
g13448
sbsg55
g13397
sg20
Nsbag18795
ag12887
ag13458
ag13478
asg34
(itheano.gof.utils
scratchpad
p18974
(dp18975
g37
g14052
sbsg211
(lp18976
g14
(g28
g16
Ntp18977
Rp18978
(dp18979
g32
g18791
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p18980
(dp18981
g37
g14067
sbsg55
g13524
sg20
Nsbag18788
asg213
g13529
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p18982
(dp18983
g37
g14078
sbsg55
g13838
sg20
Nsbsg6592
I1
sg6593
g12887
sba(irnn
RNN
p18984
(dp18985
g3
I1
sg4
g5
(g6
((dp18986
g8
Nsg9
g10
sg11
I00
sg12
(lp18987
g14
(g15
g16
Ntp18988
Rp18989
(dp18990
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp18991
Rp18992
(dp18993
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p18994
(dp18995
g37
(lp18996
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p18997
tp18998
a(g43
I34
g44
S'h0 = self.__h0 = TT.vector()'
p18999
tp19000
a(g47
I744
g48
S'return type(name)'
p19001
tp19002
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19003
tp19004
asbsg55
g14
(g56
g16
Ntp19005
Rp19006
(dp19007
g60
(I00
tp19008
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp19009
Rp19010
(dp19011
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp19012
Rp19013
(dp19014
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19015
(dp19016
g37
(lp19017
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p19018
tp19019
a(g43
I32
g44
S'u = self.__u = TT.matrix()'
p19020
tp19021
a(g47
I771
g87
S'return type(name)'
p19022
tp19023
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19024
tp19025
asbsg55
g14
(g56
g16
Ntp19026
Rp19027
(dp19028
g60
(I00
I00
tp19029
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp19030
Rp19031
(dp19032
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp19033
Rp19034
(dp19035
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19036
(dp19037
g37
(lp19038
(g105
I76
g106
S'self.initTraining()'
p19039
tp19040
a(g109
I88
g110
S't = TT.matrix()'
p19041
tp19042
a(g47
I771
g87
S'return type(name)'
p19043
tp19044
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19045
tp19046
asbsg55
g14
(g56
g16
Ntp19047
Rp19048
(dp19049
g60
(I00
I00
tp19050
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp19051
Rp19052
(dp19053
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g14
(g28
g16
Ntp19054
Rp19055
(dp19056
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19057
(dp19058
g37
(lp19059
(g105
I76
g106
S'self.initTraining()'
p19060
tp19061
a(g109
I90
g110
S'lr = TT.scalar()'
p19062
tp19063
a(g47
I714
g134
S'return type(name)'
p19064
tp19065
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19066
tp19067
asbsg55
g14
(g56
g16
Ntp19068
Rp19069
(dp19070
g60
(tsg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg72
I00
sg73
Nsbag14
(g15
g16
Ntp19071
Rp19072
(dp19073
g20
Nsg21
g14
(g28
g16
Ntp19074
Rp19075
(dp19076
g32
g14
(g148
g16
Ntp19077
Rp19078
(dp19079
g12
(lp19080
g14
(g153
g16
Ntp19081
Rp19082
(dp19083
g33
Nsg157
g14
(g158
g16
Ntp19084
Rp19085
(dp19086
g20
Nsg162
(lp19087
g164
(g165
(I0
tp19088
g167
tp19089
Rp19090
(I1
(I1
I2
tp19091
g68
I00
S'9\xb7\x10\xc0\xe7\x1a\x0f\xc0T\xb6APw\x1f"@'
p19092
tp19093
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp19094
Rp19095
(dp19096
g60
(I00
I00
tp19097
sg62
S'float64'
p19098
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p19099
(dp19100
bsg32
Nsg55
g19095
sbag14
(g28
g16
Ntp19101
Rp19102
(dp19103
g32
g14
(g148
g16
Ntp19104
Rp19105
(dp19106
g12
(lp19107
g14
(g28
g16
Ntp19108
Rp19109
(dp19110
g32
g14
(g148
g16
Ntp19111
Rp19112
(dp19113
g12
(lp19114
g19055
asg34
(itheano.gof.utils
scratchpad
p19115
(dp19116
g37
(lp19117
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p19118
tp19119
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19120
tp19121
a(g205
I533
g206
S'inplace=False)(input))'
p19122
tp19123
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19124
tp19125
asbsg211
(lp19126
g19109
asg213
g14
(g214
g16
Ntp19127
Rp19128
(dp19129
g218
(lp19130
sg220
(lp19131
sg222
(lp19132
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp19133
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19134
(dp19135
bsg55
g14
(g56
g16
Ntp19136
Rp19137
(dp19138
g60
(I01
I01
tp19139
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19140
Rp19141
(dp19142
g32
g14
(g148
g16
Ntp19143
Rp19144
(dp19145
g12
(lp19146
g14
(g28
g16
Ntp19147
Rp19148
(dp19149
g32
g14
(g148
g16
Ntp19150
Rp19151
(dp19152
g12
(lp19153
g14
(g28
g16
Ntp19154
Rp19155
(dp19156
g32
g14
(g148
g16
Ntp19157
Rp19158
(dp19159
g12
(lp19160
g14
(g28
g16
Ntp19161
Rp19162
(dp19163
g32
g14
(g148
g16
Ntp19164
Rp19165
(dp19166
g12
(lp19167
g14
(g28
g16
Ntp19168
Rp19169
(dp19170
g32
g14
(g148
g16
Ntp19171
Rp19172
(dp19173
g12
(lp19174
g14
(g28
g16
Ntp19175
Rp19176
(dp19177
g32
g14
(g148
g16
Ntp19178
Rp19179
(dp19180
g12
(lp19181
g14
(g28
g16
Ntp19182
Rp19183
(dp19184
g32
g14
(g148
g16
Ntp19185
Rp19186
(dp19187
g12
(lp19188
g14
(g28
g16
Ntp19189
Rp19190
(dp19191
g32
g14
(g148
g16
Ntp19192
Rp19193
(dp19194
g12
(lp19195
g19013
asg34
(itheano.gof.utils
scratchpad
p19196
(dp19197
g37
(lp19198
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19199
tp19200
a(g298
I505
g299
S"nw_seq = seq['input'][offset + k - mintap:]"
p19201
tp19202
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p19203
tp19204
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19205
tp19206
asbsg211
(lp19207
g19190
asg213
g14
(g308
g16
Ntp19208
Rp19209
(dp19210
g312
(g313
(g314
(g317
S'\x00\x00\x00\x00'
p19211
tp19212
Rp19213
NNtp19214
Rp19215
tp19216
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19217
(dp19218
bsg55
g14
(g56
g16
Ntp19219
Rp19220
(dp19221
g60
(I00
I00
tp19222
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19223
(dp19224
g37
(lp19225
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19226
tp19227
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p19228
tp19229
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19230
tp19231
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19232
tp19233
asbsg211
(lp19234
g19183
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19235
(dp19236
g37
(lp19237
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19238
tp19239
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19240
tp19241
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p19242
tp19243
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19244
tp19245
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19246
(dp19247
g37
(lp19248
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19249
tp19250
a(g298
I518
g299
S'lengths_vec.append(seq.shape[0])'
p19251
tp19252
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p19253
tp19254
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19255
tp19256
asbsg211
(lp19257
g19176
asg213
g14
(g308
g16
Ntp19258
Rp19259
(dp19260
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19261
tp19262
Rp19263
tp19264
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19265
(dp19266
bsg55
g14
(g56
g16
Ntp19267
Rp19268
(dp19269
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19270
Rp19271
(dp19272
g32
g14
(g148
g16
Ntp19273
Rp19274
(dp19275
g12
(lp19276
g19190
ag14
(g401
g16
Ntp19277
Rp19278
(dp19279
g32
g14
(g148
g16
Ntp19280
Rp19281
(dp19282
g12
(lp19283
g19176
asg34
(itheano.gof.utils
scratchpad
p19284
(dp19285
g37
(lp19286
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p19287
tp19288
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p19289
tp19290
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p19291
tp19292
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19293
tp19294
asbsg211
(lp19295
g19278
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19296
(dp19297
bsg55
g14
(g430
g16
Ntp19298
Rp19299
(dp19300
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19301
(dp19302
g37
(lp19303
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19304
tp19305
a(g298
I546
g299
S'scan_seqs = [seq[:actual_n_steps] for seq in scan_seqs]'
p19306
tp19307
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p19308
tp19309
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19310
tp19311
asbsg211
(lp19312
g19271
asg213
g14
(g308
g16
Ntp19313
Rp19314
(dp19315
g312
(g313
(Ng14
(g430
g16
Ntp19316
Rp19317
(dp19318
g62
g364
sbNtp19319
Rp19320
tp19321
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19322
(dp19323
bsg55
g14
(g56
g16
Ntp19324
Rp19325
(dp19326
g60
(I00
I00
tp19327
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19328
Rp19329
(dp19330
g32
g14
(g148
g16
Ntp19331
Rp19332
(dp19333
g12
(lp19334
g14
(g28
g16
Ntp19335
Rp19336
(dp19337
g32
g14
(g148
g16
Ntp19338
Rp19339
(dp19340
g12
(lp19341
g477
ag14
(g28
g16
Ntp19342
Rp19343
(dp19344
g32
g14
(g148
g16
Ntp19345
Rp19346
(dp19347
g12
(lp19348
g19176
ag14
(g28
g16
Ntp19349
Rp19350
(dp19351
g32
g14
(g148
g16
Ntp19352
Rp19353
(dp19354
g12
(lp19355
g14
(g28
g16
Ntp19356
Rp19357
(dp19358
g32
g14
(g148
g16
Ntp19359
Rp19360
(dp19361
g12
(lp19362
g14
(g28
g16
Ntp19363
Rp19364
(dp19365
g32
g14
(g148
g16
Ntp19366
Rp19367
(dp19368
g12
(lp19369
g14
(g28
g16
Ntp19370
Rp19371
(dp19372
g32
g14
(g148
g16
Ntp19373
Rp19374
(dp19375
g12
(lp19376
g18992
asg34
(itheano.gof.utils
scratchpad
p19377
(dp19378
g37
(lp19379
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19380
tp19381
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p19382
tp19383
a(g47
I3636
g535
S'return DimShuffle(_t.broadcastable, pattern)(_t)'
p19384
tp19385
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19386
tp19387
asbsg211
(lp19388
g19371
asg213
g14
(g214
g16
Ntp19389
Rp19390
(dp19391
g218
(lp19392
sg220
(lp19393
I0
asg222
(lp19394
I0
asg224
g19008
sg225
I00
sg226
(g227
I0
tp19395
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19396
(dp19397
bsg55
g14
(g56
g16
Ntp19398
Rp19399
(dp19400
g60
(I01
I00
tp19401
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19402
(dp19403
g37
(lp19404
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19405
tp19406
a(g298
I619
g299
S'tensor.shape_padleft(actual_arg), 0),'
p19407
tp19408
a(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p19409
tp19410
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19411
tp19412
asbsg211
(lp19413
g19364
asg213
g14
(g567
g16
Ntp19414
Rp19415
(dp19416
g229
g230
sg571
(dp19417
I0
I00
ssbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19418
(dp19419
g37
(lp19420
(g47
I3339
g561
S'rval = Rebroadcast(*[(axis, False) for axis in axes])(x)'
p19421
tp19422
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19423
tp19424
a(g47
I3284
g206
S'return Apply(self, [x], [t()])'
p19425
tp19426
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19427
tp19428
asbsg55
g14
(g56
g16
Ntp19429
Rp19430
(dp19431
g60
(I00
I00
tp19432
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19433
(dp19434
g37
(lp19435
(g298
I620
g299
S'actual_n_steps'
p19436
tp19437
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p19438
tp19439
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19440
tp19441
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19442
tp19443
asbsg211
(lp19444
g19357
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19445
(dp19446
g37
(lp19447
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19448
tp19449
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19450
tp19451
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p19452
tp19453
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19454
tp19455
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19456
(dp19457
g37
(lp19458
(g298
I620
g299
S'actual_n_steps'
p19459
tp19460
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p19461
tp19462
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p19463
tp19464
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19465
tp19466
asbsg211
(lp19467
g19350
asg213
g14
(g308
g16
Ntp19468
Rp19469
(dp19470
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p19471
tp19472
Rp19473
tp19474
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19475
(dp19476
bsg55
g14
(g56
g16
Ntp19477
Rp19478
(dp19479
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19480
(dp19481
g37
(lp19482
(g298
I620
g299
S'actual_n_steps'
p19483
tp19484
a(g593
I364
g594
S'zeros_shape = [size + shapes[0]] + shapes[1:]'
p19485
tp19486
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p19487
tp19488
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19489
tp19490
asbsg211
(lp19491
g19343
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19492
(dp19493
g37
(lp19494
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p19495
tp19496
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19497
tp19498
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p19499
tp19500
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19501
tp19502
asbsg55
g14
(g56
g16
Ntp19503
Rp19504
(dp19505
g60
(tsg62
S'int64'
p19506
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19507
Rp19508
(dp19509
g32
g14
(g148
g16
Ntp19510
Rp19511
(dp19512
g12
(lp19513
g14
(g28
g16
Ntp19514
Rp19515
(dp19516
g32
g14
(g148
g16
Ntp19517
Rp19518
(dp19519
g12
(lp19520
g19364
asg34
(itheano.gof.utils
scratchpad
p19521
(dp19522
g37
(lp19523
(g298
I620
g299
S'actual_n_steps'
p19524
tp19525
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p19526
tp19527
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19528
tp19529
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19530
tp19531
asbsg211
(lp19532
g19515
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19533
(dp19534
g37
(lp19535
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p19536
tp19537
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19538
tp19539
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p19540
tp19541
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19542
tp19543
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19544
(dp19545
g37
(lp19546
(g298
I620
g299
S'actual_n_steps'
p19547
tp19548
a(g593
I363
g594
S'shapes = [tensor_var.shape[x] for x in xrange(tensor_var.ndim)]'
p19549
tp19550
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p19551
tp19552
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19553
tp19554
asbsg211
(lp19555
g19508
asg213
g14
(g308
g16
Ntp19556
Rp19557
(dp19558
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p19559
tp19560
Rp19561
tp19562
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19563
(dp19564
bsg55
g14
(g56
g16
Ntp19565
Rp19566
(dp19567
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19568
(dp19569
g37
(lp19570
(g593
I366
g594
S'dtype=tensor_var.dtype)'
p19571
tp19572
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p19573
tp19574
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p19575
tp19576
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19577
tp19578
asbsg211
(lp19579
g19336
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19580
(dp19581
g37
(lp19582
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p19583
tp19584
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19585
tp19586
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p19587
tp19588
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19589
tp19590
asbsg55
g14
(g56
g16
Ntp19591
Rp19592
(dp19593
g60
(I00
I00
tp19594
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag19364
ag14
(g401
g16
Ntp19595
Rp19596
(dp19597
g32
g14
(g148
g16
Ntp19598
Rp19599
(dp19600
g12
(lp19601
g19350
asg34
(itheano.gof.utils
scratchpad
p19602
(dp19603
g37
(lp19604
(g412
I384
g206
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p19605
tp19606
a(g412
I384
g415
S'inputs = tuple(self.my_as_scalar(a) for a in inputs)'
p19607
tp19608
a(g412
I374
g418
S'return theano.tensor.scalar_from_tensor(a)'
p19609
tp19610
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19611
tp19612
asbsg211
(lp19613
g19596
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19614
(dp19615
bsg55
g14
(g430
g16
Ntp19616
Rp19617
(dp19618
g62
g364
sbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19619
(dp19620
g37
(lp19621
(g593
I367
g594
S'return tensor.set_subtensor(empty[:shapes[0]], tensor_var)'
p19622
tp19623
a(g412
I904
g810
S'tolerate_inplace_aliasing=tolerate_inplace_aliasing)'
p19624
tp19625
a(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p19626
tp19627
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19628
tp19629
asbsg211
(lp19630
g19329
asg213
g14
(g819
g16
Ntp19631
Rp19632
(dp19633
g312
(lp19634
g313
(Ng14
(g430
g16
Ntp19635
Rp19636
(dp19637
g62
g364
sbNtp19638
Rp19639
asg829
(lp19640
sg229
g230
sg831
I01
sg225
I00
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19641
(dp19642
g37
(lp19643
(g412
I957
g813
S'return the_op(real_x, y, *real_idxargs)'
p19644
tp19645
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19646
tp19647
a(g412
I1109
g206
S'[x.type()])'
p19648
tp19649
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19650
tp19651
asbsg55
g19592
sg20
Nsbag19176
ag19082
ag14
(g153
g16
Ntp19652
Rp19653
(dp19654
g33
Nsg157
g14
(g158
g16
Ntp19655
Rp19656
(dp19657
g20
Nsg162
(lp19658
g164
(g165
(I0
tp19659
g167
tp19660
Rp19661
(I1
(I2
I2
tp19662
g68
I00
S'\xb3\xe4V\xd9\x0fU@\xc0\xfb\x8c\x92\xdf\x89&=\xc0\xb1\xcc\x1a)\xe1\xed3\xc0\xd1`\xee\x7f8\xd65\xc0'
p19663
tp19664
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp19665
Rp19666
(dp19667
g60
(I00
I00
tp19668
sg62
S'float64'
p19669
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p19670
(dp19671
bsg32
Nsg55
g19666
sbag14
(g153
g16
Ntp19672
Rp19673
(dp19674
g33
Nsg157
g14
(g158
g16
Ntp19675
Rp19676
(dp19677
g20
Nsg162
(lp19678
g164
(g165
(I0
tp19679
g167
tp19680
Rp19681
(I1
(I2
I1
tp19682
g68
I00
S'{S\x01\x05\xf1$\x8f@\xf2\xb7\xe9!x)\x8f@'
p19683
tp19684
basg24
I00
sg173
I00
sg55
g14
(g56
g16
Ntp19685
Rp19686
(dp19687
g60
(I00
I00
tp19688
sg62
S'float64'
p19689
sg64
g68
sg71
I00
sg20
Nsbsg73
Nsbsg20
Nsg34
(itheano.gof.utils
scratchpad
p19690
(dp19691
bsg32
Nsg55
g19686
sbasg34
(itheano.gof.utils
scratchpad
p19692
(dp19693
g37
(lp19694
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p19695
tp19696
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p19697
tp19698
a(g893
I1400
g894
S'outs = self(*inputs)'
p19699
tp19700
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19701
tp19702
asbsg211
(lp19703
g14
(g28
g16
Ntp19704
Rp19705
(dp19706
g32
g19172
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p19707
(dp19708
g37
(lp19709
(g893
I1400
g894
S'outs = self(*inputs)'
p19710
tp19711
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19712
tp19713
a(g893
I440
g206
S'[t() for t in self.output_types])'
p19714
tp19715
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19716
tp19717
asbsg55
g14
(g56
g16
Ntp19718
Rp19719
(dp19720
g60
(I00
I00
tp19721
sg62
S'float64'
p19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag19169
asg213
g14
(g919
g16
Ntp19723
Rp19724
(dp19725
g8
I00
sg12
(lp19726
g14
(g28
g16
Ntp19727
Rp19728
(dp19729
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19730
(dp19731
g37
(lp19732
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p19733
tp19734
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19735
tp19736
a(g298
I465
g299
S'nw_slice = _seq_val_slice.type()'
p19737
tp19738
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19739
tp19740
asbsg55
g14
(g56
g16
Ntp19741
Rp19742
(dp19743
g60
(I00
tp19744
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19745
Rp19746
(dp19747
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19748
(dp19749
g37
(lp19750
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19751
tp19752
a(g298
I592
g299
S"arg = safe_new(init_out['initial'])"
p19753
tp19754
a(g593
I75
g952
S'nw_x = x.type()'
p19755
tp19756
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19757
tp19758
asbsg55
g19006
sg20
Nsbag14
(g28
g16
Ntp19759
Rp19760
(dp19761
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19762
(dp19763
g37
(lp19764
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19765
tp19766
a(g298
I913
g299
S'not arg.update)]'
p19767
tp19768
a(g593
I75
g952
S'nw_x = x.type()'
p19769
tp19770
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19771
tp19772
asbsg55
g19095
sg20
Nsbag14
(g28
g16
Ntp19773
Rp19774
(dp19775
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19776
(dp19777
g37
(lp19778
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19779
tp19780
a(g298
I913
g299
S'not arg.update)]'
p19781
tp19782
a(g593
I75
g952
S'nw_x = x.type()'
p19783
tp19784
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19785
tp19786
asbsg55
g19666
sg20
Nsbag14
(g28
g16
Ntp19787
Rp19788
(dp19789
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p19790
(dp19791
g37
(lp19792
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19793
tp19794
a(g298
I913
g299
S'not arg.update)]'
p19795
tp19796
a(g593
I75
g952
S'nw_x = x.type()'
p19797
tp19798
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19799
tp19800
asbsg55
g19686
sg20
Nsbasg999
(lp19801
(lp19802
I-1
aasg1002
I0
sg1003
I-1001547823
sg211
(lp19803
g14
(g28
g16
Ntp19804
Rp19805
(dp19806
g32
g14
(g148
g16
Ntp19807
Rp19808
(dp19809
g12
(lp19810
g14
(g28
g16
Ntp19811
Rp19812
(dp19813
g32
g14
(g148
g16
Ntp19814
Rp19815
(dp19816
g12
(lp19817
g14
(g28
g16
Ntp19818
Rp19819
(dp19820
g32
g14
(g148
g16
Ntp19821
Rp19822
(dp19823
g12
(lp19824
g19728
ag19760
asg34
(itheano.gof.utils
scratchpad
p19825
(dp19826
g37
(lp19827
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p19828
tp19829
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p19830
tp19831
a(g47
I4732
g1035
S'return _dot(a, b)'
p19832
tp19833
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19834
tp19835
asbsg211
(lp19836
g19819
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19837
(dp19838
bsg55
g14
(g56
g16
Ntp19839
Rp19840
(dp19841
g60
(I00
tp19842
sg62
S'float64'
p19843
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19844
Rp19845
(dp19846
g32
g14
(g148
g16
Ntp19847
Rp19848
(dp19849
g12
(lp19850
g19746
ag19774
asg34
(itheano.gof.utils
scratchpad
p19851
(dp19852
g37
(lp19853
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p19854
tp19855
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p19856
tp19857
a(g47
I4732
g1035
S'return _dot(a, b)'
p19858
tp19859
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19860
tp19861
asbsg211
(lp19862
g19845
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19863
(dp19864
bsg55
g14
(g56
g16
Ntp19865
Rp19866
(dp19867
g60
(I00
tp19868
sg62
S'float64'
p19869
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19870
(dp19871
g37
(lp19872
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p19873
tp19874
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p19875
tp19876
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p19877
tp19878
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19879
tp19880
asbsg211
(lp19881
g19812
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19882
(dp19883
g37
(lp19884
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p19885
tp19886
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19887
tp19888
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p19889
tp19890
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19891
tp19892
asbsg55
g14
(g56
g16
Ntp19893
Rp19894
(dp19895
g60
(I00
tp19896
sg62
S'float64'
p19897
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p19898
(dp19899
g37
(lp19900
(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p19901
tp19902
a(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p19903
tp19904
a(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p19905
tp19906
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19907
tp19908
asbsg211
(lp19909
g19805
asg213
g1119
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19910
(dp19911
g37
(lp19912
(g1031
I27
g1032
S'h_t = TT.tanh(TT.dot(u_t, W_in) + TT.dot(h_tm1, W))'
p19913
tp19914
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p19915
tp19916
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p19917
tp19918
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p19919
tp19920
asbsg55
g14
(g56
g16
Ntp19921
Rp19922
(dp19923
g60
(I00
tp19924
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp19925
Rp19926
(dp19927
g32
g14
(g148
g16
Ntp19928
Rp19929
(dp19930
g12
(lp19931
g19805
ag19788
asg34
(itheano.gof.utils
scratchpad
p19932
(dp19933
g37
(lp19934
(g298
I732
g299
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
p19935
tp19936
a(g1031
I28
g1032
S'y_t = TT.dot(h_t, W_out)'
p19937
tp19938
a(g47
I4732
g1035
S'return _dot(a, b)'
p19939
tp19940
a(g202
I401
g52
S'self.add_tag_trace(node)'
p19941
tp19942
asbsg211
(lp19943
g19926
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p19944
(dp19945
bsg55
g14
(g56
g16
Ntp19946
Rp19947
(dp19948
g60
(I00
tp19949
sg62
S'float64'
p19950
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I2
sg1174
(lp19951
I00
asg665
g1176
((lp19952
tp19953
Rp19954
sg1180
I1
sg1181
I1
sg1182
(lp19955
g314
(g317
S'\xff\xff\xff\xff'
p19956
tp19957
Rp19958
aI0
asg1187
I1
sg1188
I3
sg1189
I00
sg1190
I-1
sg1191
I1
sg20
g1192
sg1193
g1196
sg1221
g1176
((lp19959
(lp19960
g999
ag19801
aa(lp19961
g1191
aI1
aa(lp19962
g1002
aI0
aa(lp19963
g1227
aI0
aa(lp19964
g1229
a(lp19965
aa(lp19966
g1232
aI0
aa(lp19967
g1187
aI1
aa(lp19968
g1235
aI0
aa(lp19969
g1180
aI1
aa(lp19970
g1190
aI-1
aa(lp19971
g20
ag1192
aa(lp19972
g1240
aNaa(lp19973
g665
ag19954
aa(lp19974
g1243
aI00
aa(lp19975
g1189
aI00
aa(lp19976
g8
aI00
aatp19977
Rp19978
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p19979
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p19980
(g1043
((g19006
((I-1
I1
tp19981
I00
tp19982
tp19983
(g19666
((I-1
I3
tp19984
I00
tp19985
tp19986
tp19987
(I1
(I00
tp19988
tp19989
tp19990
(g1043
((g19742
((I-1
I0
tp19991
I00
tp19992
tp19993
(g19095
((I-1
I2
tp19994
I00
tp19995
tp19996
tp19997
(I1
(I00
tp19998
tp19999
tp20000
(g652
((g19840
((I1
I0
tp20001
I00
tp20002
tp20003
(g19866
((I0
I0
tp20004
I00
tp20005
tp20006
tp20007
(I1
(I00
tp20008
tp20009
tp20010
(g1119
((g19894
((I2
I0
tp20011
I00
tp20012
tp20013
tp20014
(I1
(I00
tp20015
tp20016
tp20017
(g1043
((g19922
((I3
I0
I0
tp20018
I00
tp20019
tp20020
(g19686
((I-1
I4
tp20021
I00
tp20022
tp20023
tp20024
(I1
(I00
tp20025
tp20026
tp20027
tp20028
tp20029
sg1232
I0
sg1301
(lp20030
I00
aI00
asg1303
I0
sg1235
I0
sg1240
Nsg1304
(lp20031
g19719
ag14
(g56
g16
Ntp20032
Rp20033
(dp20034
g60
(I00
I00
tp20035
sg62
g19950
sg64
g68
sg71
I00
sg20
Nsbasg1243
I00
sg1227
I0
sg1310
I3
sg1229
g19965
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p20036
(dp20037
g37
(lp20038
(g893
I1400
g894
S'outs = self(*inputs)'
p20039
tp20040
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20041
tp20042
a(g893
I440
g206
S'[t() for t in self.output_types])'
p20043
tp20044
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20045
tp20046
asbsg55
g20033
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20047
(dp20048
g37
(lp20049
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20050
tp20051
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p20052
tp20053
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p20054
tp20055
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20056
tp20057
asbsg211
(lp20058
g19162
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20059
(dp20060
g37
(lp20061
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p20062
tp20063
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20064
tp20065
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p20066
tp20067
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20068
tp20069
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20070
(dp20071
g37
(lp20072
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20073
tp20074
a(g893
I1410
g894
S'grad_steps = self.outer_nitsot_outs(outs)[0].shape[0]'
p20075
tp20076
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20077
tp20078
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20079
tp20080
asbsg211
(lp20081
g19155
asg213
g14
(g308
g16
Ntp20082
Rp20083
(dp20084
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p20085
tp20086
Rp20087
tp20088
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20089
(dp20090
bsg55
g14
(g56
g16
Ntp20091
Rp20092
(dp20093
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20094
Rp20095
(dp20096
g32
g14
(g148
g16
Ntp20097
Rp20098
(dp20099
g12
(lp20100
g19271
asg34
(itheano.gof.utils
scratchpad
p20101
(dp20102
g37
(lp20103
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20104
tp20105
a(g893
I1563
g894
S'outer_inp_seqs = [x[::-1] for x in inputs[1:1 + self.n_seqs]]'
p20106
tp20107
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20108
tp20109
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20110
tp20111
asbsg211
(lp20112
g20095
asg213
g14
(g308
g16
Ntp20113
Rp20114
(dp20115
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20116
tp20117
Rp20118
tp20119
Rp20120
tp20121
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20122
(dp20123
bsg55
g14
(g56
g16
Ntp20124
Rp20125
(dp20126
g60
(I00
I00
tp20127
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20128
Rp20129
(dp20130
g32
g14
(g148
g16
Ntp20131
Rp20132
(dp20133
g12
(lp20134
g14
(g28
g16
Ntp20135
Rp20136
(dp20137
g32
g14
(g148
g16
Ntp20138
Rp20139
(dp20140
g12
(lp20141
g19705
asg34
(itheano.gof.utils
scratchpad
p20142
(dp20143
g37
(lp20144
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20145
tp20146
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p20147
tp20148
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20149
tp20150
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20151
tp20152
asbsg211
(lp20153
g20136
asg213
g14
(g308
g16
Ntp20154
Rp20155
(dp20156
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20157
tp20158
Rp20159
Ntp20160
Rp20161
tp20162
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20163
(dp20164
bsg55
g14
(g56
g16
Ntp20165
Rp20166
(dp20167
g60
(I00
I00
tp20168
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20169
(dp20170
g37
(lp20171
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20172
tp20173
a(g893
I1579
g894
S'x[:-1][::-1] for x in self.outer_sitsot_outs(outs)]'
p20174
tp20175
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20176
tp20177
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20178
tp20179
asbsg211
(lp20180
g20129
asg213
g14
(g308
g16
Ntp20181
Rp20182
(dp20183
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20184
tp20185
Rp20186
tp20187
Rp20188
tp20189
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20190
(dp20191
bsg55
g14
(g56
g16
Ntp20192
Rp20193
(dp20194
g60
(I00
I00
tp20195
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20196
Rp20197
(dp20198
g32
g14
(g148
g16
Ntp20199
Rp20200
(dp20201
g12
(lp20202
g14
(g28
g16
Ntp20203
Rp20204
(dp20205
g32
g14
(g148
g16
Ntp20206
Rp20207
(dp20208
g12
(lp20209
g14
(g28
g16
Ntp20210
Rp20211
(dp20212
g32
g14
(g148
g16
Ntp20213
Rp20214
(dp20215
g12
(lp20216
g14
(g28
g16
Ntp20217
Rp20218
(dp20219
g32
g14
(g148
g16
Ntp20220
Rp20221
(dp20222
g12
(lp20223
g14
(g28
g16
Ntp20224
Rp20225
(dp20226
g32
g14
(g148
g16
Ntp20227
Rp20228
(dp20229
g12
(lp20230
g14
(g28
g16
Ntp20231
Rp20232
(dp20233
g32
g14
(g148
g16
Ntp20234
Rp20235
(dp20236
g12
(lp20237
g14
(g28
g16
Ntp20238
Rp20239
(dp20240
g32
g14
(g148
g16
Ntp20241
Rp20242
(dp20243
g12
(lp20244
g19176
ag19271
ag19329
ag19176
ag19082
ag19653
ag19673
asg34
(itheano.gof.utils
scratchpad
p20245
(dp20246
g37
(lp20247
(g39
I112
g40
S'generate = lambda: RNN(2, 1, 1).randomize()'
p20248
tp20249
a(g43
I41
g44
S'non_sequences=[W, W_in, W_out])'
p20250
tp20251
a(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p20252
tp20253
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20254
tp20255
asbsg211
(lp20256
g14
(g28
g16
Ntp20257
Rp20258
(dp20259
g32
g20242
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p20260
(dp20261
g37
(lp20262
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p20263
tp20264
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20265
tp20266
a(g893
I440
g206
S'[t() for t in self.output_types])'
p20267
tp20268
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20269
tp20270
asbsg55
g19719
sg20
Nsbag20239
asg213
g19724
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p20271
(dp20272
g37
(lp20273
(g298
I1007
g299
S'scan_outs = local_op(*scan_inputs)'
p20274
tp20275
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20276
tp20277
a(g893
I440
g206
S'[t() for t in self.output_types])'
p20278
tp20279
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20280
tp20281
asbsg55
g20033
sg20
Nsbag19034
asg34
(itheano.gof.utils
scratchpad
p20282
(dp20283
g37
(lp20284
(g105
I76
g106
S'self.initTraining()'
p20285
tp20286
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p20287
tp20288
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p20289
tp20290
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20291
tp20292
asbsg211
(lp20293
g20232
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20294
(dp20295
g37
(lp20296
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p20297
tp20298
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20299
tp20300
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20301
tp20302
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20303
tp20304
asbsg55
g14
(g56
g16
Ntp20305
Rp20306
(dp20307
g60
(I00
I00
tp20308
sg62
S'float64'
p20309
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20310
Rp20311
(dp20312
g32
g14
(g148
g16
Ntp20313
Rp20314
(dp20315
g12
(lp20316
g1608
asg34
(itheano.gof.utils
scratchpad
p20317
(dp20318
g37
(lp20319
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p20320
tp20321
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20322
tp20323
a(g205
I533
g206
S'inplace=False)(input))'
p20324
tp20325
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20326
tp20327
asbsg211
(lp20328
g20311
asg213
g14
(g214
g16
Ntp20329
Rp20330
(dp20331
g218
(lp20332
sg220
(lp20333
sg222
(lp20334
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp20335
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20336
(dp20337
bsg55
g14
(g56
g16
Ntp20338
Rp20339
(dp20340
g60
(I01
I01
tp20341
sg62
g1625
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20342
(dp20343
g37
(lp20344
(g105
I76
g106
S'self.initTraining()'
p20345
tp20346
a(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p20347
tp20348
a(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p20349
tp20350
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20351
tp20352
asbsg211
(lp20353
g20225
asg213
g1665
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20354
(dp20355
g37
(lp20356
(g198
I166
g1629
S'return theano.tensor.basic.pow(self, other)'
p20357
tp20358
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20359
tp20360
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20361
tp20362
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20363
tp20364
asbsg55
g14
(g56
g16
Ntp20365
Rp20366
(dp20367
g60
(I00
I00
tp20368
sg62
S'float64'
p20369
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20370
Rp20371
(dp20372
g32
g14
(g148
g16
Ntp20373
Rp20374
(dp20375
g12
(lp20376
g14
(g28
g16
Ntp20377
Rp20378
(dp20379
g32
g14
(g148
g16
Ntp20380
Rp20381
(dp20382
g12
(lp20383
g14
(g28
g16
Ntp20384
Rp20385
(dp20386
g32
g14
(g148
g16
Ntp20387
Rp20388
(dp20389
g12
(lp20390
g20225
asg34
(itheano.gof.utils
scratchpad
p20391
(dp20392
g37
(lp20393
(g109
I93
g110
S'error = ((self.__y - t) ** 2).sum()'
p20394
tp20395
a(g198
I452
g1720
S'acc_dtype=acc_dtype)'
p20396
tp20397
a(g47
I2670
g1720
S'out = elemwise.Sum(axis=axis, dtype=dtype, acc_dtype=acc_dtype)(input)'
p20398
tp20399
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20400
tp20401
asbsg211
(lp20402
g20385
asg213
g14
(g1728
g16
Ntp20403
Rp20404
(dp20405
g1732
g20369
sg62
g20369
sg229
g230
sg656
g659
sg571
Nsbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20406
(dp20407
g37
(lp20408
(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20409
tp20410
a(g205
I1797
g206
S'return CAReduce.make_node(op, input)'
p20411
tp20412
a(g205
I1299
g206
S'broadcastable=broadcastable)()'
p20413
tp20414
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20415
tp20416
asbsg55
g14
(g56
g16
Ntp20417
Rp20418
(dp20419
g60
(tsg62
g20369
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag1748
asg34
(itheano.gof.utils
scratchpad
p20420
(dp20421
g37
(lp20422
(g886
I450
g894
S'g_cost = _float_ones_like(cost)'
p20423
tp20424
a(g886
I1124
g1766
S'rval = tensor.ones_like(x)'
p20425
tp20426
a(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p20427
tp20428
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20429
tp20430
asbsg211
(lp20431
g20378
asg213
g1776
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20432
(dp20433
g37
(lp20434
(g47
I2070
g1769
S'ret = fill(model, constant(1.0, dtype=dtype))'
p20435
tp20436
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20437
tp20438
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20439
tp20440
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20441
tp20442
asbsg55
g14
(g56
g16
Ntp20443
Rp20444
(dp20445
g60
(tsg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20446
(dp20447
g37
(lp20448
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p20449
tp20450
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20451
tp20452
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p20453
tp20454
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20455
tp20456
asbsg211
(lp20457
g20371
asg213
g14
(g214
g16
Ntp20458
Rp20459
(dp20460
g218
(lp20461
sg220
(lp20462
sg222
(lp20463
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp20464
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20465
(dp20466
bsg55
g14
(g56
g16
Ntp20467
Rp20468
(dp20469
g60
(I01
I01
tp20470
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20471
(dp20472
g37
(lp20473
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p20474
tp20475
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20476
tp20477
a(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p20478
tp20479
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20480
tp20481
asbsg211
(lp20482
g20218
asg213
g14
(g650
g16
Ntp20483
Rp20484
(dp20485
g20
Nsg656
g1780
sg665
(dp20486
sg667
Nsg669
(dp20487
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20488
(dp20489
g37
(lp20490
(g205
I1861
g894
S'gx = Elemwise(scalar.second)(x, ds_op(gz))'
p20491
tp20492
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20493
tp20494
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20495
tp20496
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20497
tp20498
asbsg55
g14
(g56
g16
Ntp20499
Rp20500
(dp20501
g60
(I00
I00
tp20502
sg62
g1760
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag20311
asg34
(itheano.gof.utils
scratchpad
p20503
(dp20504
g37
(lp20505
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p20506
tp20507
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20508
tp20509
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20510
tp20511
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20512
tp20513
asbsg211
(lp20514
g20211
asg213
g14
(g650
g16
Ntp20515
Rp20516
(dp20517
g20
Nsg656
g1883
sg665
(dp20518
sg667
Nsg669
(dp20519
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20520
(dp20521
g37
(lp20522
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20523
tp20524
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20525
tp20526
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20527
tp20528
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20529
tp20530
asbsg55
g14
(g56
g16
Ntp20531
Rp20532
(dp20533
g60
(I00
I00
tp20534
sg62
S'float64'
p20535
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20536
Rp20537
(dp20538
g32
g14
(g148
g16
Ntp20539
Rp20540
(dp20541
g12
(lp20542
g20232
ag14
(g28
g16
Ntp20543
Rp20544
(dp20545
g32
g14
(g148
g16
Ntp20546
Rp20547
(dp20548
g12
(lp20549
g20311
ag14
(g28
g16
Ntp20550
Rp20551
(dp20552
g32
g14
(g148
g16
Ntp20553
Rp20554
(dp20555
g12
(lp20556
g1926
asg34
(itheano.gof.utils
scratchpad
p20557
(dp20558
g37
(lp20559
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20560
tp20561
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20562
tp20563
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p20564
tp20565
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20566
tp20567
asbsg211
(lp20568
g20551
asg213
g14
(g214
g16
Ntp20569
Rp20570
(dp20571
g218
(lp20572
sg220
(lp20573
sg222
(lp20574
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp20575
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20576
(dp20577
bsg55
g14
(g56
g16
Ntp20578
Rp20579
(dp20580
g60
(I01
I01
tp20581
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20582
(dp20583
g37
(lp20584
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20585
tp20586
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20587
tp20588
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20589
tp20590
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20591
tp20592
asbsg211
(lp20593
g20544
asg213
g14
(g650
g16
Ntp20594
Rp20595
(dp20596
g20
Nsg656
g1575
sg665
(dp20597
sg667
Nsg669
(dp20598
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20599
(dp20600
g37
(lp20601
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20602
tp20603
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20604
tp20605
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20606
tp20607
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20608
tp20609
asbsg55
g14
(g56
g16
Ntp20610
Rp20611
(dp20612
g60
(I01
I01
tp20613
sg62
S'int8'
p20614
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20615
(dp20616
g37
(lp20617
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p20618
tp20619
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20620
tp20621
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20622
tp20623
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20624
tp20625
asbsg211
(lp20626
g20537
asg213
g14
(g650
g16
Ntp20627
Rp20628
(dp20629
g20
Nsg656
g1669
sg665
(dp20630
sg667
Nsg669
(dp20631
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20632
(dp20633
g37
(lp20634
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20635
tp20636
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20637
tp20638
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20639
tp20640
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20641
tp20642
asbsg55
g14
(g56
g16
Ntp20643
Rp20644
(dp20645
g60
(I00
I00
tp20646
sg62
S'float64'
p20647
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20648
(dp20649
g37
(lp20650
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p20651
tp20652
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p20653
tp20654
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20655
tp20656
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20657
tp20658
asbsg211
(lp20659
g20204
asg213
g14
(g650
g16
Ntp20660
Rp20661
(dp20662
g20
Nsg656
g1883
sg665
(dp20663
sg667
Nsg669
(dp20664
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20665
(dp20666
g37
(lp20667
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p20668
tp20669
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20670
tp20671
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20672
tp20673
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20674
tp20675
asbsg55
g14
(g56
g16
Ntp20676
Rp20677
(dp20678
g60
(I00
I00
tp20679
sg62
S'float64'
p20680
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20681
(dp20682
g37
(lp20683
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20684
tp20685
a(g893
I1582
g894
S'outer_inp_seqs.append(x[::-1])'
p20686
tp20687
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20688
tp20689
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20690
tp20691
asbsg211
(lp20692
g20197
asg213
g14
(g308
g16
Ntp20693
Rp20694
(dp20695
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20696
tp20697
Rp20698
tp20699
Rp20700
tp20701
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20702
(dp20703
bsg55
g14
(g56
g16
Ntp20704
Rp20705
(dp20706
g60
(I00
I00
tp20707
sg62
g20680
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20708
Rp20709
(dp20710
g32
g14
(g148
g16
Ntp20711
Rp20712
(dp20713
g12
(lp20714
g14
(g28
g16
Ntp20715
Rp20716
(dp20717
g32
g14
(g148
g16
Ntp20718
Rp20719
(dp20720
g12
(lp20721
g19705
asg34
(itheano.gof.utils
scratchpad
p20722
(dp20723
g37
(lp20724
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20725
tp20726
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p20727
tp20728
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20729
tp20730
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20731
tp20732
asbsg211
(lp20733
g20716
asg213
g14
(g308
g16
Ntp20734
Rp20735
(dp20736
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20737
tp20738
Rp20739
tp20740
Rp20741
tp20742
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20743
(dp20744
bsg55
g14
(g56
g16
Ntp20745
Rp20746
(dp20747
g60
(I00
I00
tp20748
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20749
(dp20750
g37
(lp20751
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20752
tp20753
a(g893
I1607
g894
S'outer_inp_seqs += [x[::-1][:-1] for x in self.outer_sitsot_outs(outs)]'
p20754
tp20755
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20756
tp20757
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20758
tp20759
asbsg211
(lp20760
g20709
asg213
g14
(g308
g16
Ntp20761
Rp20762
(dp20763
g312
(g313
(Ng314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20764
tp20765
Rp20766
Ntp20767
Rp20768
tp20769
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20770
(dp20771
bsg55
g14
(g56
g16
Ntp20772
Rp20773
(dp20774
g60
(I00
I00
tp20775
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20776
Rp20777
(dp20778
g32
g14
(g148
g16
Ntp20779
Rp20780
(dp20781
g12
(lp20782
g19169
asg34
(itheano.gof.utils
scratchpad
p20783
(dp20784
g37
(lp20785
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20786
tp20787
a(g893
I1608
g894
S'outer_inp_seqs += [x[::-1] for x in self.outer_nitsot_outs(outs)]'
p20788
tp20789
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20790
tp20791
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20792
tp20793
asbsg211
(lp20794
g20777
asg213
g14
(g308
g16
Ntp20795
Rp20796
(dp20797
g312
(g313
(NNg314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p20798
tp20799
Rp20800
tp20801
Rp20802
tp20803
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20804
(dp20805
bsg55
g14
(g56
g16
Ntp20806
Rp20807
(dp20808
g60
(I00
I00
tp20809
sg62
g19950
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20810
Rp20811
(dp20812
g32
g14
(g148
g16
Ntp20813
Rp20814
(dp20815
g12
(lp20816
g477
ag14
(g28
g16
Ntp20817
Rp20818
(dp20819
g32
g14
(g148
g16
Ntp20820
Rp20821
(dp20822
g12
(lp20823
g14
(g28
g16
Ntp20824
Rp20825
(dp20826
g32
g14
(g148
g16
Ntp20827
Rp20828
(dp20829
g12
(lp20830
g19705
asg34
(itheano.gof.utils
scratchpad
p20831
(dp20832
g37
(lp20833
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20834
tp20835
a(g893
I1710
g894
S'tensor.zeros(outs[idx + offset].shape,'
p20836
tp20837
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p20838
tp20839
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20840
tp20841
asbsg211
(lp20842
g20825
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20843
(dp20844
g37
(lp20845
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p20846
tp20847
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20848
tp20849
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p20850
tp20851
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20852
tp20853
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20854
(dp20855
g37
(lp20856
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p20857
tp20858
a(g198
I419
g2241
S'yield self[i]'
p20859
tp20860
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20861
tp20862
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20863
tp20864
asbsg211
(lp20865
g20818
asg213
g14
(g308
g16
Ntp20866
Rp20867
(dp20868
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p20869
tp20870
Rp20871
tp20872
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20873
(dp20874
bsg55
g14
(g56
g16
Ntp20875
Rp20876
(dp20877
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20878
Rp20879
(dp20880
g32
g14
(g148
g16
Ntp20881
Rp20882
(dp20883
g12
(lp20884
g20825
asg34
(itheano.gof.utils
scratchpad
p20885
(dp20886
g37
(lp20887
(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p20888
tp20889
a(g198
I419
g2241
S'yield self[i]'
p20890
tp20891
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p20892
tp20893
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20894
tp20895
asbsg211
(lp20896
g20879
asg213
g14
(g308
g16
Ntp20897
Rp20898
(dp20899
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p20900
tp20901
Rp20902
tp20903
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20904
(dp20905
bsg55
g14
(g56
g16
Ntp20906
Rp20907
(dp20908
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p20909
(dp20910
g37
(lp20911
(g893
I1711
g894
S'dtype=dC_dinps_t[ins_pos].dtype))'
p20912
tp20913
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p20914
tp20915
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p20916
tp20917
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20918
tp20919
asbsg211
(lp20920
g20811
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20921
(dp20922
g37
(lp20923
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p20924
tp20925
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20926
tp20927
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p20928
tp20929
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20930
tp20931
asbsg55
g14
(g56
g16
Ntp20932
Rp20933
(dp20934
g60
(I00
I00
tp20935
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20936
Rp20937
(dp20938
g32
g14
(g148
g16
Ntp20939
Rp20940
(dp20941
g12
(lp20942
g477
ag14
(g28
g16
Ntp20943
Rp20944
(dp20945
g32
g14
(g148
g16
Ntp20946
Rp20947
(dp20948
g12
(lp20949
g19155
ag1926
asg34
(itheano.gof.utils
scratchpad
p20950
(dp20951
g37
(lp20952
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20953
tp20954
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p20955
tp20956
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p20957
tp20958
a(g202
I401
g52
S'self.add_tag_trace(node)'
p20959
tp20960
asbsg211
(lp20961
g20944
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p20962
(dp20963
g37
(lp20964
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p20965
tp20966
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p20967
tp20968
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p20969
tp20970
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p20971
tp20972
asbsg55
g14
(g56
g16
Ntp20973
Rp20974
(dp20975
g60
(tsg62
S'int64'
p20976
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp20977
Rp20978
(dp20979
g32
g14
(g148
g16
Ntp20980
Rp20981
(dp20982
g12
(lp20983
g14
(g28
g16
Ntp20984
Rp20985
(dp20986
g32
g14
(g148
g16
Ntp20987
Rp20988
(dp20989
g12
(lp20990
g19082
asg34
(itheano.gof.utils
scratchpad
p20991
(dp20992
g37
(lp20993
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p20994
tp20995
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p20996
tp20997
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p20998
tp20999
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21000
tp21001
asbsg211
(lp21002
g20985
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21003
(dp21004
g37
(lp21005
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21006
tp21007
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21008
tp21009
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21010
tp21011
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21012
tp21013
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21014
(dp21015
g37
(lp21016
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21017
tp21018
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21019
tp21020
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21021
tp21022
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21023
tp21024
asbsg211
(lp21025
g20978
asg213
g14
(g308
g16
Ntp21026
Rp21027
(dp21028
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p21029
tp21030
Rp21031
tp21032
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21033
(dp21034
bsg55
g14
(g56
g16
Ntp21035
Rp21036
(dp21037
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21038
Rp21039
(dp21040
g32
g14
(g148
g16
Ntp21041
Rp21042
(dp21043
g12
(lp21044
g14
(g28
g16
Ntp21045
Rp21046
(dp21047
g32
g14
(g148
g16
Ntp21048
Rp21049
(dp21050
g12
(lp21051
g19082
asg34
(itheano.gof.utils
scratchpad
p21052
(dp21053
g37
(lp21054
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21055
tp21056
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21057
tp21058
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21059
tp21060
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21061
tp21062
asbsg211
(lp21063
g21046
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21064
(dp21065
g37
(lp21066
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21067
tp21068
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21069
tp21070
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21071
tp21072
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21073
tp21074
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21075
(dp21076
g37
(lp21077
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21078
tp21079
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21080
tp21081
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21082
tp21083
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21084
tp21085
asbsg211
(lp21086
g21039
asg213
g14
(g308
g16
Ntp21087
Rp21088
(dp21089
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p21090
tp21091
Rp21092
tp21093
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21094
(dp21095
bsg55
g14
(g56
g16
Ntp21096
Rp21097
(dp21098
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21099
(dp21100
g37
(lp21101
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21102
tp21103
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p21104
tp21105
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21106
tp21107
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21108
tp21109
asbsg211
(lp21110
g20937
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21111
(dp21112
g37
(lp21113
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21114
tp21115
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21116
tp21117
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p21118
tp21119
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21120
tp21121
asbsg55
g14
(g56
g16
Ntp21122
Rp21123
(dp21124
g60
(I00
I00
I00
tp21125
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21126
Rp21127
(dp21128
g32
g14
(g148
g16
Ntp21129
Rp21130
(dp21131
g12
(lp21132
g477
ag14
(g28
g16
Ntp21133
Rp21134
(dp21135
g32
g14
(g148
g16
Ntp21136
Rp21137
(dp21138
g12
(lp21139
g19155
ag1926
asg34
(itheano.gof.utils
scratchpad
p21140
(dp21141
g37
(lp21142
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21143
tp21144
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21145
tp21146
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p21147
tp21148
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21149
tp21150
asbsg211
(lp21151
g21134
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21152
(dp21153
g37
(lp21154
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p21155
tp21156
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21157
tp21158
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p21159
tp21160
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21161
tp21162
asbsg55
g14
(g56
g16
Ntp21163
Rp21164
(dp21165
g60
(tsg62
S'int64'
p21166
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21167
Rp21168
(dp21169
g32
g14
(g148
g16
Ntp21170
Rp21171
(dp21172
g12
(lp21173
g14
(g28
g16
Ntp21174
Rp21175
(dp21176
g32
g14
(g148
g16
Ntp21177
Rp21178
(dp21179
g12
(lp21180
g19653
asg34
(itheano.gof.utils
scratchpad
p21181
(dp21182
g37
(lp21183
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21184
tp21185
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21186
tp21187
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21188
tp21189
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21190
tp21191
asbsg211
(lp21192
g21175
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21193
(dp21194
g37
(lp21195
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21196
tp21197
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21198
tp21199
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21200
tp21201
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21202
tp21203
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21204
(dp21205
g37
(lp21206
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21207
tp21208
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21209
tp21210
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21211
tp21212
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21213
tp21214
asbsg211
(lp21215
g21168
asg213
g14
(g308
g16
Ntp21216
Rp21217
(dp21218
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p21219
tp21220
Rp21221
tp21222
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21223
(dp21224
bsg55
g14
(g56
g16
Ntp21225
Rp21226
(dp21227
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21228
Rp21229
(dp21230
g32
g14
(g148
g16
Ntp21231
Rp21232
(dp21233
g12
(lp21234
g14
(g28
g16
Ntp21235
Rp21236
(dp21237
g32
g14
(g148
g16
Ntp21238
Rp21239
(dp21240
g12
(lp21241
g19653
asg34
(itheano.gof.utils
scratchpad
p21242
(dp21243
g37
(lp21244
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21245
tp21246
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21247
tp21248
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21249
tp21250
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21251
tp21252
asbsg211
(lp21253
g21236
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21254
(dp21255
g37
(lp21256
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21257
tp21258
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21259
tp21260
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21261
tp21262
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21263
tp21264
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21265
(dp21266
g37
(lp21267
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21268
tp21269
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21270
tp21271
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21272
tp21273
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21274
tp21275
asbsg211
(lp21276
g21229
asg213
g14
(g308
g16
Ntp21277
Rp21278
(dp21279
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p21280
tp21281
Rp21282
tp21283
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21284
(dp21285
bsg55
g14
(g56
g16
Ntp21286
Rp21287
(dp21288
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21289
(dp21290
g37
(lp21291
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21292
tp21293
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p21294
tp21295
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21296
tp21297
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21298
tp21299
asbsg211
(lp21300
g21127
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21301
(dp21302
g37
(lp21303
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21304
tp21305
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21306
tp21307
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p21308
tp21309
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21310
tp21311
asbsg55
g14
(g56
g16
Ntp21312
Rp21313
(dp21314
g60
(I00
I00
I00
tp21315
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21316
Rp21317
(dp21318
g32
g14
(g148
g16
Ntp21319
Rp21320
(dp21321
g12
(lp21322
g477
ag14
(g28
g16
Ntp21323
Rp21324
(dp21325
g32
g14
(g148
g16
Ntp21326
Rp21327
(dp21328
g12
(lp21329
g19155
ag1926
asg34
(itheano.gof.utils
scratchpad
p21330
(dp21331
g37
(lp21332
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21333
tp21334
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21335
tp21336
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p21337
tp21338
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21339
tp21340
asbsg211
(lp21341
g21324
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21342
(dp21343
g37
(lp21344
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p21345
tp21346
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21347
tp21348
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p21349
tp21350
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21351
tp21352
asbsg55
g14
(g56
g16
Ntp21353
Rp21354
(dp21355
g60
(tsg62
S'int64'
p21356
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21357
Rp21358
(dp21359
g32
g14
(g148
g16
Ntp21360
Rp21361
(dp21362
g12
(lp21363
g14
(g28
g16
Ntp21364
Rp21365
(dp21366
g32
g14
(g148
g16
Ntp21367
Rp21368
(dp21369
g12
(lp21370
g19673
asg34
(itheano.gof.utils
scratchpad
p21371
(dp21372
g37
(lp21373
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21374
tp21375
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21376
tp21377
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21378
tp21379
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21380
tp21381
asbsg211
(lp21382
g21365
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21383
(dp21384
g37
(lp21385
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21386
tp21387
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21388
tp21389
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21390
tp21391
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21392
tp21393
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21394
(dp21395
g37
(lp21396
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21397
tp21398
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21399
tp21400
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21401
tp21402
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21403
tp21404
asbsg211
(lp21405
g21358
asg213
g14
(g308
g16
Ntp21406
Rp21407
(dp21408
g312
(g314
(g367
S'\x00\x00\x00\x00\x00\x00\x00\x00'
p21409
tp21410
Rp21411
tp21412
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21413
(dp21414
bsg55
g14
(g56
g16
Ntp21415
Rp21416
(dp21417
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21418
Rp21419
(dp21420
g32
g14
(g148
g16
Ntp21421
Rp21422
(dp21423
g12
(lp21424
g14
(g28
g16
Ntp21425
Rp21426
(dp21427
g32
g14
(g148
g16
Ntp21428
Rp21429
(dp21430
g12
(lp21431
g19673
asg34
(itheano.gof.utils
scratchpad
p21432
(dp21433
g37
(lp21434
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21435
tp21436
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21437
tp21438
a(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21439
tp21440
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21441
tp21442
asbsg211
(lp21443
g21426
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21444
(dp21445
g37
(lp21446
(g198
I255
g40
S'shape = property(lambda self: theano.tensor.basic.shape(self))'
p21447
tp21448
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21449
tp21450
a(g47
I1140
g206
S'return Apply(self, [x], [lvector()])'
p21451
tp21452
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21453
tp21454
asbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21455
(dp21456
g37
(lp21457
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21458
tp21459
a(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21460
tp21461
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p21462
tp21463
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21464
tp21465
asbsg211
(lp21466
g21419
asg213
g14
(g308
g16
Ntp21467
Rp21468
(dp21469
g312
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p21470
tp21471
Rp21472
tp21473
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21474
(dp21475
bsg55
g14
(g56
g16
Ntp21476
Rp21477
(dp21478
g60
(tsg62
g364
sg64
g367
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21479
(dp21480
g37
(lp21481
(g893
I1765
g894
S'self.outer_non_seqs(inputs))]'
p21482
tp21483
a(g47
I2090
g754
S'return alloc(numpy.array(0, dtype=dtype), *shape)'
p21484
tp21485
a(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21486
tp21487
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21488
tp21489
asbsg211
(lp21490
g21317
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21491
(dp21492
g37
(lp21493
(g47
I2608
g52
S'ret = super(Alloc, self).__call__(val, *shapes, **kwargs)'
p21494
tp21495
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21496
tp21497
a(g47
I2494
g206
S'return gof.Apply(self, ([v] + sh), [otype()])'
p21498
tp21499
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21500
tp21501
asbsg55
g14
(g56
g16
Ntp21502
Rp21503
(dp21504
g60
(I00
I00
I00
tp21505
sg62
g492
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag19176
ag19082
ag19653
ag19673
asg34
(itheano.gof.utils
scratchpad
p21506
(dp21507
g37
(lp21508
(g886
I1063
g887
S'term = access_term_cache(node)[idx]'
p21509
tp21510
a(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21511
tp21512
a(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p21513
tp21514
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21515
tp21516
asbsg211
(lp21517
g14
(g28
g16
Ntp21518
Rp21519
(dp21520
g32
g19151
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p21521
(dp21522
g37
(lp21523
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p21524
tp21525
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21526
tp21527
a(g893
I440
g206
S'[t() for t in self.output_types])'
p21528
tp21529
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21530
tp21531
asbsg55
g14
(g56
g16
Ntp21532
Rp21533
(dp21534
g60
(I00
I00
tp21535
sg62
S'float64'
p21536
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag19148
ag14
(g28
g16
Ntp21537
Rp21538
(dp21539
g32
g19151
sg33
I2
sg34
(itheano.gof.utils
scratchpad
p21540
(dp21541
g37
(lp21542
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p21543
tp21544
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21545
tp21546
a(g893
I440
g206
S'[t() for t in self.output_types])'
p21547
tp21548
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21549
tp21550
asbsg55
g14
(g56
g16
Ntp21551
Rp21552
(dp21553
g60
(I00
I00
I00
tp21554
sg62
S'float64'
p21555
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21556
Rp21557
(dp21558
g32
g19151
sg33
I3
sg34
(itheano.gof.utils
scratchpad
p21559
(dp21560
g37
(lp21561
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p21562
tp21563
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21564
tp21565
a(g893
I440
g206
S'[t() for t in self.output_types])'
p21566
tp21567
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21568
tp21569
asbsg55
g14
(g56
g16
Ntp21570
Rp21571
(dp21572
g60
(I00
I00
I00
tp21573
sg62
S'float64'
p21574
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21575
Rp21576
(dp21577
g32
g19151
sg33
I4
sg34
(itheano.gof.utils
scratchpad
p21578
(dp21579
g37
(lp21580
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p21581
tp21582
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21583
tp21584
a(g893
I440
g206
S'[t() for t in self.output_types])'
p21585
tp21586
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21587
tp21588
asbsg55
g14
(g56
g16
Ntp21589
Rp21590
(dp21591
g60
(I00
I00
tp21592
sg62
S'float64'
p21593
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg213
g14
(g919
g16
Ntp21594
Rp21595
(dp21596
g8
I00
sg12
(lp21597
g14
(g28
g16
Ntp21598
Rp21599
(dp21600
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21601
(dp21602
g37
(lp21603
(g893
I1420
g894
S'self.outputs)'
p21604
tp21605
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p21606
tp21607
a(g593
I75
g952
S'nw_x = x.type()'
p21608
tp21609
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21610
tp21611
asbsg55
g19742
sg20
Nsbag14
(g28
g16
Ntp21612
Rp21613
(dp21614
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21615
(dp21616
g37
(lp21617
(g893
I1420
g894
S'self.outputs)'
p21618
tp21619
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p21620
tp21621
a(g593
I75
g952
S'nw_x = x.type()'
p21622
tp21623
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21624
tp21625
asbsg55
g19006
sg20
Nsbag14
(g28
g16
Ntp21626
Rp21627
(dp21628
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21629
(dp21630
g37
(lp21631
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21632
tp21633
a(g893
I1525
g894
S'dC_dXt = safe_new(dC_douts[idx][0])'
p21634
tp21635
a(g593
I75
g952
S'nw_x = x.type()'
p21636
tp21637
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21638
tp21639
asbsg55
g14
(g56
g16
Ntp21640
Rp21641
(dp21642
g60
(I00
tp21643
sg62
g20680
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21644
Rp21645
(dp21646
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21647
(dp21648
g37
(lp21649
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21650
tp21651
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p21652
tp21653
a(g593
I75
g952
S'nw_x = x.type()'
p21654
tp21655
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21656
tp21657
asbsg55
g19922
sg20
Nsbag14
(g28
g16
Ntp21658
Rp21659
(dp21660
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21661
(dp21662
g37
(lp21663
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21664
tp21665
a(g893
I1497
g894
S'Xt_placeholder = safe_new(Xt)'
p21666
tp21667
a(g593
I75
g952
S'nw_x = x.type()'
p21668
tp21669
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21670
tp21671
asbsg55
g19947
sg20
Nsbag14
(g28
g16
Ntp21672
Rp21673
(dp21674
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21675
(dp21676
g37
(lp21677
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21678
tp21679
a(g893
I1521
g894
S'dC_dXt = safe_new(Xt, dtype=new_dtype)'
p21680
tp21681
a(g593
I75
g952
S'nw_x = x.type()'
p21682
tp21683
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21684
tp21685
asbsg55
g19922
sg20
Nsbag14
(g28
g16
Ntp21686
Rp21687
(dp21688
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21689
(dp21690
g37
(lp21691
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21692
tp21693
a(g893
I1553
g894
S'dC_dXtm1s.append(safe_new(dC_dXts[opos]))'
p21694
tp21695
a(g593
I75
g952
S'nw_x = x.type()'
p21696
tp21697
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21698
tp21699
asbsg55
g19922
sg20
Nsbag14
(g28
g16
Ntp21700
Rp21701
(dp21702
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21703
(dp21704
g37
(lp21705
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21706
tp21707
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p21708
tp21709
a(g593
I75
g952
S'nw_x = x.type()'
p21710
tp21711
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21712
tp21713
asbsg55
g14
(g56
g16
Ntp21714
Rp21715
(dp21716
g60
(I00
I00
tp21717
sg62
S'float64'
p21718
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21719
Rp21720
(dp21721
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21722
(dp21723
g37
(lp21724
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21725
tp21726
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p21727
tp21728
a(g593
I75
g952
S'nw_x = x.type()'
p21729
tp21730
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21731
tp21732
asbsg55
g14
(g56
g16
Ntp21733
Rp21734
(dp21735
g60
(I00
I00
tp21736
sg62
S'float64'
p21737
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21738
Rp21739
(dp21740
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21741
(dp21742
g37
(lp21743
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p21744
tp21745
a(g893
I1558
g894
S'dC_dXtm1s.append(safe_new(x))'
p21746
tp21747
a(g593
I75
g952
S'nw_x = x.type()'
p21748
tp21749
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21750
tp21751
asbsg55
g14
(g56
g16
Ntp21752
Rp21753
(dp21754
g60
(I00
I00
tp21755
sg62
S'float64'
p21756
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21757
Rp21758
(dp21759
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21760
(dp21761
g37
(lp21762
(g893
I1420
g894
S'self.outputs)'
p21763
tp21764
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p21765
tp21766
a(g593
I75
g952
S'nw_x = x.type()'
p21767
tp21768
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21769
tp21770
asbsg55
g19095
sg20
Nsbag14
(g28
g16
Ntp21771
Rp21772
(dp21773
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21774
(dp21775
g37
(lp21776
(g893
I1420
g894
S'self.outputs)'
p21777
tp21778
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p21779
tp21780
a(g593
I75
g952
S'nw_x = x.type()'
p21781
tp21782
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21783
tp21784
asbsg55
g19666
sg20
Nsbag14
(g28
g16
Ntp21785
Rp21786
(dp21787
g32
Nsg33
Nsg34
(itheano.gof.utils
scratchpad
p21788
(dp21789
g37
(lp21790
(g893
I1420
g894
S'self.outputs)'
p21791
tp21792
a(g593
I793
g2989
S'nw_inputs = [safe_new(x, tag) for x in inputs]'
p21793
tp21794
a(g593
I75
g952
S'nw_x = x.type()'
p21795
tp21796
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21797
tp21798
asbsg55
g19686
sg20
Nsbasg999
(lp21799
(lp21800
I0
aI1
aa(lp21801
I-1
aa(lp21802
I-1
aa(lp21803
I-1
aasg1003
I-1282353987
sg211
(lp21804
g14
(g28
g16
Ntp21805
Rp21806
(dp21807
g32
g14
(g148
g16
Ntp21808
Rp21809
(dp21810
g12
(lp21811
g14
(g28
g16
Ntp21812
Rp21813
(dp21814
g32
g14
(g148
g16
Ntp21815
Rp21816
(dp21817
g12
(lp21818
g14
(g28
g16
Ntp21819
Rp21820
(dp21821
g32
g14
(g148
g16
Ntp21822
Rp21823
(dp21824
g12
(lp21825
g14
(g28
g16
Ntp21826
Rp21827
(dp21828
g32
g14
(g148
g16
Ntp21829
Rp21830
(dp21831
g12
(lp21832
g21673
ag14
(g28
g16
Ntp21833
Rp21834
(dp21835
g32
g14
(g148
g16
Ntp21836
Rp21837
(dp21838
g12
(lp21839
g14
(g28
g16
Ntp21840
Rp21841
(dp21842
g32
g14
(g148
g16
Ntp21843
Rp21844
(dp21845
g12
(lp21846
g1926
asg34
(itheano.gof.utils
scratchpad
p21847
(dp21848
g37
(lp21849
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21850
tp21851
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21852
tp21853
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p21854
tp21855
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21856
tp21857
asbsg211
(lp21858
g21841
asg213
g14
(g214
g16
Ntp21859
Rp21860
(dp21861
g218
(lp21862
sg220
(lp21863
sg222
(lp21864
I0
asg224
(tsg225
I00
sg226
(g227
tp21865
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21866
(dp21867
bsg55
g14
(g56
g16
Ntp21868
Rp21869
(dp21870
g60
(I01
tp21871
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21872
Rp21873
(dp21874
g32
g14
(g148
g16
Ntp21875
Rp21876
(dp21877
g12
(lp21878
g21645
asg34
(itheano.gof.utils
scratchpad
p21879
(dp21880
g37
(lp21881
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21882
tp21883
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21884
tp21885
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21886
tp21887
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21888
tp21889
asbsg211
(lp21890
g21873
asg213
g14
(g650
g16
Ntp21891
Rp21892
(dp21893
g20
Nsg656
g3280
sg665
(dp21894
sg667
Nsg669
(dp21895
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21896
(dp21897
g37
(lp21898
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21899
tp21900
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21901
tp21902
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p21903
tp21904
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21905
tp21906
asbsg55
g14
(g56
g16
Ntp21907
Rp21908
(dp21909
g60
(I00
tp21910
sg62
S'float64'
p21911
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21912
(dp21913
g37
(lp21914
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p21915
tp21916
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21917
tp21918
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21919
tp21920
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21921
tp21922
asbsg211
(lp21923
g21834
asg213
g14
(g650
g16
Ntp21924
Rp21925
(dp21926
g20
Nsg656
g1575
sg665
(dp21927
sg667
Nsg669
(dp21928
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21929
(dp21930
g37
(lp21931
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21932
tp21933
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21934
tp21935
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p21936
tp21937
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21938
tp21939
asbsg55
g14
(g56
g16
Ntp21940
Rp21941
(dp21942
g60
(I00
tp21943
sg62
S'float64'
p21944
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p21945
(dp21946
g37
(lp21947
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p21948
tp21949
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p21950
tp21951
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21952
tp21953
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21954
tp21955
asbsg211
(lp21956
g21827
asg213
g14
(g650
g16
Ntp21957
Rp21958
(dp21959
g20
Nsg656
g1883
sg665
(dp21960
sg667
Nsg669
(dp21961
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p21962
(dp21963
g37
(lp21964
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p21965
tp21966
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p21967
tp21968
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p21969
tp21970
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p21971
tp21972
asbsg55
g14
(g56
g16
Ntp21973
Rp21974
(dp21975
g60
(I00
tp21976
sg62
S'float64'
p21977
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp21978
Rp21979
(dp21980
g32
g14
(g148
g16
Ntp21981
Rp21982
(dp21983
g12
(lp21984
g21772
asg34
(itheano.gof.utils
scratchpad
p21985
(dp21986
g37
(lp21987
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p21988
tp21989
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p21990
tp21991
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p21992
tp21993
a(g202
I401
g52
S'self.add_tag_trace(node)'
p21994
tp21995
asbsg211
(lp21996
g21979
asg213
g14
(g214
g16
Ntp21997
Rp21998
(dp21999
g218
(lp22000
sg220
(lp22001
I1
aI0
asg222
(lp22002
sg224
g19668
sg225
I00
sg226
(I1
I0
tp22003
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22004
(dp22005
bsg55
g14
(g56
g16
Ntp22006
Rp22007
(dp22008
g60
(I00
I00
tp22009
sg62
g19669
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22010
(dp22011
g37
(lp22012
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22013
tp22014
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p22015
tp22016
a(g47
I4732
g1035
S'return _dot(a, b)'
p22017
tp22018
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22019
tp22020
asbsg211
(lp22021
g21820
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22022
(dp22023
bsg55
g14
(g56
g16
Ntp22024
Rp22025
(dp22026
g60
(I00
tp22027
sg62
S'float64'
p22028
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22029
Rp22030
(dp22031
g32
g14
(g148
g16
Ntp22032
Rp22033
(dp22034
g12
(lp22035
g14
(g28
g16
Ntp22036
Rp22037
(dp22038
g32
g14
(g148
g16
Ntp22039
Rp22040
(dp22041
g12
(lp22042
g14
(g28
g16
Ntp22043
Rp22044
(dp22045
g32
g14
(g148
g16
Ntp22046
Rp22047
(dp22048
g12
(lp22049
g21627
ag14
(g28
g16
Ntp22050
Rp22051
(dp22052
g32
g14
(g148
g16
Ntp22053
Rp22054
(dp22055
g12
(lp22056
g21786
asg34
(itheano.gof.utils
scratchpad
p22057
(dp22058
g37
(lp22059
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p22060
tp22061
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22062
tp22063
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22064
tp22065
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22066
tp22067
asbsg211
(lp22068
g22051
asg213
g14
(g214
g16
Ntp22069
Rp22070
(dp22071
g218
(lp22072
sg220
(lp22073
I1
aI0
asg222
(lp22074
sg224
g19688
sg225
I00
sg226
(I1
I0
tp22075
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22076
(dp22077
bsg55
g14
(g56
g16
Ntp22078
Rp22079
(dp22080
g60
(I00
I00
tp22081
sg62
g19689
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22082
(dp22083
g37
(lp22084
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22085
tp22086
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p22087
tp22088
a(g47
I4732
g1035
S'return _dot(a, b)'
p22089
tp22090
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22091
tp22092
asbsg211
(lp22093
g22044
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22094
(dp22095
bsg55
g14
(g56
g16
Ntp22096
Rp22097
(dp22098
g60
(I00
tp22099
sg62
S'float64'
p22100
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22101
Rp22102
(dp22103
g32
g14
(g148
g16
Ntp22104
Rp22105
(dp22106
g12
(lp22107
g14
(g28
g16
Ntp22108
Rp22109
(dp22110
g32
g14
(g148
g16
Ntp22111
Rp22112
(dp22113
g12
(lp22114
g1926
asg34
(itheano.gof.utils
scratchpad
p22115
(dp22116
g37
(lp22117
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22118
tp22119
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22120
tp22121
a(g205
I753
g1870
S"return DimShuffle((), ['x'] * nd, inplace=False)(res)"
p22122
tp22123
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22124
tp22125
asbsg211
(lp22126
g22109
asg213
g14
(g214
g16
Ntp22127
Rp22128
(dp22129
g218
(lp22130
sg220
(lp22131
sg222
(lp22132
I0
asg224
(tsg225
I00
sg226
(g227
tp22133
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22134
(dp22135
bsg55
g14
(g56
g16
Ntp22136
Rp22137
(dp22138
g60
(I01
tp22139
sg62
g1938
sg64
g1615
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22140
Rp22141
(dp22142
g32
g14
(g148
g16
Ntp22143
Rp22144
(dp22145
g12
(lp22146
g21645
asg34
(itheano.gof.utils
scratchpad
p22147
(dp22148
g37
(lp22149
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22150
tp22151
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22152
tp22153
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22154
tp22155
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22156
tp22157
asbsg211
(lp22158
g22141
asg213
g14
(g650
g16
Ntp22159
Rp22160
(dp22161
g20
Nsg656
g3280
sg665
(dp22162
sg667
Nsg669
(dp22163
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22164
(dp22165
g37
(lp22166
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22167
tp22168
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22169
tp22170
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22171
tp22172
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22173
tp22174
asbsg55
g14
(g56
g16
Ntp22175
Rp22176
(dp22177
g60
(I00
tp22178
sg62
S'float64'
p22179
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22180
(dp22181
g37
(lp22182
(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p22183
tp22184
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22185
tp22186
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22187
tp22188
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22189
tp22190
asbsg211
(lp22191
g22102
asg213
g14
(g650
g16
Ntp22192
Rp22193
(dp22194
g20
Nsg656
g1575
sg665
(dp22195
sg667
Nsg669
(dp22196
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22197
(dp22198
g37
(lp22199
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22200
tp22201
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22202
tp22203
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22204
tp22205
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22206
tp22207
asbsg55
g14
(g56
g16
Ntp22208
Rp22209
(dp22210
g60
(I00
tp22211
sg62
S'float64'
p22212
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22213
(dp22214
g37
(lp22215
(g205
I650
g894
S'rval = self._bgrad(inputs, ograds)'
p22216
tp22217
a(g205
I763
g1867
S'ret.append(transform(scalar_igrad))'
p22218
tp22219
a(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22220
tp22221
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22222
tp22223
asbsg211
(lp22224
g22037
asg213
g14
(g650
g16
Ntp22225
Rp22226
(dp22227
g20
Nsg656
g1883
sg665
(dp22228
sg667
Nsg669
(dp22229
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22230
(dp22231
g37
(lp22232
(g205
I755
g1870
S'*[transform(ipt) for ipt in node.inputs])'
p22233
tp22234
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22235
tp22236
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22237
tp22238
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22239
tp22240
asbsg55
g14
(g56
g16
Ntp22241
Rp22242
(dp22243
g60
(I00
tp22244
sg62
S'float64'
p22245
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22246
Rp22247
(dp22248
g32
g14
(g148
g16
Ntp22249
Rp22250
(dp22251
g12
(lp22252
g21772
asg34
(itheano.gof.utils
scratchpad
p22253
(dp22254
g37
(lp22255
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p22256
tp22257
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22258
tp22259
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22260
tp22261
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22262
tp22263
asbsg211
(lp22264
g22247
asg213
g14
(g214
g16
Ntp22265
Rp22266
(dp22267
g218
(lp22268
sg220
(lp22269
I1
aI0
asg222
(lp22270
sg224
g19668
sg225
I00
sg226
(I1
I0
tp22271
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22272
(dp22273
bsg55
g14
(g56
g16
Ntp22274
Rp22275
(dp22276
g60
(I00
I00
tp22277
sg62
g19669
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22278
(dp22279
g37
(lp22280
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22281
tp22282
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p22283
tp22284
a(g47
I4732
g1035
S'return _dot(a, b)'
p22285
tp22286
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22287
tp22288
asbsg211
(lp22289
g22030
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22290
(dp22291
bsg55
g14
(g56
g16
Ntp22292
Rp22293
(dp22294
g60
(I00
tp22295
sg62
S'float64'
p22296
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22297
(dp22298
g37
(lp22299
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22300
tp22301
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p22302
tp22303
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22304
tp22305
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22306
tp22307
asbsg211
(lp22308
g21813
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22309
(dp22310
g37
(lp22311
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22312
tp22313
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22314
tp22315
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22316
tp22317
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22318
tp22319
asbsg55
g14
(g56
g16
Ntp22320
Rp22321
(dp22322
g60
(I00
tp22323
sg62
S'float64'
p22324
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag21687
asg34
(itheano.gof.utils
scratchpad
p22325
(dp22326
g37
(lp22327
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22328
tp22329
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p22330
tp22331
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22332
tp22333
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22334
tp22335
asbsg211
(lp22336
g21806
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22337
(dp22338
g37
(lp22339
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22340
tp22341
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22342
tp22343
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22344
tp22345
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22346
tp22347
asbsg55
g14
(g56
g16
Ntp22348
Rp22349
(dp22350
g60
(I00
tp22351
sg62
g21536
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22352
Rp22353
(dp22354
g32
g14
(g148
g16
Ntp22355
Rp22356
(dp22357
g12
(lp22358
g14
(g28
g16
Ntp22359
Rp22360
(dp22361
g32
g14
(g148
g16
Ntp22362
Rp22363
(dp22364
g12
(lp22365
g14
(g28
g16
Ntp22366
Rp22367
(dp22368
g32
g14
(g148
g16
Ntp22369
Rp22370
(dp22371
g12
(lp22372
g14
(g28
g16
Ntp22373
Rp22374
(dp22375
g32
g14
(g148
g16
Ntp22376
Rp22377
(dp22378
g12
(lp22379
g14
(g28
g16
Ntp22380
Rp22381
(dp22382
g32
g14
(g148
g16
Ntp22383
Rp22384
(dp22385
g12
(lp22386
g21599
asg34
(itheano.gof.utils
scratchpad
p22387
(dp22388
g37
(lp22389
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22390
tp22391
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22392
tp22393
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22394
tp22395
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22396
tp22397
asbsg211
(lp22398
g22381
asg213
g14
(g214
g16
Ntp22399
Rp22400
(dp22401
g218
(lp22402
sg220
(lp22403
I0
asg222
(lp22404
sg224
g19744
sg225
I00
sg226
(I0
tp22405
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22406
(dp22407
bsg55
g14
(g56
g16
Ntp22408
Rp22409
(dp22410
g60
(I00
tp22411
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22412
(dp22413
g37
(lp22414
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22415
tp22416
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p22417
tp22418
a(g198
I324
g3811
S'return op(self)'
p22419
tp22420
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22421
tp22422
asbsg211
(lp22423
g22374
asg213
g14
(g214
g16
Ntp22424
Rp22425
(dp22426
g218
(lp22427
sg220
(lp22428
I0
asg222
(lp22429
I1
asg224
(I00
tp22430
sg225
I00
sg226
(I0
g227
tp22431
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22432
(dp22433
bsg55
g14
(g56
g16
Ntp22434
Rp22435
(dp22436
g60
(I00
I01
tp22437
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22438
Rp22439
(dp22440
g32
g14
(g148
g16
Ntp22441
Rp22442
(dp22443
g12
(lp22444
g14
(g28
g16
Ntp22445
Rp22446
(dp22447
g32
g14
(g148
g16
Ntp22448
Rp22449
(dp22450
g12
(lp22451
g21673
ag14
(g28
g16
Ntp22452
Rp22453
(dp22454
g32
g14
(g148
g16
Ntp22455
Rp22456
(dp22457
g12
(lp22458
g14
(g28
g16
Ntp22459
Rp22460
(dp22461
g32
g14
(g148
g16
Ntp22462
Rp22463
(dp22464
g12
(lp22465
g1926
asg34
(itheano.gof.utils
scratchpad
p22466
(dp22467
g37
g21849
sbsg211
(lp22468
g22460
asg213
g21860
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22469
(dp22470
bsg55
g21869
sg20
Nsbag14
(g28
g16
Ntp22471
Rp22472
(dp22473
g32
g14
(g148
g16
Ntp22474
Rp22475
(dp22476
g12
(lp22477
g21645
asg34
(itheano.gof.utils
scratchpad
p22478
(dp22479
g37
g21881
sbsg211
(lp22480
g22472
asg213
g21892
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22481
(dp22482
g37
g21898
sbsg55
g21908
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22483
(dp22484
g37
g21914
sbsg211
(lp22485
g22453
asg213
g21925
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22486
(dp22487
g37
g21931
sbsg55
g21941
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22488
(dp22489
g37
g21947
sbsg211
(lp22490
g22446
asg213
g21958
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22491
(dp22492
g37
g21964
sbsg55
g21974
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22493
(dp22494
g37
(lp22495
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22496
tp22497
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22498
tp22499
a(g198
I324
g3811
S'return op(self)'
p22500
tp22501
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22502
tp22503
asbsg211
(lp22504
g22439
asg213
g14
(g214
g16
Ntp22505
Rp22506
(dp22507
g218
(lp22508
sg220
(lp22509
I0
asg222
(lp22510
I0
asg224
(I00
tp22511
sg225
I00
sg226
(g227
I0
tp22512
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22513
(dp22514
bsg55
g14
(g56
g16
Ntp22515
Rp22516
(dp22517
g60
(I01
I00
tp22518
sg62
g21977
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22519
(dp22520
g37
(lp22521
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22522
tp22523
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22524
tp22525
a(g47
I4732
g1035
S'return _dot(a, b)'
p22526
tp22527
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22528
tp22529
asbsg211
(lp22530
g22367
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22531
(dp22532
bsg55
g14
(g56
g16
Ntp22533
Rp22534
(dp22535
g60
(I00
I00
tp22536
sg62
S'float64'
p22537
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22538
Rp22539
(dp22540
g32
g14
(g148
g16
Ntp22541
Rp22542
(dp22543
g12
(lp22544
g14
(g28
g16
Ntp22545
Rp22546
(dp22547
g32
g14
(g148
g16
Ntp22548
Rp22549
(dp22550
g12
(lp22551
g14
(g28
g16
Ntp22552
Rp22553
(dp22554
g32
g14
(g148
g16
Ntp22555
Rp22556
(dp22557
g12
(lp22558
g21599
asg34
(itheano.gof.utils
scratchpad
p22559
(dp22560
g37
(lp22561
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22562
tp22563
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22564
tp22565
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22566
tp22567
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22568
tp22569
asbsg211
(lp22570
g22553
asg213
g14
(g214
g16
Ntp22571
Rp22572
(dp22573
g218
(lp22574
sg220
(lp22575
I0
asg222
(lp22576
sg224
g19744
sg225
I00
sg226
(I0
tp22577
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22578
(dp22579
bsg55
g14
(g56
g16
Ntp22580
Rp22581
(dp22582
g60
(I00
tp22583
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22584
(dp22585
g37
(lp22586
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22587
tp22588
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p22589
tp22590
a(g198
I324
g3811
S'return op(self)'
p22591
tp22592
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22593
tp22594
asbsg211
(lp22595
g22546
asg213
g14
(g214
g16
Ntp22596
Rp22597
(dp22598
g218
(lp22599
sg220
(lp22600
I0
asg222
(lp22601
I1
asg224
(I00
tp22602
sg225
I00
sg226
(I0
g227
tp22603
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22604
(dp22605
bsg55
g14
(g56
g16
Ntp22606
Rp22607
(dp22608
g60
(I00
I01
tp22609
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22610
Rp22611
(dp22612
g32
g14
(g148
g16
Ntp22613
Rp22614
(dp22615
g12
(lp22616
g14
(g28
g16
Ntp22617
Rp22618
(dp22619
g32
g14
(g148
g16
Ntp22620
Rp22621
(dp22622
g12
(lp22623
g14
(g28
g16
Ntp22624
Rp22625
(dp22626
g32
g14
(g148
g16
Ntp22627
Rp22628
(dp22629
g12
(lp22630
g21627
ag14
(g28
g16
Ntp22631
Rp22632
(dp22633
g32
g14
(g148
g16
Ntp22634
Rp22635
(dp22636
g12
(lp22637
g21786
asg34
(itheano.gof.utils
scratchpad
p22638
(dp22639
g37
g22059
sbsg211
(lp22640
g22632
asg213
g22070
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22641
(dp22642
bsg55
g22079
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22643
(dp22644
g37
g22084
sbsg211
(lp22645
g22625
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22646
(dp22647
bsg55
g22097
sg20
Nsbag14
(g28
g16
Ntp22648
Rp22649
(dp22650
g32
g14
(g148
g16
Ntp22651
Rp22652
(dp22653
g12
(lp22654
g14
(g28
g16
Ntp22655
Rp22656
(dp22657
g32
g14
(g148
g16
Ntp22658
Rp22659
(dp22660
g12
(lp22661
g1926
asg34
(itheano.gof.utils
scratchpad
p22662
(dp22663
g37
g22117
sbsg211
(lp22664
g22656
asg213
g22128
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22665
(dp22666
bsg55
g22137
sg20
Nsbag14
(g28
g16
Ntp22667
Rp22668
(dp22669
g32
g14
(g148
g16
Ntp22670
Rp22671
(dp22672
g12
(lp22673
g21645
asg34
(itheano.gof.utils
scratchpad
p22674
(dp22675
g37
g22149
sbsg211
(lp22676
g22668
asg213
g22160
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22677
(dp22678
g37
g22166
sbsg55
g22176
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22679
(dp22680
g37
g22182
sbsg211
(lp22681
g22649
asg213
g22193
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22682
(dp22683
g37
g22199
sbsg55
g22209
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22684
(dp22685
g37
g22215
sbsg211
(lp22686
g22618
asg213
g22226
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22687
(dp22688
g37
g22232
sbsg55
g22242
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22689
(dp22690
g37
(lp22691
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22692
tp22693
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22694
tp22695
a(g198
I324
g3811
S'return op(self)'
p22696
tp22697
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22698
tp22699
asbsg211
(lp22700
g22611
asg213
g14
(g214
g16
Ntp22701
Rp22702
(dp22703
g218
(lp22704
sg220
(lp22705
I0
asg222
(lp22706
I0
asg224
(I00
tp22707
sg225
I00
sg226
(g227
I0
tp22708
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22709
(dp22710
bsg55
g14
(g56
g16
Ntp22711
Rp22712
(dp22713
g60
(I01
I00
tp22714
sg62
g22245
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22715
(dp22716
g37
(lp22717
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22718
tp22719
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22720
tp22721
a(g47
I4732
g1035
S'return _dot(a, b)'
p22722
tp22723
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22724
tp22725
asbsg211
(lp22726
g22539
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22727
(dp22728
bsg55
g14
(g56
g16
Ntp22729
Rp22730
(dp22731
g60
(I00
I00
tp22732
sg62
S'float64'
p22733
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22734
(dp22735
g37
(lp22736
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22737
tp22738
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p22739
tp22740
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22741
tp22742
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22743
tp22744
asbsg211
(lp22745
g22360
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22746
(dp22747
g37
(lp22748
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22749
tp22750
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22751
tp22752
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22753
tp22754
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22755
tp22756
asbsg55
g21715
sg20
Nsbag21701
asg34
(itheano.gof.utils
scratchpad
p22757
(dp22758
g37
(lp22759
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p22760
tp22761
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p22762
tp22763
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22764
tp22765
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22766
tp22767
asbsg211
(lp22768
g22353
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22769
(dp22770
g37
(lp22771
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p22772
tp22773
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p22774
tp22775
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p22776
tp22777
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p22778
tp22779
asbsg55
g14
(g56
g16
Ntp22780
Rp22781
(dp22782
g60
(I00
I00
tp22783
sg62
S'float64'
p22784
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22785
Rp22786
(dp22787
g32
g14
(g148
g16
Ntp22788
Rp22789
(dp22790
g12
(lp22791
g14
(g28
g16
Ntp22792
Rp22793
(dp22794
g32
g14
(g148
g16
Ntp22795
Rp22796
(dp22797
g12
(lp22798
g14
(g28
g16
Ntp22799
Rp22800
(dp22801
g32
g14
(g148
g16
Ntp22802
Rp22803
(dp22804
g12
(lp22805
g14
(g28
g16
Ntp22806
Rp22807
(dp22808
g32
g14
(g148
g16
Ntp22809
Rp22810
(dp22811
g12
(lp22812
g14
(g28
g16
Ntp22813
Rp22814
(dp22815
g32
g14
(g148
g16
Ntp22816
Rp22817
(dp22818
g12
(lp22819
g21613
asg34
(itheano.gof.utils
scratchpad
p22820
(dp22821
g37
(lp22822
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22823
tp22824
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22825
tp22826
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22827
tp22828
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22829
tp22830
asbsg211
(lp22831
g22814
asg213
g14
(g214
g16
Ntp22832
Rp22833
(dp22834
g218
(lp22835
sg220
(lp22836
I0
asg222
(lp22837
sg224
g19008
sg225
I00
sg226
(I0
tp22838
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22839
(dp22840
bsg55
g14
(g56
g16
Ntp22841
Rp22842
(dp22843
g60
(I00
tp22844
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22845
(dp22846
g37
(lp22847
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22848
tp22849
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p22850
tp22851
a(g198
I324
g3811
S'return op(self)'
p22852
tp22853
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22854
tp22855
asbsg211
(lp22856
g22807
asg213
g14
(g214
g16
Ntp22857
Rp22858
(dp22859
g218
(lp22860
sg220
(lp22861
I0
asg222
(lp22862
I1
asg224
(I00
tp22863
sg225
I00
sg226
(I0
g227
tp22864
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22865
(dp22866
bsg55
g14
(g56
g16
Ntp22867
Rp22868
(dp22869
g60
(I00
I01
tp22870
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22871
Rp22872
(dp22873
g32
g14
(g148
g16
Ntp22874
Rp22875
(dp22876
g12
(lp22877
g14
(g28
g16
Ntp22878
Rp22879
(dp22880
g32
g14
(g148
g16
Ntp22881
Rp22882
(dp22883
g12
(lp22884
g21673
ag14
(g28
g16
Ntp22885
Rp22886
(dp22887
g32
g14
(g148
g16
Ntp22888
Rp22889
(dp22890
g12
(lp22891
g14
(g28
g16
Ntp22892
Rp22893
(dp22894
g32
g14
(g148
g16
Ntp22895
Rp22896
(dp22897
g12
(lp22898
g1926
asg34
(itheano.gof.utils
scratchpad
p22899
(dp22900
g37
g21849
sbsg211
(lp22901
g22893
asg213
g21860
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22902
(dp22903
bsg55
g21869
sg20
Nsbag14
(g28
g16
Ntp22904
Rp22905
(dp22906
g32
g14
(g148
g16
Ntp22907
Rp22908
(dp22909
g12
(lp22910
g21645
asg34
(itheano.gof.utils
scratchpad
p22911
(dp22912
g37
g21881
sbsg211
(lp22913
g22905
asg213
g21892
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22914
(dp22915
g37
g21898
sbsg55
g21908
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22916
(dp22917
g37
g21914
sbsg211
(lp22918
g22886
asg213
g21925
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22919
(dp22920
g37
g21931
sbsg55
g21941
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22921
(dp22922
g37
g21947
sbsg211
(lp22923
g22879
asg213
g21958
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22924
(dp22925
g37
g21964
sbsg55
g21974
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22926
(dp22927
g37
(lp22928
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22929
tp22930
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22931
tp22932
a(g198
I324
g3811
S'return op(self)'
p22933
tp22934
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22935
tp22936
asbsg211
(lp22937
g22872
asg213
g14
(g214
g16
Ntp22938
Rp22939
(dp22940
g218
(lp22941
sg220
(lp22942
I0
asg222
(lp22943
I0
asg224
(I00
tp22944
sg225
I00
sg226
(g227
I0
tp22945
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22946
(dp22947
bsg55
g14
(g56
g16
Ntp22948
Rp22949
(dp22950
g60
(I01
I00
tp22951
sg62
g21977
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p22952
(dp22953
g37
(lp22954
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22955
tp22956
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p22957
tp22958
a(g47
I4732
g1035
S'return _dot(a, b)'
p22959
tp22960
a(g202
I401
g52
S'self.add_tag_trace(node)'
p22961
tp22962
asbsg211
(lp22963
g22800
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p22964
(dp22965
bsg55
g14
(g56
g16
Ntp22966
Rp22967
(dp22968
g60
(I00
I00
tp22969
sg62
S'float64'
p22970
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp22971
Rp22972
(dp22973
g32
g14
(g148
g16
Ntp22974
Rp22975
(dp22976
g12
(lp22977
g14
(g28
g16
Ntp22978
Rp22979
(dp22980
g32
g14
(g148
g16
Ntp22981
Rp22982
(dp22983
g12
(lp22984
g14
(g28
g16
Ntp22985
Rp22986
(dp22987
g32
g14
(g148
g16
Ntp22988
Rp22989
(dp22990
g12
(lp22991
g21613
asg34
(itheano.gof.utils
scratchpad
p22992
(dp22993
g37
(lp22994
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p22995
tp22996
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p22997
tp22998
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p22999
tp23000
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23001
tp23002
asbsg211
(lp23003
g22986
asg213
g14
(g214
g16
Ntp23004
Rp23005
(dp23006
g218
(lp23007
sg220
(lp23008
I0
asg222
(lp23009
sg224
g19008
sg225
I00
sg226
(I0
tp23010
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23011
(dp23012
bsg55
g14
(g56
g16
Ntp23013
Rp23014
(dp23015
g60
(I00
tp23016
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23017
(dp23018
g37
(lp23019
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23020
tp23021
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p23022
tp23023
a(g198
I324
g3811
S'return op(self)'
p23024
tp23025
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23026
tp23027
asbsg211
(lp23028
g22979
asg213
g14
(g214
g16
Ntp23029
Rp23030
(dp23031
g218
(lp23032
sg220
(lp23033
I0
asg222
(lp23034
I1
asg224
(I00
tp23035
sg225
I00
sg226
(I0
g227
tp23036
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23037
(dp23038
bsg55
g14
(g56
g16
Ntp23039
Rp23040
(dp23041
g60
(I00
I01
tp23042
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp23043
Rp23044
(dp23045
g32
g14
(g148
g16
Ntp23046
Rp23047
(dp23048
g12
(lp23049
g14
(g28
g16
Ntp23050
Rp23051
(dp23052
g32
g14
(g148
g16
Ntp23053
Rp23054
(dp23055
g12
(lp23056
g14
(g28
g16
Ntp23057
Rp23058
(dp23059
g32
g14
(g148
g16
Ntp23060
Rp23061
(dp23062
g12
(lp23063
g21627
ag14
(g28
g16
Ntp23064
Rp23065
(dp23066
g32
g14
(g148
g16
Ntp23067
Rp23068
(dp23069
g12
(lp23070
g21786
asg34
(itheano.gof.utils
scratchpad
p23071
(dp23072
g37
g22059
sbsg211
(lp23073
g23065
asg213
g22070
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23074
(dp23075
bsg55
g22079
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23076
(dp23077
g37
g22084
sbsg211
(lp23078
g23058
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23079
(dp23080
bsg55
g22097
sg20
Nsbag14
(g28
g16
Ntp23081
Rp23082
(dp23083
g32
g14
(g148
g16
Ntp23084
Rp23085
(dp23086
g12
(lp23087
g14
(g28
g16
Ntp23088
Rp23089
(dp23090
g32
g14
(g148
g16
Ntp23091
Rp23092
(dp23093
g12
(lp23094
g1926
asg34
(itheano.gof.utils
scratchpad
p23095
(dp23096
g37
g22117
sbsg211
(lp23097
g23089
asg213
g22128
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23098
(dp23099
bsg55
g22137
sg20
Nsbag14
(g28
g16
Ntp23100
Rp23101
(dp23102
g32
g14
(g148
g16
Ntp23103
Rp23104
(dp23105
g12
(lp23106
g21645
asg34
(itheano.gof.utils
scratchpad
p23107
(dp23108
g37
g22149
sbsg211
(lp23109
g23101
asg213
g22160
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23110
(dp23111
g37
g22166
sbsg55
g22176
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23112
(dp23113
g37
g22182
sbsg211
(lp23114
g23082
asg213
g22193
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23115
(dp23116
g37
g22199
sbsg55
g22209
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23117
(dp23118
g37
g22215
sbsg211
(lp23119
g23051
asg213
g22226
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23120
(dp23121
g37
g22232
sbsg55
g22242
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23122
(dp23123
g37
(lp23124
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23125
tp23126
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p23127
tp23128
a(g198
I324
g3811
S'return op(self)'
p23129
tp23130
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23131
tp23132
asbsg211
(lp23133
g23044
asg213
g14
(g214
g16
Ntp23134
Rp23135
(dp23136
g218
(lp23137
sg220
(lp23138
I0
asg222
(lp23139
I0
asg224
(I00
tp23140
sg225
I00
sg226
(g227
I0
tp23141
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23142
(dp23143
bsg55
g14
(g56
g16
Ntp23144
Rp23145
(dp23146
g60
(I01
I00
tp23147
sg62
g22245
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23148
(dp23149
g37
(lp23150
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23151
tp23152
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p23153
tp23154
a(g47
I4732
g1035
S'return _dot(a, b)'
p23155
tp23156
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23157
tp23158
asbsg211
(lp23159
g22972
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23160
(dp23161
bsg55
g14
(g56
g16
Ntp23162
Rp23163
(dp23164
g60
(I00
I00
tp23165
sg62
S'float64'
p23166
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23167
(dp23168
g37
(lp23169
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23170
tp23171
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p23172
tp23173
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23174
tp23175
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23176
tp23177
asbsg211
(lp23178
g22793
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23179
(dp23180
g37
(lp23181
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23182
tp23183
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p23184
tp23185
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p23186
tp23187
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p23188
tp23189
asbsg55
g21734
sg20
Nsbag21720
asg34
(itheano.gof.utils
scratchpad
p23190
(dp23191
g37
(lp23192
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23193
tp23194
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p23195
tp23196
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23197
tp23198
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23199
tp23200
asbsg211
(lp23201
g22786
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23202
(dp23203
g37
(lp23204
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23205
tp23206
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p23207
tp23208
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p23209
tp23210
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p23211
tp23212
asbsg55
g14
(g56
g16
Ntp23213
Rp23214
(dp23215
g60
(I00
I00
tp23216
sg62
g21555
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp23217
Rp23218
(dp23219
g32
g14
(g148
g16
Ntp23220
Rp23221
(dp23222
g12
(lp23223
g14
(g28
g16
Ntp23224
Rp23225
(dp23226
g32
g14
(g148
g16
Ntp23227
Rp23228
(dp23229
g12
(lp23230
g14
(g28
g16
Ntp23231
Rp23232
(dp23233
g32
g14
(g148
g16
Ntp23234
Rp23235
(dp23236
g12
(lp23237
g14
(g28
g16
Ntp23238
Rp23239
(dp23240
g32
g14
(g148
g16
Ntp23241
Rp23242
(dp23243
g12
(lp23244
g21645
asg34
(itheano.gof.utils
scratchpad
p23245
(dp23246
g37
(lp23247
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23248
tp23249
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p23250
tp23251
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p23252
tp23253
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23254
tp23255
asbsg211
(lp23256
g23239
asg213
g14
(g214
g16
Ntp23257
Rp23258
(dp23259
g218
(lp23260
sg220
(lp23261
I0
asg222
(lp23262
sg224
g19924
sg225
I00
sg226
(I0
tp23263
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23264
(dp23265
bsg55
g14
(g56
g16
Ntp23266
Rp23267
(dp23268
g60
(I00
tp23269
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23270
(dp23271
g37
(lp23272
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23273
tp23274
a(g47
I4937
g3808
S"x.dimshuffle(0, 'x'),"
p23275
tp23276
a(g198
I324
g3811
S'return op(self)'
p23277
tp23278
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23279
tp23280
asbsg211
(lp23281
g23232
asg213
g14
(g214
g16
Ntp23282
Rp23283
(dp23284
g218
(lp23285
sg220
(lp23286
I0
asg222
(lp23287
I1
asg224
(I00
tp23288
sg225
I00
sg226
(I0
g227
tp23289
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23290
(dp23291
bsg55
g14
(g56
g16
Ntp23292
Rp23293
(dp23294
g60
(I00
I01
tp23295
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp23296
Rp23297
(dp23298
g32
g14
(g148
g16
Ntp23299
Rp23300
(dp23301
g12
(lp23302
g21627
asg34
(itheano.gof.utils
scratchpad
p23303
(dp23304
g37
(lp23305
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23306
tp23307
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p23308
tp23309
a(g198
I324
g3811
S'return op(self)'
p23310
tp23311
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23312
tp23313
asbsg211
(lp23314
g23297
asg213
g14
(g214
g16
Ntp23315
Rp23316
(dp23317
g218
(lp23318
sg220
(lp23319
I0
asg222
(lp23320
I0
asg224
(I00
tp23321
sg225
I00
sg226
(g227
I0
tp23322
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23323
(dp23324
bsg55
g14
(g56
g16
Ntp23325
Rp23326
(dp23327
g60
(I01
I00
tp23328
sg62
g20680
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23329
(dp23330
g37
(lp23331
(g47
I4568
g894
S'ygrad = outer(x.T, gz)'
p23332
tp23333
a(g47
I4938
g3808
S"y.dimshuffle('x', 0))"
p23334
tp23335
a(g47
I4732
g1035
S'return _dot(a, b)'
p23336
tp23337
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23338
tp23339
asbsg211
(lp23340
g23225
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23341
(dp23342
bsg55
g21753
sg20
Nsbag21739
asg34
(itheano.gof.utils
scratchpad
p23343
(dp23344
g37
(lp23345
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23346
tp23347
a(g893
I1560
g894
S'dC_dinps_t[dx + self.n_seqs] += dC_dXtm1'
p23348
tp23349
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23350
tp23351
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23352
tp23353
asbsg211
(lp23354
g23218
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23355
(dp23356
g37
(lp23357
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23358
tp23359
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p23360
tp23361
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p23362
tp23363
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p23364
tp23365
asbsg55
g14
(g56
g16
Ntp23366
Rp23367
(dp23368
g60
(I00
I00
tp23369
sg62
g21574
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp23370
Rp23371
(dp23372
g32
g14
(g148
g16
Ntp23373
Rp23374
(dp23375
g12
(lp23376
g14
(g28
g16
Ntp23377
Rp23378
(dp23379
g32
g14
(g148
g16
Ntp23380
Rp23381
(dp23382
g12
(lp23383
g14
(g28
g16
Ntp23384
Rp23385
(dp23386
g32
g14
(g148
g16
Ntp23387
Rp23388
(dp23389
g12
(lp23390
g21673
ag14
(g28
g16
Ntp23391
Rp23392
(dp23393
g32
g14
(g148
g16
Ntp23394
Rp23395
(dp23396
g12
(lp23397
g14
(g28
g16
Ntp23398
Rp23399
(dp23400
g32
g14
(g148
g16
Ntp23401
Rp23402
(dp23403
g12
(lp23404
g1926
asg34
(itheano.gof.utils
scratchpad
p23405
(dp23406
g37
g21849
sbsg211
(lp23407
g23399
asg213
g21860
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23408
(dp23409
bsg55
g21869
sg20
Nsbag14
(g28
g16
Ntp23410
Rp23411
(dp23412
g32
g14
(g148
g16
Ntp23413
Rp23414
(dp23415
g12
(lp23416
g21645
asg34
(itheano.gof.utils
scratchpad
p23417
(dp23418
g37
g21881
sbsg211
(lp23419
g23411
asg213
g21892
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23420
(dp23421
g37
g21898
sbsg55
g21908
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23422
(dp23423
g37
g21914
sbsg211
(lp23424
g23392
asg213
g21925
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23425
(dp23426
g37
g21931
sbsg55
g21941
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23427
(dp23428
g37
g21947
sbsg211
(lp23429
g23385
asg213
g21958
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23430
(dp23431
g37
g21964
sbsg55
g21974
sg20
Nsbag14
(g28
g16
Ntp23432
Rp23433
(dp23434
g32
g14
(g148
g16
Ntp23435
Rp23436
(dp23437
g12
(lp23438
g21758
asg34
(itheano.gof.utils
scratchpad
p23439
(dp23440
g37
(lp23441
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p23442
tp23443
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p23444
tp23445
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p23446
tp23447
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23448
tp23449
asbsg211
(lp23450
g23433
asg213
g14
(g214
g16
Ntp23451
Rp23452
(dp23453
g218
(lp23454
sg220
(lp23455
I1
aI0
asg222
(lp23456
sg224
g19097
sg225
I00
sg226
(I1
I0
tp23457
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23458
(dp23459
bsg55
g14
(g56
g16
Ntp23460
Rp23461
(dp23462
g60
(I00
I00
tp23463
sg62
g19098
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23464
(dp23465
g37
(lp23466
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23467
tp23468
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p23469
tp23470
a(g47
I4732
g1035
S'return _dot(a, b)'
p23471
tp23472
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23473
tp23474
asbsg211
(lp23475
g23378
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23476
(dp23477
bsg55
g14
(g56
g16
Ntp23478
Rp23479
(dp23480
g60
(I00
tp23481
sg62
S'float64'
p23482
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp23483
Rp23484
(dp23485
g32
g14
(g148
g16
Ntp23486
Rp23487
(dp23488
g12
(lp23489
g14
(g28
g16
Ntp23490
Rp23491
(dp23492
g32
g14
(g148
g16
Ntp23493
Rp23494
(dp23495
g12
(lp23496
g14
(g28
g16
Ntp23497
Rp23498
(dp23499
g32
g14
(g148
g16
Ntp23500
Rp23501
(dp23502
g12
(lp23503
g21627
ag14
(g28
g16
Ntp23504
Rp23505
(dp23506
g32
g14
(g148
g16
Ntp23507
Rp23508
(dp23509
g12
(lp23510
g21786
asg34
(itheano.gof.utils
scratchpad
p23511
(dp23512
g37
g22059
sbsg211
(lp23513
g23505
asg213
g22070
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23514
(dp23515
bsg55
g22079
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23516
(dp23517
g37
g22084
sbsg211
(lp23518
g23498
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23519
(dp23520
bsg55
g22097
sg20
Nsbag14
(g28
g16
Ntp23521
Rp23522
(dp23523
g32
g14
(g148
g16
Ntp23524
Rp23525
(dp23526
g12
(lp23527
g14
(g28
g16
Ntp23528
Rp23529
(dp23530
g32
g14
(g148
g16
Ntp23531
Rp23532
(dp23533
g12
(lp23534
g1926
asg34
(itheano.gof.utils
scratchpad
p23535
(dp23536
g37
g22117
sbsg211
(lp23537
g23529
asg213
g22128
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23538
(dp23539
bsg55
g22137
sg20
Nsbag14
(g28
g16
Ntp23540
Rp23541
(dp23542
g32
g14
(g148
g16
Ntp23543
Rp23544
(dp23545
g12
(lp23546
g21645
asg34
(itheano.gof.utils
scratchpad
p23547
(dp23548
g37
g22149
sbsg211
(lp23549
g23541
asg213
g22160
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23550
(dp23551
g37
g22166
sbsg55
g22176
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23552
(dp23553
g37
g22182
sbsg211
(lp23554
g23522
asg213
g22193
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23555
(dp23556
g37
g22199
sbsg55
g22209
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23557
(dp23558
g37
g22215
sbsg211
(lp23559
g23491
asg213
g22226
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23560
(dp23561
g37
g22232
sbsg55
g22242
sg20
Nsbag14
(g28
g16
Ntp23562
Rp23563
(dp23564
g32
g14
(g148
g16
Ntp23565
Rp23566
(dp23567
g12
(lp23568
g21758
asg34
(itheano.gof.utils
scratchpad
p23569
(dp23570
g37
(lp23571
(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p23572
tp23573
a(g198
I231
g40
S'T = property(lambda self: theano.tensor.basic.transpose(self))'
p23574
tp23575
a(g47
I3084
g3382
S'ret = DimShuffle(x.broadcastable, axes, inplace=False)(x)'
p23576
tp23577
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23578
tp23579
asbsg211
(lp23580
g23563
asg213
g14
(g214
g16
Ntp23581
Rp23582
(dp23583
g218
(lp23584
sg220
(lp23585
I1
aI0
asg222
(lp23586
sg224
g19097
sg225
I00
sg226
(I1
I0
tp23587
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23588
(dp23589
bsg55
g14
(g56
g16
Ntp23590
Rp23591
(dp23592
g60
(I00
I00
tp23593
sg62
g19098
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23594
(dp23595
g37
(lp23596
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23597
tp23598
a(g47
I4567
g894
S'xgrad = dot(gz, y.T)'
p23599
tp23600
a(g47
I4732
g1035
S'return _dot(a, b)'
p23601
tp23602
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23603
tp23604
asbsg211
(lp23605
g23484
asg213
g1043
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23606
(dp23607
bsg55
g14
(g56
g16
Ntp23608
Rp23609
(dp23610
g60
(I00
tp23611
sg62
S'float64'
p23612
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p23613
(dp23614
g37
(lp23615
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p23616
tp23617
a(g893
I1532
g894
S'dC_dinps_t[jdx] += _dC_dinps_t[jdx]'
p23618
tp23619
a(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23620
tp23621
a(g202
I401
g52
S'self.add_tag_trace(node)'
p23622
tp23623
asbsg211
(lp23624
g23371
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p23625
(dp23626
g37
(lp23627
(g198
I117
g644
S'return theano.tensor.basic.add(self, other)'
p23628
tp23629
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p23630
tp23631
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p23632
tp23633
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p23634
tp23635
asbsg55
g14
(g56
g16
Ntp23636
Rp23637
(dp23638
g60
(I00
tp23639
sg62
g21593
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg1173
I6
sg1174
(lp23640
I00
aI00
aI00
aI00
aI00
asg1243
I00
sg665
g1176
((lp23641
tp23642
Rp23643
sg1180
I1
sg1181
I4
sg1182
(lp23644
g314
(g317
S'\x00\x00\x00\x00'
p23645
tp23646
Rp23647
ag314
(g317
S'\xff\xff\xff\xff'
p23648
tp23649
Rp23650
ag314
(g317
S'\xff\xff\xff\xff'
p23651
tp23652
Rp23653
ag314
(g317
S'\xff\xff\xff\xff'
p23654
tp23655
Rp23656
aI0
asg1002
I1
sg1188
I10
sg1189
I00
sg1190
I-1
sg1191
I5
sg20
S'grad_of_scan_fn'
p23657
sg1193
g1196
sg1221
g1176
((lp23658
(lp23659
g1191
aI5
aa(lp23660
g1232
aI0
aa(lp23661
g999
ag21799
aa(lp23662
g1243
aI00
aa(lp23663
g1002
aI1
aa(lp23664
g1227
aI1
aa(lp23665
g1229
a(lp23666
(lp23667
I1
aaaa(lp23668
g1190
aI-1
aa(lp23669
g1187
aI3
aa(lp23670
g1235
aI0
aa(lp23671
g1180
aI1
aa(lp23672
g1189
aI00
aa(lp23673
g8
aI00
aa(lp23674
g665
ag23643
aa(lp23675
g20
ag23657
aa(lp23676
g1240
aNaatp23677
Rp23678
sg1248
((t(g1249
(t(t(tS'NPY_ABI_VERSION=0x1000009'
p23679
S'md5:5fdb36e96440d5caf4ef51f650e44c59'
p23680
(g23582
((g19095
((I-1
I10
tp23681
I00
tp23682
tp23683
tp23684
(I1
(I00
tp23685
tp23686
tp23687
(g23452
((g19095
(g23681
I00
tp23688
tp23689
tp23690
(I1
(I00
tp23691
tp23692
tp23693
(g22160
((g19922
((I-1
I3
tp23694
I00
tp23695
tp23696
tp23697
(I1
(I00
tp23698
tp23699
tp23700
(g21892
((g19922
(g23694
I00
tp23701
tp23702
tp23703
(I1
(I00
tp23704
tp23705
tp23706
(g23258
((g19922
(g23694
I00
tp23707
tp23708
tp23709
(I1
(I00
tp23710
tp23711
tp23712
(g22160
((g19922
(g23694
I00
tp23713
tp23714
tp23715
(I1
(I00
tp23716
tp23717
tp23718
(g21892
((g19922
(g23694
I00
tp23719
tp23720
tp23721
(I1
(I00
tp23722
tp23723
tp23724
(g22160
((g19922
(g23694
I00
tp23725
tp23726
tp23727
(I1
(I00
tp23728
tp23729
tp23730
(g21892
((g19922
(g23694
I00
tp23731
tp23732
tp23733
(I1
(I00
tp23734
tp23735
tp23736
(g22160
((g19922
(g23694
I00
tp23737
tp23738
tp23739
(I1
(I00
tp23740
tp23741
tp23742
(g21892
((g19922
(g23694
I00
tp23743
tp23744
tp23745
(I1
(I00
tp23746
tp23747
tp23748
(g22128
((g1936
((S'a173b056c810f5c9ee305c38ce680f38'
p23749
I11
I0
tp23750
I00
tp23751
tp23752
tp23753
(I1
(I00
tp23754
tp23755
tp23756
(g21860
((g1936
(g23750
I00
tp23757
tp23758
tp23759
(I1
(I00
tp23760
tp23761
tp23762
(g22128
((g1936
(g23750
I00
tp23763
tp23764
tp23765
(I1
(I00
tp23766
tp23767
tp23768
(g21860
((g1936
(g23750
I00
tp23769
tp23770
tp23771
(I1
(I00
tp23772
tp23773
tp23774
(g22128
((g1936
(g23750
I00
tp23775
tp23776
tp23777
(I1
(I00
tp23778
tp23779
tp23780
(g21860
((g1936
(g23750
I00
tp23781
tp23782
tp23783
(I1
(I00
tp23784
tp23785
tp23786
(g22128
((g1936
(g23750
I00
tp23787
tp23788
tp23789
(I1
(I00
tp23790
tp23791
tp23792
(g21860
((g1936
(g23750
I00
tp23793
tp23794
tp23795
(I1
(I00
tp23796
tp23797
tp23798
(g22070
((g19686
((I-1
I12
tp23799
I00
tp23800
tp23801
tp23802
(I1
(I00
tp23803
tp23804
tp23805
(g22070
((g19686
(g23799
I00
tp23806
tp23807
tp23808
(I1
(I00
tp23809
tp23810
tp23811
(g22070
((g19686
(g23799
I00
tp23812
tp23813
tp23814
(I1
(I00
tp23815
tp23816
tp23817
(g22070
((g19686
(g23799
I00
tp23818
tp23819
tp23820
(I1
(I00
tp23821
tp23822
tp23823
(g23316
((g21641
((I-1
I2
tp23824
I00
tp23825
tp23826
tp23827
(I1
(I00
tp23828
tp23829
tp23830
(g23005
((g19006
((I-1
I1
tp23831
I00
tp23832
tp23833
tp23834
(I1
(I00
tp23835
tp23836
tp23837
(g22833
((g19006
(g23831
I00
tp23838
tp23839
tp23840
(I1
(I00
tp23841
tp23842
tp23843
(g22572
((g19742
((I-1
I0
tp23844
I00
tp23845
tp23846
tp23847
(I1
(I00
tp23848
tp23849
tp23850
(g22400
((g19742
(g23844
I00
tp23851
tp23852
tp23853
(I1
(I00
tp23854
tp23855
tp23856
(g22266
((g19666
((I-1
I11
tp23857
I00
tp23858
tp23859
tp23860
(I1
(I00
tp23861
tp23862
tp23863
(g21998
((g19666
(g23857
I00
tp23864
tp23865
tp23866
(I1
(I00
tp23867
tp23868
tp23869
(g23283
((g23267
((I4
I0
tp23870
I00
tp23871
tp23872
tp23873
(I1
(I00
tp23874
tp23875
tp23876
(g22193
((g22137
((I11
I0
tp23877
I00
tp23878
tp23879
(g22176
((I2
I0
tp23880
I00
tp23881
tp23882
tp23883
(I1
(I00
tp23884
tp23885
tp23886
(g21925
((g21869
((I12
I0
tp23887
I00
tp23888
tp23889
(g21908
((I3
I0
tp23890
I00
tp23891
tp23892
tp23893
(I1
(I00
tp23894
tp23895
tp23896
(g22193
((g22137
((I13
I0
tp23897
I00
tp23898
tp23899
(g22176
((I5
I0
tp23900
I00
tp23901
tp23902
tp23903
(I1
(I00
tp23904
tp23905
tp23906
(g21925
((g21869
((I14
I0
tp23907
I00
tp23908
tp23909
(g21908
((I6
I0
tp23910
I00
tp23911
tp23912
tp23913
(I1
(I00
tp23914
tp23915
tp23916
(g22193
((g22137
((I15
I0
tp23917
I00
tp23918
tp23919
(g22176
((I7
I0
tp23920
I00
tp23921
tp23922
tp23923
(I1
(I00
tp23924
tp23925
tp23926
(g21925
((g21869
((I16
I0
tp23927
I00
tp23928
tp23929
(g21908
((I8
I0
tp23930
I00
tp23931
tp23932
tp23933
(I1
(I00
tp23934
tp23935
tp23936
(g22193
((g22137
((I17
I0
tp23937
I00
tp23938
tp23939
(g22176
((I9
I0
tp23940
I00
tp23941
tp23942
tp23943
(I1
(I00
tp23944
tp23945
tp23946
(g21925
((g21869
((I18
I0
tp23947
I00
tp23948
tp23949
(g21908
((I10
I0
tp23950
I00
tp23951
tp23952
tp23953
(I1
(I00
tp23954
tp23955
tp23956
(g1043
((g21641
(g23824
I00
tp23957
tp23958
(g22079
((I19
I0
tp23959
I00
tp23960
tp23961
tp23962
(I1
(I00
tp23963
tp23964
tp23965
(g1043
((g21641
(g23824
I00
tp23966
tp23967
(g22079
((I20
I0
tp23968
I00
tp23969
tp23970
tp23971
(I1
(I00
tp23972
tp23973
tp23974
(g1043
((g21641
(g23824
I00
tp23975
tp23976
(g22079
((I21
I0
tp23977
I00
tp23978
tp23979
tp23980
(I1
(I00
tp23981
tp23982
tp23983
(g1043
((g21641
(g23824
I00
tp23984
tp23985
(g22079
((I22
I0
tp23986
I00
tp23987
tp23988
tp23989
(I1
(I00
tp23990
tp23991
tp23992
(g23030
((g23014
((I24
I0
tp23993
I00
tp23994
tp23995
tp23996
(I1
(I00
tp23997
tp23998
tp23999
(g22858
((g22842
((I25
I0
tp24000
I00
tp24001
tp24002
tp24003
(I1
(I00
tp24004
tp24005
tp24006
(g22597
((g22581
((I26
I0
tp24007
I00
tp24008
tp24009
tp24010
(I1
(I00
tp24011
tp24012
tp24013
(g22425
((g22409
((I27
I0
tp24014
I00
tp24015
tp24016
tp24017
(I1
(I00
tp24018
tp24019
tp24020
(g1043
((g23293
((I30
I0
tp24021
I00
tp24022
tp24023
(g23326
((I23
I0
tp24024
I00
tp24025
tp24026
tp24027
(I1
(I00
tp24028
tp24029
tp24030
(g21958
((g19922
((I-1
I5
tp24031
I00
tp24032
tp24033
(g21941
((I32
I0
tp24034
I00
tp24035
tp24036
tp24037
(I1
(I00
tp24038
tp24039
tp24040
(g21958
((g19922
(g24031
I00
tp24041
tp24042
(g21941
((I34
I0
tp24043
I00
tp24044
tp24045
tp24046
(I1
(I00
tp24047
tp24048
tp24049
(g21958
((g19922
(g24031
I00
tp24050
tp24051
(g21941
((I36
I0
tp24052
I00
tp24053
tp24054
tp24055
(I1
(I00
tp24056
tp24057
tp24058
(g21958
((g19922
(g24031
I00
tp24059
tp24060
(g21941
((I38
I0
tp24061
I00
tp24062
tp24063
tp24064
(I1
(I00
tp24065
tp24066
tp24067
(g22226
((g22097
((I39
I0
tp24068
I00
tp24069
tp24070
(g22209
((I31
I0
tp24071
I00
tp24072
tp24073
tp24074
(I1
(I00
tp24075
tp24076
tp24077
(g22226
((g22097
((I40
I0
tp24078
I00
tp24079
tp24080
(g22209
((I33
I0
tp24081
I00
tp24082
tp24083
tp24084
(I1
(I00
tp24085
tp24086
tp24087
(g22226
((g22097
((I41
I0
tp24088
I00
tp24089
tp24090
(g22209
((I35
I0
tp24091
I00
tp24092
tp24093
tp24094
(I1
(I00
tp24095
tp24096
tp24097
(g22226
((g22097
((I42
I0
tp24098
I00
tp24099
tp24100
(g22209
((I37
I0
tp24101
I00
tp24102
tp24103
tp24104
(I1
(I00
tp24105
tp24106
tp24107
(g652
((g21753
((I47
I0
tp24108
I00
tp24109
tp24110
(g21753
((I-1
I9
tp24111
I00
tp24112
tp24113
tp24114
(I1
(I00
tp24115
tp24116
tp24117
(g1043
((g21974
((I48
I0
tp24118
I00
tp24119
tp24120
(g23461
((I1
I0
tp24121
I00
tp24122
tp24123
tp24124
(I1
(I00
tp24125
tp24126
tp24127
(g22939
((g21974
((I49
I0
tp24128
I00
tp24129
tp24130
tp24131
(I1
(I00
tp24132
tp24133
tp24134
(g22506
((g21974
((I50
I0
tp24135
I00
tp24136
tp24137
tp24138
(I1
(I00
tp24139
tp24140
tp24141
(g1043
((g21974
((I51
I0
tp24142
I00
tp24143
tp24144
(g22007
((I29
I0
tp24145
I00
tp24146
tp24147
tp24148
(I1
(I00
tp24149
tp24150
tp24151
(g1043
((g22242
((I52
I0
tp24152
I00
tp24153
tp24154
(g23591
((I0
I0
tp24155
I00
tp24156
tp24157
tp24158
(I1
(I00
tp24159
tp24160
tp24161
(g23135
((g22242
((I53
I0
tp24162
I00
tp24163
tp24164
tp24165
(I1
(I00
tp24166
tp24167
tp24168
(g22702
((g22242
((I54
I0
tp24169
I00
tp24170
tp24171
tp24172
(I1
(I00
tp24173
tp24174
tp24175
(g1043
((g22242
((I55
I0
tp24176
I00
tp24177
tp24178
(g22275
((I28
I0
tp24179
I00
tp24180
tp24181
tp24182
(I1
(I00
tp24183
tp24184
tp24185
(g1043
((g22868
((I44
I0
tp24186
I00
tp24187
tp24188
(g22949
((I58
I0
tp24189
I00
tp24190
tp24191
tp24192
(I1
(I00
tp24193
tp24194
tp24195
(g1043
((g22435
((I46
I0
tp24196
I00
tp24197
tp24198
(g22516
((I59
I0
tp24199
I00
tp24200
tp24201
tp24202
(I1
(I00
tp24203
tp24204
tp24205
(g652
((g23479
((I57
I0
tp24206
I00
tp24207
tp24208
(g23609
((I61
I0
tp24209
I00
tp24210
tp24211
tp24212
(I1
(I00
tp24213
tp24214
tp24215
(g1043
((g23040
((I43
I0
tp24216
I00
tp24217
tp24218
(g23145
((I62
I0
tp24219
I00
tp24220
tp24221
tp24222
(I1
(I00
tp24223
tp24224
tp24225
(g1043
((g22607
((I45
I0
tp24226
I00
tp24227
tp24228
(g22712
((I63
I0
tp24229
I00
tp24230
tp24231
tp24232
(I1
(I00
tp24233
tp24234
tp24235
(g652
((g22025
((I60
I0
tp24236
I00
tp24237
tp24238
(g22293
((I64
I0
tp24239
I00
tp24240
tp24241
tp24242
(I1
(I00
tp24243
tp24244
tp24245
(g652
((g22967
((I65
I0
tp24246
I00
tp24247
tp24248
(g23163
((I68
I0
tp24249
I00
tp24250
tp24251
tp24252
(I1
(I00
tp24253
tp24254
tp24255
(g652
((g22534
((I66
I0
tp24256
I00
tp24257
tp24258
(g22730
((I69
I0
tp24259
I00
tp24260
tp24261
tp24262
(I1
(I00
tp24263
tp24264
tp24265
(g652
((g22321
((I70
I0
tp24266
I00
tp24267
tp24268
(g19922
((I-1
I6
tp24269
I00
tp24270
tp24271
tp24272
(I1
(I00
tp24273
tp24274
tp24275
(g652
((g21734
((I71
I0
tp24276
I00
tp24277
tp24278
(g21734
((I-1
I8
tp24279
I00
tp24280
tp24281
tp24282
(I1
(I00
tp24283
tp24284
tp24285
(g652
((g21715
((I72
I0
tp24286
I00
tp24287
tp24288
(g21715
((I-1
I7
tp24289
I00
tp24290
tp24291
tp24292
(I1
(I00
tp24293
tp24294
tp24295
tp24296
tp24297
sg1232
I0
sg1301
(lp24298
I00
aI00
aI00
aI00
aI00
asg1303
I1
sg1235
I0
sg1240
Nsg1304
(lp24299
g21533
ag14
(g56
g16
Ntp24300
Rp24301
(dp24302
g60
(I00
I00
I00
tp24303
sg62
g22784
sg64
g68
sg71
I00
sg20
Nsbag21552
ag21571
ag21590
asg1187
I3
sg1227
I1
sg1310
I10
sg1229
g23666
sbsbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p24304
(dp24305
g37
(lp24306
(g893
I1810
g894
S'outputs = local_op(*outer_inputs)'
p24307
tp24308
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24309
tp24310
a(g893
I440
g206
S'[t() for t in self.output_types])'
p24311
tp24312
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24313
tp24314
asbsg55
g24301
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24315
(dp24316
g37
(lp24317
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p24318
tp24319
a(g893
I1880
g894
S'gradients.append(x[-1])'
p24320
tp24321
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p24322
tp24323
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24324
tp24325
asbsg211
(lp24326
g19141
asg213
g14
(g308
g16
Ntp24327
Rp24328
(dp24329
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p24330
tp24331
Rp24332
tp24333
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24334
(dp24335
bsg55
g14
(g56
g16
Ntp24336
Rp24337
(dp24338
g60
(I00
I00
tp24339
sg62
g22784
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24340
(dp24341
g37
(lp24342
(g105
I76
g106
S'self.initTraining()'
p24343
tp24344
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p24345
tp24346
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24347
tp24348
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24349
tp24350
asbsg211
(lp24351
g19102
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24352
(dp24353
g37
(lp24354
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24355
tp24356
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24357
tp24358
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24359
tp24360
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24361
tp24362
asbsg55
g14
(g56
g16
Ntp24363
Rp24364
(dp24365
g60
(I00
I00
tp24366
sg62
S'float64'
p24367
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24368
(dp24369
g37
(lp24370
(g105
I76
g106
S'self.initTraining()'
p24371
tp24372
a(g109
I101
g110
S'self.W_in: self.W_in - lr * gW_in,'
p24373
tp24374
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24375
tp24376
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24377
tp24378
asbsg211
(lp24379
g19075
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24380
(dp24381
g37
(lp24382
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24383
tp24384
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24385
tp24386
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24387
tp24388
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24389
tp24390
asbsg55
g14
(g56
g16
Ntp24391
Rp24392
(dp24393
g60
(I00
I00
tp24394
sg62
S'float64'
p24395
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g19085
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g19082
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp24396
Rp24397
(dp24398
g20
Nsg21
g14
(g28
g16
Ntp24399
Rp24400
(dp24401
g32
g14
(g148
g16
Ntp24402
Rp24403
(dp24404
g12
(lp24405
g19653
ag14
(g28
g16
Ntp24406
Rp24407
(dp24408
g32
g14
(g148
g16
Ntp24409
Rp24410
(dp24411
g12
(lp24412
g14
(g28
g16
Ntp24413
Rp24414
(dp24415
g32
g14
(g148
g16
Ntp24416
Rp24417
(dp24418
g12
(lp24419
g19055
asg34
(itheano.gof.utils
scratchpad
p24420
(dp24421
g37
(lp24422
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24423
tp24424
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24425
tp24426
a(g205
I533
g206
S'inplace=False)(input))'
p24427
tp24428
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24429
tp24430
asbsg211
(lp24431
g24414
asg213
g14
(g214
g16
Ntp24432
Rp24433
(dp24434
g218
(lp24435
sg220
(lp24436
sg222
(lp24437
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp24438
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24439
(dp24440
bsg55
g14
(g56
g16
Ntp24441
Rp24442
(dp24443
g60
(I01
I01
tp24444
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp24445
Rp24446
(dp24447
g32
g14
(g148
g16
Ntp24448
Rp24449
(dp24450
g12
(lp24451
g21538
asg34
(itheano.gof.utils
scratchpad
p24452
(dp24453
g37
(lp24454
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p24455
tp24456
a(g893
I1880
g894
S'gradients.append(x[-1])'
p24457
tp24458
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p24459
tp24460
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24461
tp24462
asbsg211
(lp24463
g24446
asg213
g14
(g308
g16
Ntp24464
Rp24465
(dp24466
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p24467
tp24468
Rp24469
tp24470
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24471
(dp24472
bsg55
g14
(g56
g16
Ntp24473
Rp24474
(dp24475
g60
(I00
I00
tp24476
sg62
g21555
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24477
(dp24478
g37
(lp24479
(g105
I76
g106
S'self.initTraining()'
p24480
tp24481
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p24482
tp24483
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24484
tp24485
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24486
tp24487
asbsg211
(lp24488
g24407
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24489
(dp24490
g37
(lp24491
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24492
tp24493
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24494
tp24495
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24496
tp24497
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24498
tp24499
asbsg55
g14
(g56
g16
Ntp24500
Rp24501
(dp24502
g60
(I00
I00
tp24503
sg62
S'float64'
p24504
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24505
(dp24506
g37
(lp24507
(g105
I76
g106
S'self.initTraining()'
p24508
tp24509
a(g109
I100
g110
S'updates={self.W: self.W - lr * gW,'
p24510
tp24511
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24512
tp24513
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24514
tp24515
asbsg211
(lp24516
g24400
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24517
(dp24518
g37
(lp24519
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24520
tp24521
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24522
tp24523
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24524
tp24525
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24526
tp24527
asbsg55
g14
(g56
g16
Ntp24528
Rp24529
(dp24530
g60
(I00
I00
tp24531
sg62
S'float64'
p24532
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g19656
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g19653
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp24533
Rp24534
(dp24535
g20
Nsg21
g14
(g28
g16
Ntp24536
Rp24537
(dp24538
g32
g14
(g148
g16
Ntp24539
Rp24540
(dp24541
g12
(lp24542
g19673
ag14
(g28
g16
Ntp24543
Rp24544
(dp24545
g32
g14
(g148
g16
Ntp24546
Rp24547
(dp24548
g12
(lp24549
g14
(g28
g16
Ntp24550
Rp24551
(dp24552
g32
g14
(g148
g16
Ntp24553
Rp24554
(dp24555
g12
(lp24556
g19055
asg34
(itheano.gof.utils
scratchpad
p24557
(dp24558
g37
(lp24559
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24560
tp24561
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24562
tp24563
a(g205
I533
g206
S'inplace=False)(input))'
p24564
tp24565
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24566
tp24567
asbsg211
(lp24568
g24551
asg213
g14
(g214
g16
Ntp24569
Rp24570
(dp24571
g218
(lp24572
sg220
(lp24573
sg222
(lp24574
I0
aI1
asg224
(tsg225
I00
sg226
(g227
g227
tp24575
sg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24576
(dp24577
bsg55
g14
(g56
g16
Ntp24578
Rp24579
(dp24580
g60
(I01
I01
tp24581
sg62
g63
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbag14
(g28
g16
Ntp24582
Rp24583
(dp24584
g32
g14
(g148
g16
Ntp24585
Rp24586
(dp24587
g12
(lp24588
g21557
asg34
(itheano.gof.utils
scratchpad
p24589
(dp24590
g37
(lp24591
(g886
I924
g890
S'input_grads = node.op.grad(inputs, new_output_grads)'
p24592
tp24593
a(g893
I1880
g894
S'gradients.append(x[-1])'
p24594
tp24595
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p24596
tp24597
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24598
tp24599
asbsg211
(lp24600
g24583
asg213
g14
(g308
g16
Ntp24601
Rp24602
(dp24603
g312
(g314
(g367
S'\xff\xff\xff\xff\xff\xff\xff\xff'
p24604
tp24605
Rp24606
tp24607
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24608
(dp24609
bsg55
g14
(g56
g16
Ntp24610
Rp24611
(dp24612
g60
(I00
I00
tp24613
sg62
g21574
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24614
(dp24615
g37
(lp24616
(g105
I76
g106
S'self.initTraining()'
p24617
tp24618
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p24619
tp24620
a(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24621
tp24622
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24623
tp24624
asbsg211
(lp24625
g24544
asg213
g5746
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24626
(dp24627
g37
(lp24628
(g198
I144
g199
S'return theano.tensor.mul(self, other)'
p24629
tp24630
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24631
tp24632
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24633
tp24634
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24635
tp24636
asbsg55
g14
(g56
g16
Ntp24637
Rp24638
(dp24639
g60
(I00
I00
tp24640
sg62
S'float64'
p24641
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24642
(dp24643
g37
(lp24644
(g105
I76
g106
S'self.initTraining()'
p24645
tp24646
a(g109
I102
g110
S'self.W_out: self.W_out - lr * gW_out})'
p24647
tp24648
a(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24649
tp24650
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24651
tp24652
asbsg211
(lp24653
g24537
asg213
g1571
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24654
(dp24655
g37
(lp24656
(g198
I136
g1564
S'return theano.tensor.basic.sub(self, other)'
p24657
tp24658
a(g202
I399
g52
S'node = self.make_node(*inputs, **kwargs)'
p24659
tp24660
a(g205
I567
g206
S'for dtype, broadcastable in izip(out_dtypes, out_broadcastables)'
p24661
tp24662
a(g51
I317
g52
S'return utils.add_tag_trace(self.make_variable(name))'
p24663
tp24664
asbsg55
g14
(g56
g16
Ntp24665
Rp24666
(dp24667
g60
(I00
I00
tp24668
sg62
S'float64'
p24669
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg22
g19676
sg23
I01
sg24
I00
sg25
I01
sg26
I01
sg27
g19673
sg72
I01
sg73
Nsbasg211
g14
(g6072
g16
Ntp24670
Rp24671
(dp24672
g27
g20385
sg23
I00
sbsg1240
g1196
stp24673
Rp24674
(lp24675
g14
(g158
g16
Ntp24676
Rp24677
(dp24678
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24679
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19006
sg73
Nsbag14
(g158
g16
Ntp24680
Rp24681
(dp24682
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24683
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19027
sg73
Nsbag14
(g158
g16
Ntp24684
Rp24685
(dp24686
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24687
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19048
sg73
Nsbag14
(g158
g16
Ntp24688
Rp24689
(dp24690
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24691
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19069
sg73
Nsbag14
(g158
g16
Ntp24692
Rp24693
(dp24694
g6082
I0
sg20
Nsg6083
I00
sg162
g19087
sg25
I01
sg24
I00
sg173
I00
sg55
g19095
sg73
Nsbag14
(g158
g16
Ntp24695
Rp24696
(dp24697
g6082
I0
sg20
Nsg6083
I00
sg162
g19658
sg25
I01
sg24
I00
sg173
I00
sg55
g19666
sg73
Nsbag14
(g158
g16
Ntp24698
Rp24699
(dp24700
g6082
I0
sg20
Nsg6083
I00
sg162
g19678
sg25
I01
sg24
I00
sg173
I00
sg55
g19686
sg73
Nsba(lp24701
NaNaNaNag19090
ag19661
ag19681
atp24702
Rp24703
sg6109
I2
sg6110
g19013
sg6111
g19673
sg6112
g5
(g6
((dp24704
g8
Nsg9
g10
sg11
I00
sg12
(lp24705
g14
(g15
g16
Ntp24706
Rp24707
(dp24708
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g19013
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp24709
Rp24710
(dp24711
g20
Nsg21
Nsg22
Nsg23
Nsg24
I00
sg25
I00
sg26
I00
sg27
g18992
sg72
I00
sg73
Nsbag14
(g15
g16
Ntp24712
Rp24713
(dp24714
g20
Nsg21
Nsg22
g19085
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g19082
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp24715
Rp24716
(dp24717
g20
Nsg21
Nsg22
g19656
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g19653
sg72
I01
sg73
Nsbag14
(g15
g16
Ntp24718
Rp24719
(dp24720
g20
Nsg21
Nsg22
g19676
sg23
I01
sg24
I00
sg25
I01
sg26
I00
sg27
g19673
sg72
I01
sg73
Nsbasg211
(lp24721
g14
(g6072
g16
Ntp24722
Rp24723
(dp24724
g27
g14
(g28
g16
Ntp24725
Rp24726
(dp24727
g32
g14
(g148
g16
Ntp24728
Rp24729
(dp24730
g12
(lp24731
g14
(g28
g16
Ntp24732
Rp24733
(dp24734
g32
g14
(g148
g16
Ntp24735
Rp24736
(dp24737
g12
(lp24738
g14
(g28
g16
Ntp24739
Rp24740
(dp24741
g32
g14
(g148
g16
Ntp24742
Rp24743
(dp24744
g12
(lp24745
g14
(g28
g16
Ntp24746
Rp24747
(dp24748
g32
g14
(g148
g16
Ntp24749
Rp24750
(dp24751
g12
(lp24752
g14
(g28
g16
Ntp24753
Rp24754
(dp24755
g32
g14
(g148
g16
Ntp24756
Rp24757
(dp24758
g12
(lp24759
g19013
asg34
(itheano.gof.utils
scratchpad
p24760
(dp24761
g37
g19198
sbsg211
(lp24762
g24754
asg213
g19209
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24763
(dp24764
bsg55
g19220
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24765
(dp24766
g37
g19225
sbsg211
(lp24767
g24747
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24768
(dp24769
g37
g19237
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24770
(dp24771
g37
g19248
sbsg211
(lp24772
g24740
asg213
g19259
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24773
(dp24774
bsg55
g19268
sg20
Nsbag14
(g28
g16
Ntp24775
Rp24776
(dp24777
g32
g14
(g148
g16
Ntp24778
Rp24779
(dp24780
g12
(lp24781
g24754
ag14
(g401
g16
Ntp24782
Rp24783
(dp24784
g32
g14
(g148
g16
Ntp24785
Rp24786
(dp24787
g12
(lp24788
g24740
asg34
(itheano.gof.utils
scratchpad
p24789
(dp24790
g37
g19286
sbsg211
(lp24791
g24783
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24792
(dp24793
bsg55
g19299
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24794
(dp24795
g37
g19303
sbsg211
(lp24796
g24776
asg213
g19314
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24797
(dp24798
bsg55
g19325
sg20
Nsbag14
(g28
g16
Ntp24799
Rp24800
(dp24801
g32
g14
(g148
g16
Ntp24802
Rp24803
(dp24804
g12
(lp24805
g14
(g28
g16
Ntp24806
Rp24807
(dp24808
g32
g14
(g148
g16
Ntp24809
Rp24810
(dp24811
g12
(lp24812
g477
ag14
(g28
g16
Ntp24813
Rp24814
(dp24815
g32
g14
(g148
g16
Ntp24816
Rp24817
(dp24818
g12
(lp24819
g24740
ag14
(g28
g16
Ntp24820
Rp24821
(dp24822
g32
g14
(g148
g16
Ntp24823
Rp24824
(dp24825
g12
(lp24826
g14
(g28
g16
Ntp24827
Rp24828
(dp24829
g32
g14
(g148
g16
Ntp24830
Rp24831
(dp24832
g12
(lp24833
g14
(g28
g16
Ntp24834
Rp24835
(dp24836
g32
g14
(g148
g16
Ntp24837
Rp24838
(dp24839
g12
(lp24840
g14
(g28
g16
Ntp24841
Rp24842
(dp24843
g32
g14
(g148
g16
Ntp24844
Rp24845
(dp24846
g12
(lp24847
g18992
asg34
(itheano.gof.utils
scratchpad
p24848
(dp24849
g37
g19379
sbsg211
(lp24850
g24842
asg213
g19390
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24851
(dp24852
bsg55
g19399
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24853
(dp24854
g37
g19404
sbsg211
(lp24855
g24835
asg213
g19415
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24856
(dp24857
g37
g19420
sbsg55
g19430
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24858
(dp24859
g37
g19435
sbsg211
(lp24860
g24828
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24861
(dp24862
g37
g19447
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24863
(dp24864
g37
g19458
sbsg211
(lp24865
g24821
asg213
g19469
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24866
(dp24867
bsg55
g19478
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24868
(dp24869
g37
g19482
sbsg211
(lp24870
g24814
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24871
(dp24872
g37
g19494
sbsg55
g19504
sg20
Nsbag14
(g28
g16
Ntp24873
Rp24874
(dp24875
g32
g14
(g148
g16
Ntp24876
Rp24877
(dp24878
g12
(lp24879
g14
(g28
g16
Ntp24880
Rp24881
(dp24882
g32
g14
(g148
g16
Ntp24883
Rp24884
(dp24885
g12
(lp24886
g24835
asg34
(itheano.gof.utils
scratchpad
p24887
(dp24888
g37
g19523
sbsg211
(lp24889
g24881
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24890
(dp24891
g37
g19535
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24892
(dp24893
g37
g19546
sbsg211
(lp24894
g24874
asg213
g19557
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24895
(dp24896
bsg55
g19566
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24897
(dp24898
g37
g19570
sbsg211
(lp24899
g24807
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24900
(dp24901
g37
g19582
sbsg55
g19592
sg20
Nsbag24835
ag14
(g401
g16
Ntp24902
Rp24903
(dp24904
g32
g14
(g148
g16
Ntp24905
Rp24906
(dp24907
g12
(lp24908
g24821
asg34
(itheano.gof.utils
scratchpad
p24909
(dp24910
g37
g19604
sbsg211
(lp24911
g24903
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24912
(dp24913
bsg55
g19617
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24914
(dp24915
g37
g19621
sbsg211
(lp24916
g24800
asg213
g19632
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24917
(dp24918
g37
g19643
sbsg55
g19592
sg20
Nsbag24740
ag19082
ag19653
ag19673
asg34
(itheano.gof.utils
scratchpad
p24919
(dp24920
g37
g20247
sbsg211
(lp24921
g24733
ag14
(g28
g16
Ntp24922
Rp24923
(dp24924
g32
g24736
sg33
I1
sg34
(itheano.gof.utils
scratchpad
p24925
(dp24926
g37
g20273
sbsg55
g20033
sg20
Nsbasg213
g19724
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24927
(dp24928
g37
g20262
sbsg55
g19719
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p24929
(dp24930
g37
(lp24931
(g298
I1044
g299
S'offsets)'
p24932
tp24933
a(g298
I1029
g6343
S'out_ls.append(out[offsets[idx]:])'
p24934
tp24935
a(g198
I407
g302
S'lambda entry: isinstance(entry, Variable)))'
p24936
tp24937
a(g202
I401
g52
S'self.add_tag_trace(node)'
p24938
tp24939
asbsg211
(lp24940
g24726
asg213
g14
(g308
g16
Ntp24941
Rp24942
(dp24943
g312
(g313
(g314
(g367
S'\x01\x00\x00\x00\x00\x00\x00\x00'
p24944
tp24945
Rp24946
NNtp24947
Rp24948
tp24949
sg326
Nsg229
g230
sbsbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p24950
(dp24951
bsg55
g14
(g56
g16
Ntp24952
Rp24953
(dp24954
g60
(I00
I00
tp24955
sg62
g19722
sg64
g68
sg71
I00
sg20
Nsbsg20
Nsbsg23
I00
sbag14
(g6072
g16
Ntp24956
Rp24957
(dp24958
g27
g24923
sg23
I00
sbasg1240
g1196
stp24959
Rp24960
(lp24961
g14
(g158
g16
Ntp24962
Rp24963
(dp24964
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24965
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19027
sg73
Nsbag14
(g158
g16
Ntp24966
Rp24967
(dp24968
g6082
I1
sg20
Nsg6083
I01
sg162
(lp24969
Nasg25
I00
sg24
I00
sg173
I00
sg55
g19006
sg73
Nsbag14
(g158
g16
Ntp24970
Rp24971
(dp24972
g6082
I0
sg20
Nsg6083
I00
sg162
g19087
sg25
I01
sg24
I00
sg173
I00
sg55
g19095
sg73
Nsbag14
(g158
g16
Ntp24973
Rp24974
(dp24975
g6082
I0
sg20
Nsg6083
I00
sg162
g19658
sg25
I01
sg24
I00
sg173
I00
sg55
g19666
sg73
Nsbag14
(g158
g16
Ntp24976
Rp24977
(dp24978
g6082
I0
sg20
Nsg6083
I00
sg162
g19678
sg25
I01
sg24
I00
sg173
I00
sg55
g19686
sg73
Nsba(lp24979
NaNag19090
ag19661
ag19681
atp24980
Rp24981
sg6392
g19653
sg6393
g18992
sg6394
g14
(g28
g16
Ntp24982
Rp24983
(dp24984
g32
g14
(g148
g16
Ntp24985
Rp24986
(dp24987
g12
(lp24988
g14
(g28
g16
Ntp24989
Rp24990
(dp24991
g32
g14
(g148
g16
Ntp24992
Rp24993
(dp24994
g12
(lp24995
g14
(g28
g16
Ntp24996
Rp24997
(dp24998
g32
g14
(g148
g16
Ntp24999
Rp25000
(dp25001
g12
(lp25002
g14
(g28
g16
Ntp25003
Rp25004
(dp25005
g32
g14
(g148
g16
Ntp25006
Rp25007
(dp25008
g12
(lp25009
g19013
asg34
(itheano.gof.utils
scratchpad
p25010
(dp25011
g37
g19198
sbsg211
(lp25012
g25004
asg213
g19209
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25013
(dp25014
bsg55
g19220
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25015
(dp25016
g37
g19225
sbsg211
(lp25017
g24997
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25018
(dp25019
g37
g19237
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25020
(dp25021
g37
g19248
sbsg211
(lp25022
g24990
asg213
g19259
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25023
(dp25024
bsg55
g19268
sg20
Nsbag14
(g28
g16
Ntp25025
Rp25026
(dp25027
g32
g14
(g148
g16
Ntp25028
Rp25029
(dp25030
g12
(lp25031
g25004
ag14
(g401
g16
Ntp25032
Rp25033
(dp25034
g32
g14
(g148
g16
Ntp25035
Rp25036
(dp25037
g12
(lp25038
g24990
asg34
(itheano.gof.utils
scratchpad
p25039
(dp25040
g37
g19286
sbsg211
(lp25041
g25033
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25042
(dp25043
bsg55
g19299
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25044
(dp25045
g37
g19303
sbsg211
(lp25046
g25026
asg213
g19314
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25047
(dp25048
bsg55
g19325
sg20
Nsbag14
(g28
g16
Ntp25049
Rp25050
(dp25051
g32
g14
(g148
g16
Ntp25052
Rp25053
(dp25054
g12
(lp25055
g14
(g28
g16
Ntp25056
Rp25057
(dp25058
g32
g14
(g148
g16
Ntp25059
Rp25060
(dp25061
g12
(lp25062
g477
ag14
(g28
g16
Ntp25063
Rp25064
(dp25065
g32
g14
(g148
g16
Ntp25066
Rp25067
(dp25068
g12
(lp25069
g24990
ag14
(g28
g16
Ntp25070
Rp25071
(dp25072
g32
g14
(g148
g16
Ntp25073
Rp25074
(dp25075
g12
(lp25076
g14
(g28
g16
Ntp25077
Rp25078
(dp25079
g32
g14
(g148
g16
Ntp25080
Rp25081
(dp25082
g12
(lp25083
g14
(g28
g16
Ntp25084
Rp25085
(dp25086
g32
g14
(g148
g16
Ntp25087
Rp25088
(dp25089
g12
(lp25090
g14
(g28
g16
Ntp25091
Rp25092
(dp25093
g32
g14
(g148
g16
Ntp25094
Rp25095
(dp25096
g12
(lp25097
g18992
asg34
(itheano.gof.utils
scratchpad
p25098
(dp25099
g37
g19379
sbsg211
(lp25100
g25092
asg213
g19390
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25101
(dp25102
bsg55
g19399
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25103
(dp25104
g37
g19404
sbsg211
(lp25105
g25085
asg213
g19415
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25106
(dp25107
g37
g19420
sbsg55
g19430
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25108
(dp25109
g37
g19435
sbsg211
(lp25110
g25078
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25111
(dp25112
g37
g19447
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25113
(dp25114
g37
g19458
sbsg211
(lp25115
g25071
asg213
g19469
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25116
(dp25117
bsg55
g19478
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25118
(dp25119
g37
g19482
sbsg211
(lp25120
g25064
asg213
g652
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25121
(dp25122
g37
g19494
sbsg55
g19504
sg20
Nsbag14
(g28
g16
Ntp25123
Rp25124
(dp25125
g32
g14
(g148
g16
Ntp25126
Rp25127
(dp25128
g12
(lp25129
g14
(g28
g16
Ntp25130
Rp25131
(dp25132
g32
g14
(g148
g16
Ntp25133
Rp25134
(dp25135
g12
(lp25136
g25085
asg34
(itheano.gof.utils
scratchpad
p25137
(dp25138
g37
g19523
sbsg211
(lp25139
g25131
asg213
g347
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25140
(dp25141
g37
g19535
sbsg55
g361
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25142
(dp25143
g37
g19546
sbsg211
(lp25144
g25124
asg213
g19557
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25145
(dp25146
bsg55
g19566
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25147
(dp25148
g37
g19570
sbsg211
(lp25149
g25057
asg213
g764
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25150
(dp25151
g37
g19582
sbsg55
g19592
sg20
Nsbag25085
ag14
(g401
g16
Ntp25152
Rp25153
(dp25154
g32
g14
(g148
g16
Ntp25155
Rp25156
(dp25157
g12
(lp25158
g25071
asg34
(itheano.gof.utils
scratchpad
p25159
(dp25160
g37
g19604
sbsg211
(lp25161
g25153
asg213
g426
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25162
(dp25163
bsg55
g19617
sg20
Nsbasg34
(itheano.gof.utils
scratchpad
p25164
(dp25165
g37
g19621
sbsg211
(lp25166
g25050
asg213
g19632
sbsg33
I0
sg34
(itheano.gof.utils
scratchpad
p25167
(dp25168
g37
g19643
sbsg55
g19592
sg20
Nsbag24990
ag19082
ag19653
ag19673
asg34
(itheano.gof.utils
scratchpad
p25169
(dp25170
g37
g20247
sbsg211
(lp25171
g14
(g28
g16
Ntp25172
Rp25173
(dp25174
g32
g24986
sg33
I0
sg34
(itheano.gof.utils
scratchpad
p25175
(dp25176
g37
g20262
sbsg55
g19719
sg20
Nsbag24983
asg213
g19724
sbsg33
I1
sg34
(itheano.gof.utils
scratchpad
p25177
(dp25178
g37
g20273
sbsg55
g20033
sg20
Nsbsg6592
I1
sg6593
g19082
sba.